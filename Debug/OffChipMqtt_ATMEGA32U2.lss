
OffChipMqtt_ATMEGA32U2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000246a  000024fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000246a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f7  00800112  00800112  00002510  2**0
                  ALLOC
  3 .noinit       00000002  00800309  00800309  00002510  2**0
                  ALLOC
  4 .stab         0000d0c8  00000000  00000000  00002510  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000126f7  00000000  00000000  0000f5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000030  00000000  00000000  00021ccf  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00021d00  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	a9 c0       	rjmp	.+338    	; 0x154 <__ctors_end>
       2:	00 00       	nop
       4:	cf c0       	rjmp	.+414    	; 0x1a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c0       	rjmp	.+410    	; 0x1a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c0       	rjmp	.+406    	; 0x1a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c0       	rjmp	.+402    	; 0x1a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c0       	rjmp	.+398    	; 0x1a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c0       	rjmp	.+394    	; 0x1a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c0       	rjmp	.+390    	; 0x1a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c0       	rjmp	.+386    	; 0x1a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c0       	rjmp	.+382    	; 0x1a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	bd c0       	rjmp	.+378    	; 0x1a4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bb c0       	rjmp	.+374    	; 0x1a4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b9 c0       	rjmp	.+370    	; 0x1a4 <__bad_interrupt>
      32:	00 00       	nop
      34:	b7 c0       	rjmp	.+366    	; 0x1a4 <__bad_interrupt>
      36:	00 00       	nop
      38:	b5 c0       	rjmp	.+362    	; 0x1a4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b3 c0       	rjmp	.+358    	; 0x1a4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b1 c0       	rjmp	.+354    	; 0x1a4 <__bad_interrupt>
      42:	00 00       	nop
      44:	af c0       	rjmp	.+350    	; 0x1a4 <__bad_interrupt>
      46:	00 00       	nop
      48:	ad c0       	rjmp	.+346    	; 0x1a4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ab c0       	rjmp	.+342    	; 0x1a4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a9 c0       	rjmp	.+338    	; 0x1a4 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__vector_21>
      58:	a5 c0       	rjmp	.+330    	; 0x1a4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <__vector_23>
      60:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <__vector_24>
      64:	9f c0       	rjmp	.+318    	; 0x1a4 <__bad_interrupt>
      66:	00 00       	nop
      68:	9d c0       	rjmp	.+314    	; 0x1a4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9b c0       	rjmp	.+310    	; 0x1a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c0       	rjmp	.+306    	; 0x1a4 <__bad_interrupt>
	...

00000074 <__trampolines_end>:
      74:	70 61       	ori	r23, 0x10	; 16
      76:	74 74       	andi	r23, 0x44	; 68
      78:	65 72       	andi	r22, 0x25	; 37
      7a:	6e 00       	.word	0x006e	; ????

0000007c <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_11>:
      7c:	70 69 78 65 6c 73 00                                pixels.

00000083 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_10>:
      83:	6f 66 66 00                                         off.

00000087 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_9>:
      87:	64 65 63 61 79 00                                   decay.

0000008d <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_8>:
      8d:	73 75 73 74 61 69 6e 00                             sustain.

00000095 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_7>:
      95:	61 74 74 61 63 6b 00                                attack.

0000009c <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_6>:
      9c:	64 65 6e 73 69 74 79 00                             density.

000000a4 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_5>:
      a4:	73 6d 6f 64 65 00                                   smode.

000000aa <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_4>:
      aa:	65 66 66 65 63 74 00                                effect.

000000b1 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_3>:
      b1:	63 6d 6f 64 65 00                                   cmode.

000000b7 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_2>:
      b7:	6f 72 64 65 72 00                                   order.

000000bd <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_1>:
      bd:	74 63 6f 6c 6f 72 00                                tcolor.

000000c4 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_0>:
      c4:	73 63 6f 6c 6f 72 00                                scolor.

000000cb <_ZZN6MyMqtt7OnTopicEPcS0_E3__c>:
      cb:	70 63 6f 6c 6f 72 00                                pcolor.

000000d2 <_ZZN6MyMqtt9MqttTasksEvE3__c_8>:
      d2:	22 00                                               ".

000000d4 <_ZZN6MyMqtt9MqttTasksEvE3__c_7>:
      d4:	22 00                                               ".

000000d6 <_ZZN6MyMqtt9MqttTasksEvE3__c_6>:
      d6:	2b 41 54 2b 54 4f 50 49 43 3d 22 00                 +AT+TOPIC=".

000000e2 <_ZZN6MyMqtt9MqttTasksEvE3__c_5>:
      e2:	45 72 72 6f 72 00                                   Error.

000000e8 <_ZZN6MyMqtt9MqttTasksEvE3__c_4>:
      e8:	4f 4b 00                                            OK.

000000eb <_ZZN6MyMqtt9MqttTasksEvE3__c_3>:
      eb:	2b 57 49 46 49 20 44 69 73 63 6f 6e 6e 65 63 74     +WIFI Disconnect
      fb:	65 64 00                                            ed.

000000fe <_ZZN6MyMqtt9MqttTasksEvE3__c_2>:
      fe:	2b 57 49 46 49 20 43 6f 6e 6e 65 63 74 65 64 00     +WIFI Connected.

0000010e <_ZZN6MyMqtt9MqttTasksEvE3__c_1>:
     10e:	2b 4d 51 54 54 20 44 69 73 63 6f 6e 6e 65 63 74     +MQTT Disconnect
     11e:	65 64 00                                            ed.

00000121 <_ZZN6MyMqtt9MqttTasksEvE3__c_0>:
     121:	2b 4d 51 54 54 20 43 6f 6e 6e 65 63 74 65 64 00     +MQTT Connected.

00000131 <_ZZN6MyMqtt9MqttTasksEvE3__c>:
     131:	0d 0a 00                                            ...

00000134 <_ZZN6MyMqtt5beginEvE3__c>:
     134:	53 79 73 74 65 6d 20 69 6e 69 74 20 64 6f 6e 65     System init done
     144:	2e 0d 0a 52 65 61 64 79 0d 0a 00 00                 ...Ready....

00000150 <__ctors_start>:
     150:	fc 0d       	add	r31, r12
     152:	71 0f       	add	r23, r17

00000154 <__ctors_end>:
     154:	11 24       	eor	r1, r1
     156:	1f be       	out	0x3f, r1	; 63
     158:	cf ef       	ldi	r28, 0xFF	; 255
     15a:	d4 e0       	ldi	r29, 0x04	; 4
     15c:	de bf       	out	0x3e, r29	; 62
     15e:	cd bf       	out	0x3d, r28	; 61

00000160 <__do_copy_data>:
     160:	11 e0       	ldi	r17, 0x01	; 1
     162:	a0 e0       	ldi	r26, 0x00	; 0
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	ea e6       	ldi	r30, 0x6A	; 106
     168:	f4 e2       	ldi	r31, 0x24	; 36
     16a:	02 c0       	rjmp	.+4      	; 0x170 <__do_copy_data+0x10>
     16c:	05 90       	lpm	r0, Z+
     16e:	0d 92       	st	X+, r0
     170:	a2 31       	cpi	r26, 0x12	; 18
     172:	b1 07       	cpc	r27, r17
     174:	d9 f7       	brne	.-10     	; 0x16c <__do_copy_data+0xc>

00000176 <__do_clear_bss>:
     176:	23 e0       	ldi	r18, 0x03	; 3
     178:	a2 e1       	ldi	r26, 0x12	; 18
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
     17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
     180:	a9 30       	cpi	r26, 0x09	; 9
     182:	b2 07       	cpc	r27, r18
     184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>

00000186 <__do_global_ctors>:
     186:	10 e0       	ldi	r17, 0x00	; 0
     188:	ca ea       	ldi	r28, 0xAA	; 170
     18a:	d0 e0       	ldi	r29, 0x00	; 0
     18c:	04 c0       	rjmp	.+8      	; 0x196 <__do_global_ctors+0x10>
     18e:	21 97       	sbiw	r28, 0x01	; 1
     190:	fe 01       	movw	r30, r28
     192:	0e 94 39 11 	call	0x2272	; 0x2272 <__tablejump2__>
     196:	c8 3a       	cpi	r28, 0xA8	; 168
     198:	d1 07       	cpc	r29, r17
     19a:	c9 f7       	brne	.-14     	; 0x18e <__do_global_ctors+0x8>
     19c:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <main>
     1a0:	0c 94 33 12 	jmp	0x2466	; 0x2466 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	2d cf       	rjmp	.-422    	; 0x0 <__vectors>

000001a6 <_ZN9NeoPixels10initCandleEv>:

#define CANDLE_FLICKER_RATE m_cfg.m_sustain
#define CANDLE_RESOLUTION 32

void NeoPixels::initCandle()
	{
     1a6:	fc 01       	movw	r30, r24
		memset(m_arry, 0, sizeof(m_arry));
     1a8:	c9 96       	adiw	r24, 0x39	; 57
     1aa:	26 e9       	ldi	r18, 0x96	; 150
     1ac:	dc 01       	movw	r26, r24
     1ae:	1d 92       	st	X+, r1
     1b0:	2a 95       	dec	r18
     1b2:	e9 f7       	brne	.-6      	; 0x1ae <_ZN9NeoPixels10initCandleEv+0x8>
		m_tmrs[0] = CANDLE_FLICKER_RATE;
     1b4:	df 01       	movw	r26, r30
     1b6:	a4 52       	subi	r26, 0x24	; 36
     1b8:	bf 4f       	sbci	r27, 0xFF	; 255
     1ba:	24 81       	ldd	r18, Z+4	; 0x04
     1bc:	2c 93       	st	X, r18
		sendPixels(m_arry,m_cfg.m_pixels);
     1be:	60 81       	ld	r22, Z
     1c0:	71 81       	ldd	r23, Z+1	; 0x01
     1c2:	e5 c2       	rjmp	.+1482   	; 0x78e <_Z10sendPixelsP13NeoPixelColorj>

000001c4 <_ZN9NeoPixels12CandleEffectEv>:
	}

void NeoPixels::CandleEffect()
	{
     1c4:	6f 92       	push	r6
     1c6:	7f 92       	push	r7
     1c8:	8f 92       	push	r8
     1ca:	9f 92       	push	r9
     1cc:	af 92       	push	r10
     1ce:	bf 92       	push	r11
     1d0:	cf 92       	push	r12
     1d2:	df 92       	push	r13
     1d4:	ef 92       	push	r14
     1d6:	ff 92       	push	r15
     1d8:	0f 93       	push	r16
     1da:	1f 93       	push	r17
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	00 d0       	rcall	.+0      	; 0x1e2 <_ZN9NeoPixels12CandleEffectEv+0x1e>
     1e2:	1f 92       	push	r1
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
     1e8:	6c 01       	movw	r12, r24
		m_tmrs[0]--;
     1ea:	4c 01       	movw	r8, r24
     1ec:	8c ed       	ldi	r24, 0xDC	; 220
     1ee:	88 0e       	add	r8, r24
     1f0:	91 1c       	adc	r9, r1
     1f2:	f4 01       	movw	r30, r8
     1f4:	90 81       	ld	r25, Z
     1f6:	91 50       	subi	r25, 0x01	; 1
     1f8:	90 83       	st	Z, r25
		if(m_tmrs[0] == 0)
     1fa:	91 11       	cpse	r25, r1
     1fc:	57 c0       	rjmp	.+174    	; 0x2ac <_ZN9NeoPixels12CandleEffectEv+0xe8>
			{
			for(size_t i=0;i<m_cfg.m_pixels;i++)
     1fe:	f6 01       	movw	r30, r12
     200:	60 81       	ld	r22, Z
     202:	71 81       	ldd	r23, Z+1	; 0x01
     204:	61 15       	cp	r22, r1
     206:	71 05       	cpc	r23, r1
     208:	09 f4       	brne	.+2      	; 0x20c <_ZN9NeoPixels12CandleEffectEv+0x48>
     20a:	47 c0       	rjmp	.+142    	; 0x29a <_ZN9NeoPixels12CandleEffectEv+0xd6>
     20c:	56 01       	movw	r10, r12
     20e:	9f e0       	ldi	r25, 0x0F	; 15
     210:	a9 0e       	add	r10, r25
     212:	b1 1c       	adc	r11, r1
     214:	36 01       	movw	r6, r12
     216:	e9 e3       	ldi	r30, 0x39	; 57
     218:	6e 0e       	add	r6, r30
     21a:	71 1c       	adc	r7, r1
     21c:	73 01       	movw	r14, r6
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	10 e0       	ldi	r17, 0x00	; 0
     222:	21 c0       	rjmp	.+66     	; 0x266 <_ZN9NeoPixels12CandleEffectEv+0xa2>
					unsigned int scale = random() % CANDLE_RESOLUTION;
					if(scale > (CANDLE_RESOLUTION/2))
						scale = 255;
					else
						{
							scale = scale * 256 / (CANDLE_RESOLUTION/2);
     224:	78 2f       	mov	r23, r24
     226:	66 27       	eor	r22, r22
     228:	72 95       	swap	r23
     22a:	62 95       	swap	r22
     22c:	6f 70       	andi	r22, 0x0F	; 15
     22e:	67 27       	eor	r22, r23
     230:	7f 70       	andi	r23, 0x0F	; 15
     232:	67 27       	eor	r22, r23
							if(scale > 255)
     234:	61 15       	cp	r22, r1
     236:	f1 e0       	ldi	r31, 0x01	; 1
     238:	7f 07       	cpc	r23, r31
     23a:	11 f1       	breq	.+68     	; 0x280 <_ZN9NeoPixels12CandleEffectEv+0xbc>
     23c:	46 2f       	mov	r20, r22
								scale = 255;
						}
					m_arry[i] = m_cfg.m_pattern[0] * (byte)(scale);
     23e:	b5 01       	movw	r22, r10
     240:	ce 01       	movw	r24, r28
     242:	01 96       	adiw	r24, 0x01	; 1
     244:	3d d6       	rcall	.+3194   	; 0xec0 <_ZN13NeoPixelColormlEh>
     246:	be 01       	movw	r22, r28
     248:	6f 5f       	subi	r22, 0xFF	; 255
     24a:	7f 4f       	sbci	r23, 0xFF	; 255
     24c:	c7 01       	movw	r24, r14
     24e:	aa d4       	rcall	.+2388   	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
     250:	0f 5f       	subi	r16, 0xFF	; 255
     252:	1f 4f       	sbci	r17, 0xFF	; 255
void NeoPixels::CandleEffect()
	{
		m_tmrs[0]--;
		if(m_tmrs[0] == 0)
			{
			for(size_t i=0;i<m_cfg.m_pixels;i++)
     254:	f6 01       	movw	r30, r12
     256:	60 81       	ld	r22, Z
     258:	71 81       	ldd	r23, Z+1	; 0x01
     25a:	f3 e0       	ldi	r31, 0x03	; 3
     25c:	ef 0e       	add	r14, r31
     25e:	f1 1c       	adc	r15, r1
     260:	06 17       	cp	r16, r22
     262:	17 07       	cpc	r17, r23
     264:	e8 f4       	brcc	.+58     	; 0x2a0 <_ZN9NeoPixels12CandleEffectEv+0xdc>
     266:	0e 94 af 11 	call	0x235e	; 0x235e <random>
				{
					unsigned int scale = random() % CANDLE_RESOLUTION;
     26a:	dc 01       	movw	r26, r24
     26c:	cb 01       	movw	r24, r22
     26e:	8f 71       	andi	r24, 0x1F	; 31
     270:	99 27       	eor	r25, r25
     272:	aa 27       	eor	r26, r26
     274:	b0 78       	andi	r27, 0x80	; 128
     276:	b7 fd       	sbrc	r27, 7
     278:	05 c0       	rjmp	.+10     	; 0x284 <_ZN9NeoPixels12CandleEffectEv+0xc0>
     27a:	81 31       	cpi	r24, 0x11	; 17
     27c:	91 05       	cpc	r25, r1
					if(scale > (CANDLE_RESOLUTION/2))
     27e:	90 f2       	brcs	.-92     	; 0x224 <_ZN9NeoPixels12CandleEffectEv+0x60>
     280:	4f ef       	ldi	r20, 0xFF	; 255
     282:	dd cf       	rjmp	.-70     	; 0x23e <_ZN9NeoPixels12CandleEffectEv+0x7a>
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	a1 09       	sbc	r26, r1
		m_tmrs[0]--;
		if(m_tmrs[0] == 0)
			{
			for(size_t i=0;i<m_cfg.m_pixels;i++)
				{
					unsigned int scale = random() % CANDLE_RESOLUTION;
     288:	b1 09       	sbc	r27, r1
     28a:	80 6e       	ori	r24, 0xE0	; 224
     28c:	9f 6f       	ori	r25, 0xFF	; 255
     28e:	af 6f       	ori	r26, 0xFF	; 255
     290:	bf 6f       	ori	r27, 0xFF	; 255
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	a1 1d       	adc	r26, r1
     296:	b1 1d       	adc	r27, r1
     298:	f0 cf       	rjmp	.-32     	; 0x27a <_ZN9NeoPixels12CandleEffectEv+0xb6>
     29a:	c6 01       	movw	r24, r12
     29c:	c9 96       	adiw	r24, 0x39	; 57
     29e:	3c 01       	movw	r6, r24
     2a0:	c3 01       	movw	r24, r6
     2a2:	75 d2       	rcall	.+1258   	; 0x78e <_Z10sendPixelsP13NeoPixelColorj>
							if(scale > 255)
								scale = 255;
						}
					m_arry[i] = m_cfg.m_pattern[0] * (byte)(scale);
				}
			sendPixels(m_arry,m_cfg.m_pixels);
     2a4:	f6 01       	movw	r30, r12
     2a6:	84 81       	ldd	r24, Z+4	; 0x04
     2a8:	f4 01       	movw	r30, r8
			m_tmrs[0] = CANDLE_FLICKER_RATE;
     2aa:	80 83       	st	Z, r24
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
			}
	}
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	1f 91       	pop	r17
     2b8:	0f 91       	pop	r16
     2ba:	ff 90       	pop	r15
     2bc:	ef 90       	pop	r14
     2be:	df 90       	pop	r13
     2c0:	cf 90       	pop	r12
     2c2:	bf 90       	pop	r11
     2c4:	af 90       	pop	r10
     2c6:	9f 90       	pop	r9
     2c8:	8f 90       	pop	r8
     2ca:	7f 90       	pop	r7
     2cc:	6f 90       	pop	r6
     2ce:	08 95       	ret

000002d0 <_ZN9NeoConfigC1Ev>:
#include "utilities.h"
#include "NeoPixels.h"
#include "USBStream.h"

////////////////// NeoConfig Class //////////////////////
NeoConfig::NeoConfig()
     2d0:	af 92       	push	r10
     2d2:	bf 92       	push	r11
     2d4:	cf 92       	push	r12
     2d6:	df 92       	push	r13
     2d8:	ef 92       	push	r14
     2da:	ff 92       	push	r15
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	00 d0       	rcall	.+0      	; 0x2e6 <_ZN9NeoConfigC1Ev+0x16>
     2e6:	1f 92       	push	r1
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	7c 01       	movw	r14, r24
     2ee:	5c 01       	movw	r10, r24
     2f0:	8f e0       	ldi	r24, 0x0F	; 15
     2f2:	a8 0e       	add	r10, r24
     2f4:	b1 1c       	adc	r11, r1
     2f6:	85 01       	movw	r16, r10
     2f8:	67 01       	movw	r12, r14
     2fa:	ed e2       	ldi	r30, 0x2D	; 45
     2fc:	ce 0e       	add	r12, r30
     2fe:	d1 1c       	adc	r13, r1
     300:	c8 01       	movw	r24, r16
     302:	1c d4       	rcall	.+2104   	; 0xb3c <_ZN13NeoPixelColorC1Ev>
     304:	0d 5f       	subi	r16, 0xFD	; 253
     306:	1f 4f       	sbci	r17, 0xFF	; 255
     308:	0c 15       	cp	r16, r12
     30a:	1d 05       	cpc	r17, r13
     30c:	c9 f7       	brne	.-14     	; 0x300 <_ZN9NeoConfigC1Ev+0x30>
     30e:	82 e3       	ldi	r24, 0x32	; 50
	{
		m_pixels = PIXELS;
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	f7 01       	movw	r30, r14
     314:	91 83       	std	Z+1, r25	; 0x01
     316:	80 83       	st	Z, r24
     318:	22 e0       	ldi	r18, 0x02	; 2
		m_effect = effectTwinkle;
     31a:	22 87       	std	Z+10, r18	; 0x0a
     31c:	13 86       	std	Z+11, r1	; 0x0b
		m_colormode = colorModeSingle;
     31e:	14 86       	std	Z+12, r1	; 0x0c
		m_strandmode = Strand;
     320:	24 e6       	ldi	r18, 0x64	; 100
		m_off = 100;
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	31 87       	std	Z+9, r19	; 0x09
     326:	20 87       	std	Z+8, r18	; 0x08
     328:	2a e0       	ldi	r18, 0x0A	; 10
		m_attack = 10;
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	33 83       	std	Z+3, r19	; 0x03
     32e:	22 83       	std	Z+2, r18	; 0x02
     330:	15 82       	std	Z+5, r1	; 0x05
		m_sustain = 0;
     332:	14 82       	std	Z+4, r1	; 0x04
     334:	97 83       	std	Z+7, r25	; 0x07
		m_decay = 50;
     336:	86 83       	std	Z+6, r24	; 0x06
     338:	81 e2       	ldi	r24, 0x21	; 33
		m_density = 33;
     33a:	85 87       	std	Z+13, r24	; 0x0d
     33c:	83 e0       	ldi	r24, 0x03	; 3
		m_pattern_size = 3;
     33e:	86 87       	std	Z+14, r24	; 0x0e
     340:	20 e0       	ldi	r18, 0x00	; 0
		m_pattern[0] = NeoPixelColor(255,0,0);
     342:	40 e0       	ldi	r20, 0x00	; 0
     344:	6f ef       	ldi	r22, 0xFF	; 255
     346:	ce 01       	movw	r24, r28
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	05 d4       	rcall	.+2058   	; 0xb56 <_ZN13NeoPixelColorC1Ehhh>
     34c:	be 01       	movw	r22, r28
     34e:	6f 5f       	subi	r22, 0xFF	; 255
     350:	7f 4f       	sbci	r23, 0xFF	; 255
     352:	c5 01       	movw	r24, r10
     354:	27 d4       	rcall	.+2126   	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	4f ef       	ldi	r20, 0xFF	; 255
     35a:	60 e0       	ldi	r22, 0x00	; 0
		m_pattern[1] = NeoPixelColor(0,255,0);
     35c:	ce 01       	movw	r24, r28
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	fa d3       	rcall	.+2036   	; 0xb56 <_ZN13NeoPixelColorC1Ehhh>
     362:	be 01       	movw	r22, r28
     364:	6f 5f       	subi	r22, 0xFF	; 255
     366:	7f 4f       	sbci	r23, 0xFF	; 255
     368:	c7 01       	movw	r24, r14
     36a:	42 96       	adiw	r24, 0x12	; 18
     36c:	1b d4       	rcall	.+2102   	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
     36e:	2f ef       	ldi	r18, 0xFF	; 255
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	ce 01       	movw	r24, r28
     376:	01 96       	adiw	r24, 0x01	; 1
		m_pattern[2] = NeoPixelColor(0,0,255);
     378:	ee d3       	rcall	.+2012   	; 0xb56 <_ZN13NeoPixelColorC1Ehhh>
     37a:	be 01       	movw	r22, r28
     37c:	6f 5f       	subi	r22, 0xFF	; 255
     37e:	7f 4f       	sbci	r23, 0xFF	; 255
     380:	c7 01       	movw	r24, r14
     382:	45 96       	adiw	r24, 0x15	; 21
     384:	0f d4       	rcall	.+2078   	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
	}
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	df 90       	pop	r13
     39a:	cf 90       	pop	r12
     39c:	bf 90       	pop	r11
     39e:	af 90       	pop	r10
     3a0:	08 95       	ret

000003a2 <_ZN9NeoPixels16initTheaterChaseEv>:
#include "utilities.h"
#include "NeoPixels.h"
#include "USBStream.h"

void NeoPixels::initTheaterChase()
	{
     3a2:	fc 01       	movw	r30, r24
		spacing = 100 / m_cfg.m_density;
     3a4:	65 85       	ldd	r22, Z+13	; 0x0d
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	84 e6       	ldi	r24, 0x64	; 100
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0e 94 94 10 	call	0x2128	; 0x2128 <__divmodhi4>
		if (spacing < 2)
     3b0:	62 30       	cpi	r22, 0x02	; 2
     3b2:	71 05       	cpc	r23, r1
     3b4:	64 f0       	brlt	.+24     	; 0x3ce <_ZN9NeoPixels16initTheaterChaseEv+0x2c>
#include "NeoPixels.h"
#include "USBStream.h"

void NeoPixels::initTheaterChase()
	{
		spacing = 100 / m_cfg.m_density;
     3b6:	70 af       	std	Z+56, r23	; 0x38
     3b8:	67 ab       	std	Z+55, r22	; 0x37
		if (spacing < 2)
			spacing = 2;

		q = 0;
     3ba:	14 aa       	std	Z+52, r1	; 0x34
     3bc:	13 aa       	std	Z+51, r1	; 0x33
		step = 0;
     3be:	16 aa       	std	Z+54, r1	; 0x36
     3c0:	15 aa       	std	Z+53, r1	; 0x35
		m_tmrs[0] = m_cfg.m_sustain;
     3c2:	df 01       	movw	r26, r30
     3c4:	a4 52       	subi	r26, 0x24	; 36
     3c6:	bf 4f       	sbci	r27, 0xFF	; 255
     3c8:	84 81       	ldd	r24, Z+4	; 0x04
     3ca:	8c 93       	st	X, r24
     3cc:	08 95       	ret

void NeoPixels::initTheaterChase()
	{
		spacing = 100 / m_cfg.m_density;
		if (spacing < 2)
			spacing = 2;
     3ce:	82 e0       	ldi	r24, 0x02	; 2
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	90 af       	std	Z+56, r25	; 0x38
     3d4:	87 ab       	std	Z+55, r24	; 0x37
     3d6:	f1 cf       	rjmp	.-30     	; 0x3ba <_ZN9NeoPixels16initTheaterChaseEv+0x18>

000003d8 <_ZN9NeoPixels18TheaterChaseEffectEv>:
		m_tmrs[0] = m_cfg.m_sustain;

	}

void NeoPixels::TheaterChaseEffect()
	{
     3d8:	4f 92       	push	r4
     3da:	5f 92       	push	r5
     3dc:	6f 92       	push	r6
     3de:	7f 92       	push	r7
     3e0:	8f 92       	push	r8
     3e2:	9f 92       	push	r9
     3e4:	af 92       	push	r10
     3e6:	bf 92       	push	r11
     3e8:	cf 92       	push	r12
     3ea:	df 92       	push	r13
     3ec:	ef 92       	push	r14
     3ee:	ff 92       	push	r15
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <_ZN9NeoPixels18TheaterChaseEffectEv+0x22>
     3fa:	1f 92       	push	r1
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	8c 01       	movw	r16, r24
		if(m_tmrs[0] > 0)
     402:	5c 01       	movw	r10, r24
     404:	8c ed       	ldi	r24, 0xDC	; 220
     406:	a8 0e       	add	r10, r24
     408:	b1 1c       	adc	r11, r1
     40a:	f5 01       	movw	r30, r10
     40c:	90 81       	ld	r25, Z
     40e:	91 11       	cpse	r25, r1
     410:	bc c0       	rjmp	.+376    	; 0x58a <__stack+0x8b>
			m_tmrs[0] --;
		else
			{
				switch(m_cfg.m_colormode)
     412:	f8 01       	movw	r30, r16
     414:	83 85       	ldd	r24, Z+11	; 0x0b
     416:	82 30       	cpi	r24, 0x02	; 2
     418:	09 f4       	brne	.+2      	; 0x41c <_ZN9NeoPixels18TheaterChaseEffectEv+0x44>
     41a:	66 c0       	rjmp	.+204    	; 0x4e8 <_ZN9NeoPixels18TheaterChaseEffectEv+0x110>
					 *
					 * Each Pixel's intensity is therefore a function of the offset time and the period of attack/decay
					 * 		I = PT * offset * m_pattern[0] / AD
					 *
					 */
					for (size_t i = 0; i < m_cfg.m_pixels; i++)
     41c:	f8 01       	movw	r30, r16
     41e:	60 81       	ld	r22, Z
     420:	71 81       	ldd	r23, Z+1	; 0x01
     422:	61 15       	cp	r22, r1
     424:	71 05       	cpc	r23, r1
     426:	09 f4       	brne	.+2      	; 0x42a <_ZN9NeoPixels18TheaterChaseEffectEv+0x52>
     428:	b3 c0       	rjmp	.+358    	; 0x590 <__stack+0x91>
     42a:	38 01       	movw	r6, r16
     42c:	f9 e3       	ldi	r31, 0x39	; 57
     42e:	6f 0e       	add	r6, r31
     430:	71 1c       	adc	r7, r1
     432:	63 01       	movw	r12, r6
     434:	e1 2c       	mov	r14, r1
     436:	f1 2c       	mov	r15, r1
									else
										{
											byte b = step - q;
											if(b < m_cfg.m_attack)
												{
													b = (255/(b));
     438:	44 24       	eor	r4, r4
     43a:	4a 94       	dec	r4
     43c:	51 2c       	mov	r5, r1
													m_arry[i] = m_cfg.m_pattern[0] * b;
     43e:	48 01       	movw	r8, r16
     440:	8f e0       	ldi	r24, 0x0F	; 15
     442:	88 0e       	add	r8, r24
     444:	91 1c       	adc	r9, r1
     446:	2f c0       	rjmp	.+94     	; 0x4a6 <_ZN9NeoPixels18TheaterChaseEffectEv+0xce>
								m_arry[i] = (m_cfg.m_pattern[0]);//NeoPixelColor(255,0,0);
							else
								{
									if(step < q)
										{
											byte b = q - step;
     448:	68 1b       	sub	r22, r24
											if(b < m_cfg.m_decay)
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	f8 01       	movw	r30, r16
     44e:	86 81       	ldd	r24, Z+6	; 0x06
     450:	97 81       	ldd	r25, Z+7	; 0x07
     452:	68 17       	cp	r22, r24
     454:	79 07       	cpc	r23, r25
     456:	e0 f5       	brcc	.+120    	; 0x4d0 <_ZN9NeoPixels18TheaterChaseEffectEv+0xf8>
									else
										{
											byte b = step - q;
											if(b < m_cfg.m_attack)
												{
													b = (255/(b));
     458:	c2 01       	movw	r24, r4
     45a:	0e 94 94 10 	call	0x2128	; 0x2128 <__divmodhi4>
     45e:	46 2f       	mov	r20, r22
													m_arry[i] = m_cfg.m_pattern[0] * b;
     460:	b4 01       	movw	r22, r8
     462:	ce 01       	movw	r24, r28
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	2c d5       	rcall	.+2648   	; 0xec0 <_ZN13NeoPixelColormlEh>
     468:	be 01       	movw	r22, r28
     46a:	6f 5f       	subi	r22, 0xFF	; 255
     46c:	7f 4f       	sbci	r23, 0xFF	; 255
     46e:	c6 01       	movw	r24, r12
     470:	99 d3       	rcall	.+1842   	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
     472:	f8 01       	movw	r30, r16
     474:	85 a9       	ldd	r24, Z+53	; 0x35
												}
										}

								}

							step++;
     476:	96 a9       	ldd	r25, Z+54	; 0x36
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	96 ab       	std	Z+54, r25	; 0x36
     47c:	85 ab       	std	Z+53, r24	; 0x35
     47e:	27 a9       	ldd	r18, Z+55	; 0x37
     480:	30 ad       	ldd	r19, Z+56	; 0x38
							if (step >= spacing)
     482:	82 17       	cp	r24, r18
     484:	93 07       	cpc	r25, r19
     486:	10 f0       	brcs	.+4      	; 0x48c <_ZN9NeoPixels18TheaterChaseEffectEv+0xb4>
     488:	16 aa       	std	Z+54, r1	; 0x36
     48a:	15 aa       	std	Z+53, r1	; 0x35
								step = 0;
     48c:	ff ef       	ldi	r31, 0xFF	; 255
     48e:	ef 1a       	sub	r14, r31
					 *
					 * Each Pixel's intensity is therefore a function of the offset time and the period of attack/decay
					 * 		I = PT * offset * m_pattern[0] / AD
					 *
					 */
					for (size_t i = 0; i < m_cfg.m_pixels; i++)
     490:	ff 0a       	sbc	r15, r31
     492:	83 e0       	ldi	r24, 0x03	; 3
     494:	c8 0e       	add	r12, r24
     496:	d1 1c       	adc	r13, r1
     498:	f8 01       	movw	r30, r16
     49a:	60 81       	ld	r22, Z
     49c:	71 81       	ldd	r23, Z+1	; 0x01
     49e:	e6 16       	cp	r14, r22
     4a0:	f7 06       	cpc	r15, r23
     4a2:	08 f0       	brcs	.+2      	; 0x4a6 <_ZN9NeoPixels18TheaterChaseEffectEv+0xce>
     4a4:	7a c0       	rjmp	.+244    	; 0x59a <__stack+0x9b>
     4a6:	f8 01       	movw	r30, r16
     4a8:	85 a9       	ldd	r24, Z+53	; 0x35
						{
							if (step == q)
     4aa:	96 a9       	ldd	r25, Z+54	; 0x36
     4ac:	63 a9       	ldd	r22, Z+51	; 0x33
     4ae:	74 a9       	ldd	r23, Z+52	; 0x34
     4b0:	86 17       	cp	r24, r22
     4b2:	97 07       	cpc	r25, r23
     4b4:	09 f4       	brne	.+2      	; 0x4b8 <_ZN9NeoPixels18TheaterChaseEffectEv+0xe0>
     4b6:	65 c0       	rjmp	.+202    	; 0x582 <__stack+0x83>
     4b8:	86 17       	cp	r24, r22
     4ba:	97 07       	cpc	r25, r23
								m_arry[i] = (m_cfg.m_pattern[0]);//NeoPixelColor(255,0,0);
							else
								{
									if(step < q)
     4bc:	28 f2       	brcs	.-118    	; 0x448 <_ZN9NeoPixels18TheaterChaseEffectEv+0x70>
     4be:	86 1b       	sub	r24, r22
     4c0:	68 2f       	mov	r22, r24
													m_arry[i] = NeoPixelColor(0, 0, 0);
												}
										}
									else
										{
											byte b = step - q;
     4c2:	70 e0       	ldi	r23, 0x00	; 0
											if(b < m_cfg.m_attack)
     4c4:	f8 01       	movw	r30, r16
     4c6:	82 81       	ldd	r24, Z+2	; 0x02
     4c8:	93 81       	ldd	r25, Z+3	; 0x03
     4ca:	68 17       	cp	r22, r24
     4cc:	79 07       	cpc	r23, r25
     4ce:	20 f2       	brcs	.-120    	; 0x458 <_ZN9NeoPixels18TheaterChaseEffectEv+0x80>
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	40 e0       	ldi	r20, 0x00	; 0
													b = (255/(b));
													m_arry[i] = m_cfg.m_pattern[0] * b;
												}
											else
												{
													m_arry[i] = NeoPixelColor(0, 0, 0);
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	ce 01       	movw	r24, r28
     4d8:	01 96       	adiw	r24, 0x01	; 1
     4da:	3d d3       	rcall	.+1658   	; 0xb56 <_ZN13NeoPixelColorC1Ehhh>
     4dc:	be 01       	movw	r22, r28
     4de:	6f 5f       	subi	r22, 0xFF	; 255
     4e0:	7f 4f       	sbci	r23, 0xFF	; 255
     4e2:	c6 01       	movw	r24, r12
     4e4:	5f d3       	rcall	.+1726   	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
     4e6:	c5 cf       	rjmp	.-118    	; 0x472 <_ZN9NeoPixels18TheaterChaseEffectEv+0x9a>
     4e8:	60 81       	ld	r22, Z
     4ea:	71 81       	ldd	r23, Z+1	; 0x01
     4ec:	61 15       	cp	r22, r1
     4ee:	71 05       	cpc	r23, r1
		else
			{
				switch(m_cfg.m_colormode)
					{
				case colorModePattern:
					for(size_t i=0;i<m_cfg.m_pixels;i++)
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <_ZN9NeoPixels18TheaterChaseEffectEv+0x11c>
     4f2:	5f c0       	rjmp	.+190    	; 0x5b2 <__stack+0xb3>
     4f4:	38 01       	movw	r6, r16
     4f6:	99 e3       	ldi	r25, 0x39	; 57
     4f8:	69 0e       	add	r6, r25
     4fa:	71 1c       	adc	r7, r1
     4fc:	63 01       	movw	r12, r6
     4fe:	e1 2c       	mov	r14, r1
     500:	f1 2c       	mov	r15, r1
     502:	f8 01       	movw	r30, r16
     504:	83 a9       	ldd	r24, Z+51	; 0x33
     506:	94 a9       	ldd	r25, Z+52	; 0x34
     508:	8e 0d       	add	r24, r14
						{
							m_arry[i] = m_cfg.m_pattern[(i+q) % m_cfg.m_pattern_size];
     50a:	9f 1d       	adc	r25, r15
     50c:	66 85       	ldd	r22, Z+14	; 0x0e
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	0e 94 80 10 	call	0x2100	; 0x2100 <__udivmodhi4>
     514:	bc 01       	movw	r22, r24
     516:	66 0f       	add	r22, r22
     518:	77 1f       	adc	r23, r23
     51a:	68 0f       	add	r22, r24
     51c:	79 1f       	adc	r23, r25
     51e:	61 5f       	subi	r22, 0xF1	; 241
     520:	7f 4f       	sbci	r23, 0xFF	; 255
     522:	60 0f       	add	r22, r16
     524:	71 1f       	adc	r23, r17
     526:	c6 01       	movw	r24, r12
     528:	3d d3       	rcall	.+1658   	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
     52a:	ff ef       	ldi	r31, 0xFF	; 255
     52c:	ef 1a       	sub	r14, r31
     52e:	ff 0a       	sbc	r15, r31
     530:	f8 01       	movw	r30, r16
     532:	60 81       	ld	r22, Z
		else
			{
				switch(m_cfg.m_colormode)
					{
				case colorModePattern:
					for(size_t i=0;i<m_cfg.m_pixels;i++)
     534:	71 81       	ldd	r23, Z+1	; 0x01
     536:	f3 e0       	ldi	r31, 0x03	; 3
     538:	cf 0e       	add	r12, r31
     53a:	d1 1c       	adc	r13, r1
     53c:	e6 16       	cp	r14, r22
     53e:	f7 06       	cpc	r15, r23
     540:	00 f3       	brcs	.-64     	; 0x502 <__stack+0x3>
     542:	f8 01       	movw	r30, r16
     544:	83 a9       	ldd	r24, Z+51	; 0x33
     546:	94 a9       	ldd	r25, Z+52	; 0x34
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	94 ab       	std	Z+52, r25	; 0x34
						{
							m_arry[i] = m_cfg.m_pattern[(i+q) % m_cfg.m_pattern_size];
						}
					q++;
     54c:	83 ab       	std	Z+51, r24	; 0x33
     54e:	c3 01       	movw	r24, r6
     550:	1e d1       	rcall	.+572    	; 0x78e <_Z10sendPixelsP13NeoPixelColorj>
     552:	f8 01       	movw	r30, r16
     554:	84 81       	ldd	r24, Z+4	; 0x04
     556:	f5 01       	movw	r30, r10
					q++;
					if (q >= spacing)
						q = 0;
					}

				sendPixels(m_arry,m_cfg.m_pixels);
     558:	80 83       	st	Z, r24
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
				m_tmrs[0] = m_cfg.m_sustain;
     55e:	0f 90       	pop	r0
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
			}

	}
     566:	0f 91       	pop	r16
     568:	ff 90       	pop	r15
     56a:	ef 90       	pop	r14
     56c:	df 90       	pop	r13
     56e:	cf 90       	pop	r12
     570:	bf 90       	pop	r11
     572:	af 90       	pop	r10
     574:	9f 90       	pop	r9
     576:	8f 90       	pop	r8
     578:	7f 90       	pop	r7
     57a:	6f 90       	pop	r6
     57c:	5f 90       	pop	r5
     57e:	4f 90       	pop	r4
     580:	08 95       	ret
     582:	b4 01       	movw	r22, r8
     584:	c6 01       	movw	r24, r12
     586:	0e d3       	rcall	.+1564   	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
     588:	74 cf       	rjmp	.-280    	; 0x472 <_ZN9NeoPixels18TheaterChaseEffectEv+0x9a>
     58a:	91 50       	subi	r25, 0x01	; 1
     58c:	90 83       	st	Z, r25
					 *
					 */
					for (size_t i = 0; i < m_cfg.m_pixels; i++)
						{
							if (step == q)
								m_arry[i] = (m_cfg.m_pattern[0]);//NeoPixelColor(255,0,0);
     58e:	e5 cf       	rjmp	.-54     	; 0x55a <__stack+0x5b>
     590:	27 a9       	ldd	r18, Z+55	; 0x37
     592:	30 ad       	ldd	r19, Z+56	; 0x38
     594:	c8 01       	movw	r24, r16
     596:	c9 96       	adiw	r24, 0x39	; 57
	}

void NeoPixels::TheaterChaseEffect()
	{
		if(m_tmrs[0] > 0)
			m_tmrs[0] --;
     598:	3c 01       	movw	r6, r24
     59a:	f8 01       	movw	r30, r16
     59c:	83 a9       	ldd	r24, Z+51	; 0x33
     59e:	94 a9       	ldd	r25, Z+52	; 0x34
     5a0:	01 96       	adiw	r24, 0x01	; 1
     5a2:	94 ab       	std	Z+52, r25	; 0x34
     5a4:	83 ab       	std	Z+51, r24	; 0x33
     5a6:	82 17       	cp	r24, r18
							step++;
							if (step >= spacing)
								step = 0;
						}

					q++;
     5a8:	93 07       	cpc	r25, r19
     5aa:	88 f2       	brcs	.-94     	; 0x54e <__stack+0x4f>
     5ac:	14 aa       	std	Z+52, r1	; 0x34
     5ae:	13 aa       	std	Z+51, r1	; 0x33
     5b0:	ce cf       	rjmp	.-100    	; 0x54e <__stack+0x4f>
     5b2:	c8 01       	movw	r24, r16
					if (q >= spacing)
     5b4:	c9 96       	adiw	r24, 0x39	; 57
     5b6:	3c 01       	movw	r6, r24
     5b8:	c4 cf       	rjmp	.-120    	; 0x542 <__stack+0x43>

000005ba <_Z12RandomOffsetj>:

#define NS_TO_CYCLES(n) ( (n) / NS_PER_CYCLE )

#define RANDOMNESS 50
byte RandomOffset(uint16_t v)
	{
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	ec 01       	movw	r28, r24
     5c0:	8e 3c       	cpi	r24, 0xCE	; 206
     5c2:	91 05       	cpc	r25, r1
     5c4:	10 f0       	brcs	.+4      	; 0x5ca <_Z12RandomOffsetj+0x10>
     5c6:	cd ec       	ldi	r28, 0xCD	; 205
     5c8:	d0 e0       	ldi	r29, 0x00	; 0
		if(v > (255 - RANDOMNESS))
			v = 255 - RANDOMNESS;

		uint16_t x = random() % (2 * RANDOMNESS);
     5ca:	0e 94 af 11 	call	0x235e	; 0x235e <random>
     5ce:	24 e6       	ldi	r18, 0x64	; 100
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	50 e0       	ldi	r21, 0x00	; 0
     5d6:	0e 94 c9 10 	call	0x2192	; 0x2192 <__divmodsi4>
		if(x > RANDOMNESS)
     5da:	63 33       	cpi	r22, 0x33	; 51
     5dc:	71 05       	cpc	r23, r1
     5de:	30 f4       	brcc	.+12     	; 0x5ec <_Z12RandomOffsetj+0x32>
			v -= x - RANDOMNESS;
		else
			v += x;
     5e0:	ce 01       	movw	r24, r28
     5e2:	86 0f       	add	r24, r22
     5e4:	97 1f       	adc	r25, r23
		return (byte)v;
	}
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	08 95       	ret
     5ec:	e2 96       	adiw	r28, 0x32	; 50
		if(v > (255 - RANDOMNESS))
			v = 255 - RANDOMNESS;

		uint16_t x = random() % (2 * RANDOMNESS);
		if(x > RANDOMNESS)
			v -= x - RANDOMNESS;
     5ee:	ce 01       	movw	r24, r28
     5f0:	86 1b       	sub	r24, r22
     5f2:	97 0b       	sbc	r25, r23
		else
			v += x;
		return (byte)v;
	}
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <_Z9sendPixelhhh>:

	}

//static __inline__
void sendPixel(unsigned char r, unsigned char g, unsigned char b)
	{
     5fa:	98 e0       	ldi	r25, 0x08	; 8
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	0b c0       	rjmp	.+22     	; 0x616 <_Z9sendPixelhhh+0x1c>
     600:	28 9a       	sbi	0x05, 0	; 5
     602:	22 e0       	ldi	r18, 0x02	; 2
     604:	2a 95       	dec	r18
     606:	f1 f7       	brne	.-4      	; 0x604 <_Z9sendPixelhhh+0xa>
     608:	28 98       	cbi	0x05, 0	; 5
     60a:	24 e0       	ldi	r18, 0x04	; 4
     60c:	2a 95       	dec	r18
     60e:	f1 f7       	brne	.-4      	; 0x60c <_Z9sendPixelhhh+0x12>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     610:	66 0f       	add	r22, r22
     612:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     614:	71 f0       	breq	.+28     	; 0x632 <_Z9sendPixelhhh+0x38>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     616:	23 2f       	mov	r18, r19
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     618:	67 ff       	sbrs	r22, 7
     61a:	f2 cf       	rjmp	.-28     	; 0x600 <_Z9sendPixelhhh+0x6>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     61c:	28 9a       	sbi	0x05, 0	; 5
     61e:	24 e0       	ldi	r18, 0x04	; 4
     620:	2a 95       	dec	r18
     622:	f1 f7       	brne	.-4      	; 0x620 <_Z9sendPixelhhh+0x26>
     624:	28 98       	cbi	0x05, 0	; 5
     626:	23 e0       	ldi	r18, 0x03	; 3
     628:	2a 95       	dec	r18
     62a:	f1 f7       	brne	.-4      	; 0x628 <_Z9sendPixelhhh+0x2e>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     62c:	66 0f       	add	r22, r22
     62e:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     630:	91 f7       	brne	.-28     	; 0x616 <_Z9sendPixelhhh+0x1c>
//static __inline__
void sendPixel(unsigned char r, unsigned char g, unsigned char b)
	{

		sendByte(g);      // Neopixel wants colors in green then red then blue order
		if (tbi(UCSR1A,RXC1))
     632:	90 91 c8 00 	lds	r25, 0x00C8
     636:	97 fd       	sbrc	r25, 7
     638:	3c c0       	rjmp	.+120    	; 0x6b2 <_Z9sendPixelhhh+0xb8>
     63a:	98 e0       	ldi	r25, 0x08	; 8
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	0b c0       	rjmp	.+22     	; 0x656 <_Z9sendPixelhhh+0x5c>
     640:	28 9a       	sbi	0x05, 0	; 5
     642:	22 e0       	ldi	r18, 0x02	; 2
     644:	2a 95       	dec	r18
     646:	f1 f7       	brne	.-4      	; 0x644 <_Z9sendPixelhhh+0x4a>
     648:	28 98       	cbi	0x05, 0	; 5
     64a:	24 e0       	ldi	r18, 0x04	; 4
     64c:	2a 95       	dec	r18
     64e:	f1 f7       	brne	.-4      	; 0x64c <_Z9sendPixelhhh+0x52>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     650:	88 0f       	add	r24, r24
     652:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     654:	71 f0       	breq	.+28     	; 0x672 <_Z9sendPixelhhh+0x78>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     656:	23 2f       	mov	r18, r19
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     658:	87 ff       	sbrs	r24, 7
     65a:	f2 cf       	rjmp	.-28     	; 0x640 <_Z9sendPixelhhh+0x46>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     65c:	28 9a       	sbi	0x05, 0	; 5
     65e:	24 e0       	ldi	r18, 0x04	; 4
     660:	2a 95       	dec	r18
     662:	f1 f7       	brne	.-4      	; 0x660 <_Z9sendPixelhhh+0x66>
     664:	28 98       	cbi	0x05, 0	; 5
     666:	23 e0       	ldi	r18, 0x03	; 3
     668:	2a 95       	dec	r18
     66a:	f1 f7       	brne	.-4      	; 0x668 <_Z9sendPixelhhh+0x6e>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     66c:	88 0f       	add	r24, r24
     66e:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     670:	91 f7       	brne	.-28     	; 0x656 <_Z9sendPixelhhh+0x5c>

		sendByte(g);      // Neopixel wants colors in green then red then blue order
		if (tbi(UCSR1A,RXC1))
			return;
		sendByte(r);
		if (tbi(UCSR1A,RXC1))
     672:	80 91 c8 00 	lds	r24, 0x00C8
     676:	87 fd       	sbrc	r24, 7
     678:	1c c0       	rjmp	.+56     	; 0x6b2 <_Z9sendPixelhhh+0xb8>
     67a:	88 e0       	ldi	r24, 0x08	; 8
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	0b c0       	rjmp	.+22     	; 0x696 <_Z9sendPixelhhh+0x9c>
     680:	28 9a       	sbi	0x05, 0	; 5
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	9a 95       	dec	r25
     686:	f1 f7       	brne	.-4      	; 0x684 <_Z9sendPixelhhh+0x8a>
     688:	28 98       	cbi	0x05, 0	; 5
     68a:	94 e0       	ldi	r25, 0x04	; 4
     68c:	9a 95       	dec	r25
     68e:	f1 f7       	brne	.-4      	; 0x68c <_Z9sendPixelhhh+0x92>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     690:	44 0f       	add	r20, r20
     692:	81 50       	subi	r24, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     694:	71 f0       	breq	.+28     	; 0x6b2 <_Z9sendPixelhhh+0xb8>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     696:	92 2f       	mov	r25, r18
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     698:	47 ff       	sbrs	r20, 7
     69a:	f2 cf       	rjmp	.-28     	; 0x680 <_Z9sendPixelhhh+0x86>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     69c:	28 9a       	sbi	0x05, 0	; 5
     69e:	94 e0       	ldi	r25, 0x04	; 4
     6a0:	9a 95       	dec	r25
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <_Z9sendPixelhhh+0xa6>
     6a4:	28 98       	cbi	0x05, 0	; 5
     6a6:	93 e0       	ldi	r25, 0x03	; 3
     6a8:	9a 95       	dec	r25
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <_Z9sendPixelhhh+0xae>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     6ac:	44 0f       	add	r20, r20
     6ae:	81 50       	subi	r24, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     6b0:	91 f7       	brne	.-28     	; 0x696 <_Z9sendPixelhhh+0x9c>
     6b2:	08 95       	ret

000006b4 <_Z9sendPixelR13NeoPixelColor>:

	}

//static __inline__
void sendPixel(NeoPixelColor &c)
	{
     6b4:	fc 01       	movw	r30, r24
			}
	}

byte NeoPixelColor::getGreen()
	{
		switch(m_color_order)
     6b6:	80 91 12 01 	lds	r24, 0x0112
     6ba:	81 30       	cpi	r24, 0x01	; 1
     6bc:	09 f0       	breq	.+2      	; 0x6c0 <_Z9sendPixelR13NeoPixelColor+0xc>
     6be:	63 c0       	rjmp	.+198    	; 0x786 <_Z9sendPixelR13NeoPixelColor+0xd2>
			{
		case GRB:
			return colors[0];
     6c0:	20 81       	ld	r18, Z

	}

//static __inline__
void sendPixel(NeoPixelColor &c)
	{
     6c2:	98 e0       	ldi	r25, 0x08	; 8
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     6c4:	40 e0       	ldi	r20, 0x00	; 0
     6c6:	0b c0       	rjmp	.+22     	; 0x6de <_Z9sendPixelR13NeoPixelColor+0x2a>
     6c8:	28 9a       	sbi	0x05, 0	; 5
     6ca:	32 e0       	ldi	r19, 0x02	; 2
     6cc:	3a 95       	dec	r19
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <_Z9sendPixelR13NeoPixelColor+0x18>
     6d0:	28 98       	cbi	0x05, 0	; 5
     6d2:	34 e0       	ldi	r19, 0x04	; 4
     6d4:	3a 95       	dec	r19
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <_Z9sendPixelR13NeoPixelColor+0x20>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     6d8:	22 0f       	add	r18, r18
     6da:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     6dc:	71 f0       	breq	.+28     	; 0x6fa <_Z9sendPixelR13NeoPixelColor+0x46>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     6de:	34 2f       	mov	r19, r20
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     6e0:	27 ff       	sbrs	r18, 7
     6e2:	f2 cf       	rjmp	.-28     	; 0x6c8 <_Z9sendPixelR13NeoPixelColor+0x14>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     6e4:	28 9a       	sbi	0x05, 0	; 5
     6e6:	34 e0       	ldi	r19, 0x04	; 4
     6e8:	3a 95       	dec	r19
     6ea:	f1 f7       	brne	.-4      	; 0x6e8 <_Z9sendPixelR13NeoPixelColor+0x34>
     6ec:	28 98       	cbi	0x05, 0	; 5
     6ee:	33 e0       	ldi	r19, 0x03	; 3
     6f0:	3a 95       	dec	r19
     6f2:	f1 f7       	brne	.-4      	; 0x6f0 <_Z9sendPixelR13NeoPixelColor+0x3c>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     6f4:	22 0f       	add	r18, r18
     6f6:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     6f8:	91 f7       	brne	.-28     	; 0x6de <_Z9sendPixelR13NeoPixelColor+0x2a>
//static __inline__
void sendPixel(NeoPixelColor &c)
	{

		sendByte(c.getGreen()); // Neopixel wants colors in green then red then blue order
		if (tbi(UCSR1A,RXC1))
     6fa:	90 91 c8 00 	lds	r25, 0x00C8
     6fe:	97 fd       	sbrc	r25, 7
     700:	41 c0       	rjmp	.+130    	; 0x784 <_Z9sendPixelR13NeoPixelColor+0xd0>

NeoColorOrder NeoPixelColor::m_color_order = RGB;

byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
     702:	81 30       	cpi	r24, 0x01	; 1
     704:	09 f4       	brne	.+2      	; 0x708 <_Z9sendPixelR13NeoPixelColor+0x54>
     706:	41 c0       	rjmp	.+130    	; 0x78a <_Z9sendPixelR13NeoPixelColor+0xd6>
		case GRB:
			return colors[1];
			break;
		case RGB:
		default:
			return colors[0];
     708:	20 81       	ld	r18, Z

	}

//static __inline__
void sendPixel(NeoPixelColor &c)
	{
     70a:	98 e0       	ldi	r25, 0x08	; 8
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	0b c0       	rjmp	.+22     	; 0x726 <_Z9sendPixelR13NeoPixelColor+0x72>
     710:	28 9a       	sbi	0x05, 0	; 5
     712:	32 e0       	ldi	r19, 0x02	; 2
     714:	3a 95       	dec	r19
     716:	f1 f7       	brne	.-4      	; 0x714 <_Z9sendPixelR13NeoPixelColor+0x60>
     718:	28 98       	cbi	0x05, 0	; 5
     71a:	34 e0       	ldi	r19, 0x04	; 4
     71c:	3a 95       	dec	r19
     71e:	f1 f7       	brne	.-4      	; 0x71c <_Z9sendPixelR13NeoPixelColor+0x68>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     720:	22 0f       	add	r18, r18
     722:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     724:	71 f0       	breq	.+28     	; 0x742 <_Z9sendPixelR13NeoPixelColor+0x8e>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     726:	34 2f       	mov	r19, r20
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     728:	27 ff       	sbrs	r18, 7
     72a:	f2 cf       	rjmp	.-28     	; 0x710 <_Z9sendPixelR13NeoPixelColor+0x5c>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     72c:	28 9a       	sbi	0x05, 0	; 5
     72e:	34 e0       	ldi	r19, 0x04	; 4
     730:	3a 95       	dec	r19
     732:	f1 f7       	brne	.-4      	; 0x730 <_Z9sendPixelR13NeoPixelColor+0x7c>
     734:	28 98       	cbi	0x05, 0	; 5
     736:	33 e0       	ldi	r19, 0x03	; 3
     738:	3a 95       	dec	r19
     73a:	f1 f7       	brne	.-4      	; 0x738 <_Z9sendPixelR13NeoPixelColor+0x84>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     73c:	22 0f       	add	r18, r18
     73e:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     740:	91 f7       	brne	.-28     	; 0x726 <_Z9sendPixelR13NeoPixelColor+0x72>

		sendByte(c.getGreen()); // Neopixel wants colors in green then red then blue order
		if (tbi(UCSR1A,RXC1))
			return;
		sendByte(c.getRed());
		if (tbi(UCSR1A,RXC1))
     742:	80 91 c8 00 	lds	r24, 0x00C8
     746:	87 fd       	sbrc	r24, 7
     748:	1d c0       	rjmp	.+58     	; 0x784 <_Z9sendPixelR13NeoPixelColor+0xd0>
	}


byte NeoPixelColor::getBlue()
	{
		return colors[2];
     74a:	92 81       	ldd	r25, Z+2	; 0x02
     74c:	88 e0       	ldi	r24, 0x08	; 8
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	0b c0       	rjmp	.+22     	; 0x768 <_Z9sendPixelR13NeoPixelColor+0xb4>
     752:	28 9a       	sbi	0x05, 0	; 5
     754:	22 e0       	ldi	r18, 0x02	; 2
     756:	2a 95       	dec	r18
     758:	f1 f7       	brne	.-4      	; 0x756 <_Z9sendPixelR13NeoPixelColor+0xa2>
     75a:	28 98       	cbi	0x05, 0	; 5
     75c:	24 e0       	ldi	r18, 0x04	; 4
     75e:	2a 95       	dec	r18
     760:	f1 f7       	brne	.-4      	; 0x75e <_Z9sendPixelR13NeoPixelColor+0xaa>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     762:	99 0f       	add	r25, r25
     764:	81 50       	subi	r24, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     766:	71 f0       	breq	.+28     	; 0x784 <_Z9sendPixelR13NeoPixelColor+0xd0>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     768:	23 2f       	mov	r18, r19
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     76a:	97 ff       	sbrs	r25, 7
     76c:	f2 cf       	rjmp	.-28     	; 0x752 <_Z9sendPixelR13NeoPixelColor+0x9e>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     76e:	28 9a       	sbi	0x05, 0	; 5
     770:	24 e0       	ldi	r18, 0x04	; 4
     772:	2a 95       	dec	r18
     774:	f1 f7       	brne	.-4      	; 0x772 <_Z9sendPixelR13NeoPixelColor+0xbe>
     776:	28 98       	cbi	0x05, 0	; 5
     778:	23 e0       	ldi	r18, 0x03	; 3
     77a:	2a 95       	dec	r18
     77c:	f1 f7       	brne	.-4      	; 0x77a <_Z9sendPixelR13NeoPixelColor+0xc6>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     77e:	99 0f       	add	r25, r25
     780:	81 50       	subi	r24, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     782:	91 f7       	brne	.-28     	; 0x768 <_Z9sendPixelR13NeoPixelColor+0xb4>
     784:	08 95       	ret
		case GRB:
			return colors[0];
			break;
		case RGB:
		default:
			return colors[1];
     786:	21 81       	ldd	r18, Z+1	; 0x01
     788:	9c cf       	rjmp	.-200    	; 0x6c2 <_Z9sendPixelR13NeoPixelColor+0xe>
byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
			{
		case GRB:
			return colors[1];
     78a:	21 81       	ldd	r18, Z+1	; 0x01
     78c:	be cf       	rjmp	.-132    	; 0x70a <_Z9sendPixelR13NeoPixelColor+0x56>

0000078e <_Z10sendPixelsP13NeoPixelColorj>:
		sendByte(c.getBlue());

	}

void sendPixels(NeoPixelColor *px,size_t len)
	{
     78e:	ff 92       	push	r15
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
    unsigned char sreg;

public:
    InterruptBlocker()
	{
	sreg = SREG;
     798:	ff b6       	in	r15, 0x3f	; 63
	cli();
     79a:	f8 94       	cli
		InterruptBlocker ib;
		for(size_t i = 0;i<len;i++)
     79c:	61 15       	cp	r22, r1
     79e:	71 05       	cpc	r23, r1
     7a0:	a1 f0       	breq	.+40     	; 0x7ca <_Z10sendPixelsP13NeoPixelColorj+0x3c>
     7a2:	ec 01       	movw	r28, r24
     7a4:	8b 01       	movw	r16, r22
     7a6:	00 0f       	add	r16, r16
     7a8:	11 1f       	adc	r17, r17
     7aa:	60 0f       	add	r22, r16
     7ac:	71 1f       	adc	r23, r17
     7ae:	8e 01       	movw	r16, r28
     7b0:	06 0f       	add	r16, r22
     7b2:	17 1f       	adc	r17, r23
     7b4:	04 c0       	rjmp	.+8      	; 0x7be <_Z10sendPixelsP13NeoPixelColorj+0x30>
     7b6:	23 96       	adiw	r28, 0x03	; 3
     7b8:	c0 17       	cp	r28, r16
     7ba:	d1 07       	cpc	r29, r17
     7bc:	31 f0       	breq	.+12     	; 0x7ca <_Z10sendPixelsP13NeoPixelColorj+0x3c>
			{
				sendPixel(px[i]);
     7be:	ce 01       	movw	r24, r28
     7c0:	79 df       	rcall	.-270    	; 0x6b4 <_Z9sendPixelR13NeoPixelColor>
     7c2:	80 91 c8 00 	lds	r24, 0x00C8
				if (tbi(UCSR1A,RXC1))
     7c6:	87 ff       	sbrs	r24, 7
     7c8:	f6 cf       	rjmp	.-20     	; 0x7b6 <_Z10sendPixelsP13NeoPixelColorj+0x28>
     7ca:	ff be       	out	0x3f, r15	; 63
     7cc:	df 91       	pop	r29
					return;
			}
	}
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	ff 90       	pop	r15
     7d6:	08 95       	ret

000007d8 <_Z5Wheelh>:

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
NeoPixelColor Wheel(byte WheelPos)
{
  WheelPos = 255 - WheelPos;
     7d8:	60 95       	com	r22
  if (WheelPos < 85)
     7da:	65 35       	cpi	r22, 0x55	; 85
     7dc:	90 f4       	brcc	.+36     	; 0x802 <_Z5Wheelh+0x2a>
  {
    return NeoPixelColor(255 - WheelPos * 3, 0, WheelPos * 3);
     7de:	26 2f       	mov	r18, r22
     7e0:	22 0f       	add	r18, r18
     7e2:	26 0f       	add	r18, r22
     7e4:	36 2f       	mov	r19, r22
     7e6:	33 0f       	add	r19, r19
     7e8:	33 0f       	add	r19, r19
     7ea:	63 1b       	sub	r22, r19
     7ec:	61 50       	subi	r22, 0x01	; 1



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     7ee:	30 91 12 01 	lds	r19, 0x0112
			{
		case GRB:
			colors[1] = v;
     7f2:	fc 01       	movw	r30, r24



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     7f4:	31 30       	cpi	r19, 0x01	; 1
     7f6:	89 f1       	breq	.+98     	; 0x85a <_Z5Wheelh+0x82>
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     7f8:	60 83       	st	Z, r22
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     7fa:	11 82       	std	Z+1, r1	; 0x01
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     7fc:	fc 01       	movw	r30, r24
     7fe:	22 83       	std	Z+2, r18	; 0x02
     800:	08 95       	ret
  WheelPos = 255 - WheelPos;
  if (WheelPos < 85)
  {
    return NeoPixelColor(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  else if (WheelPos < 170)
     802:	6a 3a       	cpi	r22, 0xAA	; 170
     804:	a8 f4       	brcc	.+42     	; 0x830 <_Z5Wheelh+0x58>
  {
    WheelPos -= 85;
     806:	65 55       	subi	r22, 0x55	; 85
    return NeoPixelColor(0, WheelPos * 3, 255 - WheelPos * 3);
     808:	26 2f       	mov	r18, r22
     80a:	22 0f       	add	r18, r18
     80c:	22 0f       	add	r18, r18
     80e:	f6 2f       	mov	r31, r22
     810:	f2 1b       	sub	r31, r18
     812:	2f 2f       	mov	r18, r31
     814:	21 50       	subi	r18, 0x01	; 1
     816:	36 2f       	mov	r19, r22
     818:	33 0f       	add	r19, r19
     81a:	63 0f       	add	r22, r19



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     81c:	30 91 12 01 	lds	r19, 0x0112
			{
		case GRB:
			colors[1] = v;
     820:	fc 01       	movw	r30, r24



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     822:	31 30       	cpi	r19, 0x01	; 1
     824:	f9 f4       	brne	.+62     	; 0x864 <_Z5Wheelh+0x8c>
			{
		case GRB:
			colors[1] = v;
     826:	11 82       	std	Z+1, r1	; 0x01
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     828:	60 83       	st	Z, r22
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     82a:	fc 01       	movw	r30, r24
     82c:	22 83       	std	Z+2, r18	; 0x02
     82e:	08 95       	ret
    WheelPos -= 85;
    return NeoPixelColor(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  else
  {
    WheelPos -= 170;
     830:	6a 5a       	subi	r22, 0xAA	; 170
    return NeoPixelColor(WheelPos * 3, 255 - WheelPos * 3, 0);
     832:	26 2f       	mov	r18, r22
     834:	22 0f       	add	r18, r18
     836:	22 0f       	add	r18, r18
     838:	f6 2f       	mov	r31, r22
     83a:	f2 1b       	sub	r31, r18
     83c:	2f 2f       	mov	r18, r31
     83e:	21 50       	subi	r18, 0x01	; 1
     840:	36 2f       	mov	r19, r22
     842:	33 0f       	add	r19, r19
     844:	63 0f       	add	r22, r19



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     846:	30 91 12 01 	lds	r19, 0x0112
			{
		case GRB:
			colors[1] = v;
     84a:	fc 01       	movw	r30, r24



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     84c:	31 30       	cpi	r19, 0x01	; 1
     84e:	79 f0       	breq	.+30     	; 0x86e <_Z5Wheelh+0x96>
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     850:	60 83       	st	Z, r22
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     852:	21 83       	std	Z+1, r18	; 0x01
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     854:	fc 01       	movw	r30, r24
     856:	12 82       	std	Z+2, r1	; 0x02
  else
  {
    WheelPos -= 170;
    return NeoPixelColor(WheelPos * 3, 255 - WheelPos * 3, 0);
  }
}
     858:	08 95       	ret
void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[1] = v;
     85a:	61 83       	std	Z+1, r22	; 0x01
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     85c:	10 82       	st	Z, r1
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     85e:	fc 01       	movw	r30, r24
     860:	22 83       	std	Z+2, r18	; 0x02
     862:	08 95       	ret
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     864:	10 82       	st	Z, r1
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     866:	61 83       	std	Z+1, r22	; 0x01
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     868:	fc 01       	movw	r30, r24
     86a:	22 83       	std	Z+2, r18	; 0x02
     86c:	08 95       	ret
void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[1] = v;
     86e:	61 83       	std	Z+1, r22	; 0x01
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     870:	20 83       	st	Z, r18
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     872:	fc 01       	movw	r30, r24
     874:	12 82       	std	Z+2, r1	; 0x02
  else
  {
    WheelPos -= 170;
    return NeoPixelColor(WheelPos * 3, 255 - WheelPos * 3, 0);
  }
}
     876:	08 95       	ret

00000878 <_ZN9NeoPixelsC1Ej>:
			}

	}

////////////////// NeoPixels Class ////////////////////////
NeoPixels::NeoPixels(size_t pixels)
     878:	ef 92       	push	r14
     87a:	ff 92       	push	r15
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	8c 01       	movw	r16, r24
     886:	24 dd       	rcall	.-1464   	; 0x2d0 <_ZN9NeoConfigC1Ev>
     888:	78 01       	movw	r14, r16
     88a:	89 e3       	ldi	r24, 0x39	; 57
     88c:	e8 0e       	add	r14, r24
     88e:	f1 1c       	adc	r15, r1
     890:	90 91 12 01 	lds	r25, 0x0112



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     894:	e8 01       	movw	r28, r16
     896:	eb 96       	adiw	r28, 0x3b	; 59
     898:	d8 01       	movw	r26, r16
     89a:	da 96       	adiw	r26, 0x3a	; 58
     89c:	98 01       	movw	r18, r16
     89e:	21 53       	subi	r18, 0x31	; 49
     8a0:	3f 4f       	sbci	r19, 0xFF	; 255
     8a2:	f7 01       	movw	r30, r14
			}

	}

////////////////// NeoPixels Class ////////////////////////
NeoPixels::NeoPixels(size_t pixels)
     8a4:	09 c0       	rjmp	.+18     	; 0x8b8 <_ZN9NeoPixelsC1Ej+0x40>
     8a6:	1c 92       	st	X, r1
void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[1] = v;
     8a8:	10 82       	st	Z, r1
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     8aa:	18 82       	st	Y, r1
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     8ac:	33 96       	adiw	r30, 0x03	; 3
			}

	}

////////////////// NeoPixels Class ////////////////////////
NeoPixels::NeoPixels(size_t pixels)
     8ae:	23 96       	adiw	r28, 0x03	; 3
     8b0:	13 96       	adiw	r26, 0x03	; 3
     8b2:	e2 17       	cp	r30, r18
     8b4:	f3 07       	cpc	r31, r19
     8b6:	59 f0       	breq	.+22     	; 0x8ce <_ZN9NeoPixelsC1Ej+0x56>
     8b8:	91 30       	cpi	r25, 0x01	; 1



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     8ba:	a9 f3       	breq	.-22     	; 0x8a6 <_ZN9NeoPixelsC1Ej+0x2e>
     8bc:	10 82       	st	Z, r1
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     8be:	1c 92       	st	X, r1
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     8c0:	18 82       	st	Y, r1
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     8c2:	33 96       	adiw	r30, 0x03	; 3
			}

	}

////////////////// NeoPixels Class ////////////////////////
NeoPixels::NeoPixels(size_t pixels)
     8c4:	23 96       	adiw	r28, 0x03	; 3
     8c6:	13 96       	adiw	r26, 0x03	; 3
     8c8:	e2 17       	cp	r30, r18
     8ca:	f3 07       	cpc	r31, r19
     8cc:	a9 f7       	brne	.-22     	; 0x8b8 <_ZN9NeoPixelsC1Ej+0x40>
     8ce:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <_Z6millisv>
	{
		m_timer = millis();
     8d2:	f8 01       	movw	r30, r16
     8d4:	65 a7       	std	Z+45, r22	; 0x2d
     8d6:	76 a7       	std	Z+46, r23	; 0x2e
     8d8:	87 a7       	std	Z+47, r24	; 0x2f
     8da:	90 ab       	std	Z+48, r25	; 0x30
     8dc:	14 aa       	std	Z+52, r1	; 0x34
		q = 0;
     8de:	13 aa       	std	Z+51, r1	; 0x33
     8e0:	12 aa       	std	Z+50, r1	; 0x32
		j = 0;
     8e2:	11 aa       	std	Z+49, r1	; 0x31
     8e4:	82 e0       	ldi	r24, 0x02	; 2
		step = 2;
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	96 ab       	std	Z+54, r25	; 0x36
     8ea:	85 ab       	std	Z+53, r24	; 0x35
     8ec:	90 af       	std	Z+56, r25	; 0x38
		spacing = 2;
     8ee:	87 ab       	std	Z+55, r24	; 0x37
     8f0:	86 e9       	ldi	r24, 0x96	; 150
		memset(m_arry,0,sizeof(m_arry));
     8f2:	f7 01       	movw	r30, r14
     8f4:	11 92       	st	Z+, r1
     8f6:	8a 95       	dec	r24
     8f8:	e9 f7       	brne	.-6      	; 0x8f4 <_ZN9NeoPixelsC1Ej+0x7c>
     8fa:	df 91       	pop	r29
	}
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	08 95       	ret

00000908 <_ZN9NeoPixels16StartRandomPixelEj>:
			break;
			}
	}

void NeoPixels::StartRandomPixel(size_t pixels)
	{
     908:	8f 92       	push	r8
     90a:	9f 92       	push	r9
     90c:	af 92       	push	r10
     90e:	bf 92       	push	r11
     910:	cf 92       	push	r12
     912:	df 92       	push	r13
     914:	ef 92       	push	r14
     916:	ff 92       	push	r15
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
		size_t op = 0;
		for(size_t i = 0;i < m_cfg.m_pixels; i++)
     920:	fc 01       	movw	r30, r24
     922:	c0 81       	ld	r28, Z
     924:	d1 81       	ldd	r29, Z+1	; 0x01
     926:	20 97       	sbiw	r28, 0x00	; 0
     928:	09 f4       	brne	.+2      	; 0x92c <_ZN9NeoPixels16StartRandomPixelEj+0x24>
     92a:	93 c0       	rjmp	.+294    	; 0xa52 <_ZN9NeoPixels16StartRandomPixelEj+0x14a>
     92c:	dc 01       	movw	r26, r24
     92e:	a4 52       	subi	r26, 0x24	; 36
     930:	bf 4f       	sbci	r27, 0xFF	; 255
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	00 e0       	ldi	r16, 0x00	; 0
     938:	10 e0       	ldi	r17, 0x00	; 0
		m_status_bits[idx/4] = v;
	}

NeoPixelState NeoPixels::GetPixelState(size_t idx)
	{
		byte x = m_status_bits[idx/4];
     93a:	fa 01       	movw	r30, r20
     93c:	f6 95       	lsr	r31
     93e:	e7 95       	ror	r30
     940:	f6 95       	lsr	r31
     942:	e7 95       	ror	r30
     944:	e8 0f       	add	r30, r24
     946:	f9 1f       	adc	r31, r25
     948:	e1 53       	subi	r30, 0x31	; 49
     94a:	ff 4f       	sbci	r31, 0xFF	; 255
		x >>= 2*(idx % 4);
     94c:	20 81       	ld	r18, Z
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	fa 01       	movw	r30, r20
     952:	e3 70       	andi	r30, 0x03	; 3
     954:	ff 27       	eor	r31, r31
     956:	ee 0f       	add	r30, r30
     958:	ff 1f       	adc	r31, r31
     95a:	02 c0       	rjmp	.+4      	; 0x960 <_ZN9NeoPixels16StartRandomPixelEj+0x58>
     95c:	35 95       	asr	r19
     95e:	27 95       	ror	r18
     960:	ea 95       	dec	r30
     962:	e2 f7       	brpl	.-8      	; 0x95c <_ZN9NeoPixels16StartRandomPixelEj+0x54>
		NeoPixelState ret = (NeoPixelState)(x & 0x03);
     964:	23 70       	andi	r18, 0x03	; 3
void NeoPixels::StartRandomPixel(size_t pixels)
	{
		size_t op = 0;
		for(size_t i = 0;i < m_cfg.m_pixels; i++)
			{
				if(GetPixelState(i) == TurnedOff && m_tmrs[i] == 0)
     966:	29 f4       	brne	.+10     	; 0x972 <_ZN9NeoPixels16StartRandomPixelEj+0x6a>
     968:	2c 91       	ld	r18, X
     96a:	21 11       	cpse	r18, r1
     96c:	02 c0       	rjmp	.+4      	; 0x972 <_ZN9NeoPixels16StartRandomPixelEj+0x6a>
					op++;
     96e:	0f 5f       	subi	r16, 0xFF	; 255
     970:	1f 4f       	sbci	r17, 0xFF	; 255
	}

void NeoPixels::StartRandomPixel(size_t pixels)
	{
		size_t op = 0;
		for(size_t i = 0;i < m_cfg.m_pixels; i++)
     972:	4f 5f       	subi	r20, 0xFF	; 255
     974:	5f 4f       	sbci	r21, 0xFF	; 255
     976:	11 96       	adiw	r26, 0x01	; 1
     978:	4c 17       	cp	r20, r28
     97a:	5d 07       	cpc	r21, r29
     97c:	f1 f6       	brne	.-68     	; 0x93a <_ZN9NeoPixels16StartRandomPixelEj+0x32>
			{
				if(GetPixelState(i) == TurnedOff && m_tmrs[i] == 0)
					op++;
			}

		while(pixels > 0 && op > 0)
     97e:	61 15       	cp	r22, r1
     980:	71 05       	cpc	r23, r1
     982:	09 f4       	brne	.+2      	; 0x986 <_ZN9NeoPixels16StartRandomPixelEj+0x7e>
     984:	66 c0       	rjmp	.+204    	; 0xa52 <_ZN9NeoPixels16StartRandomPixelEj+0x14a>
     986:	01 15       	cp	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	09 f4       	brne	.+2      	; 0x98e <_ZN9NeoPixels16StartRandomPixelEj+0x86>
     98c:	62 c0       	rjmp	.+196    	; 0xa52 <_ZN9NeoPixels16StartRandomPixelEj+0x14a>
     98e:	ec 01       	movw	r28, r24
     990:	c8 01       	movw	r24, r16
     992:	86 1b       	sub	r24, r22
     994:	97 0b       	sbc	r25, r23
     996:	9c 01       	movw	r18, r24
     998:	2f 5f       	subi	r18, 0xFF	; 255
     99a:	3f 4f       	sbci	r19, 0xFF	; 255
     99c:	49 01       	movw	r8, r18
     99e:	ce 01       	movw	r24, r28
     9a0:	80 5f       	subi	r24, 0xF0	; 240
     9a2:	9e 4f       	sbci	r25, 0xFE	; 254
     9a4:	5c 01       	movw	r10, r24
void NeoPixels::SetPixelState(size_t idx,NeoPixelState state)
	{
		byte x = ((byte)state) & 0x03;
		byte mask = 0x03;
		x <<= 2 * (idx % 4);
		mask <<= 2 * (idx % 4);
     9a6:	23 e0       	ldi	r18, 0x03	; 3
     9a8:	c2 2e       	mov	r12, r18
     9aa:	d1 2c       	mov	r13, r1

void NeoPixels::SetPixelState(size_t idx,NeoPixelState state)
	{
		byte x = ((byte)state) & 0x03;
		byte mask = 0x03;
		x <<= 2 * (idx % 4);
     9ac:	ee 24       	eor	r14, r14
     9ae:	e3 94       	inc	r14
     9b0:	f1 2c       	mov	r15, r1
			while(b)
				{
					if(GetPixelState(idx) == TurnedOff && (m_tmrs[idx] == 0))
						b = false;
					else
						idx = random() % m_cfg.m_pixels;
     9b2:	0e 94 af 11 	call	0x235e	; 0x235e <random>
     9b6:	28 81       	ld	r18, Y
     9b8:	39 81       	ldd	r19, Y+1	; 0x01
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	50 e0       	ldi	r21, 0x00	; 0
     9be:	0e 94 c9 10 	call	0x2192	; 0x2192 <__divmodsi4>
		m_status_bits[idx/4] = v;
	}

NeoPixelState NeoPixels::GetPixelState(size_t idx)
	{
		byte x = m_status_bits[idx/4];
     9c2:	fb 01       	movw	r30, r22
     9c4:	f6 95       	lsr	r31
     9c6:	e7 95       	ror	r30
     9c8:	f6 95       	lsr	r31
     9ca:	e7 95       	ror	r30
     9cc:	ec 0f       	add	r30, r28
     9ce:	fd 1f       	adc	r31, r29
     9d0:	e1 53       	subi	r30, 0x31	; 49
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255
     9d4:	40 81       	ld	r20, Z
		x >>= 2*(idx % 4);
     9d6:	9b 01       	movw	r18, r22
     9d8:	23 70       	andi	r18, 0x03	; 3
     9da:	33 27       	eor	r19, r19
     9dc:	22 0f       	add	r18, r18
     9de:	33 1f       	adc	r19, r19
     9e0:	84 2f       	mov	r24, r20
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	02 2e       	mov	r0, r18
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <_ZN9NeoPixels16StartRandomPixelEj+0xe4>
     9e8:	95 95       	asr	r25
     9ea:	87 95       	ror	r24
     9ec:	0a 94       	dec	r0
     9ee:	e2 f7       	brpl	.-8      	; 0x9e8 <_ZN9NeoPixels16StartRandomPixelEj+0xe0>
		NeoPixelState ret = (NeoPixelState)(x & 0x03);
     9f0:	83 70       	andi	r24, 0x03	; 3
			{
			size_t idx = random() % m_cfg.m_pixels;
			bool b = true;
			while(b)
				{
					if(GetPixelState(idx) == TurnedOff && (m_tmrs[idx] == 0))
     9f2:	f9 f6       	brne	.-66     	; 0x9b2 <_ZN9NeoPixels16StartRandomPixelEj+0xaa>
     9f4:	6c 0f       	add	r22, r28
     9f6:	7d 1f       	adc	r23, r29
     9f8:	db 01       	movw	r26, r22
     9fa:	a4 52       	subi	r26, 0x24	; 36
     9fc:	bf 4f       	sbci	r27, 0xFF	; 255
     9fe:	8c 91       	ld	r24, X
     a00:	81 11       	cpse	r24, r1
     a02:	d7 cf       	rjmp	.-82     	; 0x9b2 <_ZN9NeoPixels16StartRandomPixelEj+0xaa>
void NeoPixels::SetPixelState(size_t idx,NeoPixelState state)
	{
		byte x = ((byte)state) & 0x03;
		byte mask = 0x03;
		x <<= 2 * (idx % 4);
		mask <<= 2 * (idx % 4);
     a04:	c6 01       	movw	r24, r12
     a06:	02 2e       	mov	r0, r18
     a08:	01 c0       	rjmp	.+2      	; 0xa0c <_ZN9NeoPixels16StartRandomPixelEj+0x104>
     a0a:	88 0f       	add	r24, r24
     a0c:	0a 94       	dec	r0
     a0e:	ea f7       	brpl	.-6      	; 0xa0a <_ZN9NeoPixels16StartRandomPixelEj+0x102>
		mask = ~mask;
     a10:	80 95       	com	r24
		byte v = m_status_bits[idx/4] & mask;
     a12:	48 23       	and	r20, r24

void NeoPixels::SetPixelState(size_t idx,NeoPixelState state)
	{
		byte x = ((byte)state) & 0x03;
		byte mask = 0x03;
		x <<= 2 * (idx % 4);
     a14:	c7 01       	movw	r24, r14
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <_ZN9NeoPixels16StartRandomPixelEj+0x112>
     a18:	88 0f       	add	r24, r24
     a1a:	2a 95       	dec	r18
     a1c:	ea f7       	brpl	.-6      	; 0xa18 <_ZN9NeoPixels16StartRandomPixelEj+0x110>
		mask <<= 2 * (idx % 4);
		mask = ~mask;
		byte v = m_status_bits[idx/4] & mask;
		v |= x;
     a1e:	48 2b       	or	r20, r24
		m_status_bits[idx/4] = v;
     a20:	40 83       	st	Z, r20
						b = false;
					else
						idx = random() % m_cfg.m_pixels;
				}
			SetPixelState(idx,Attacking);
			m_tmrs[idx] = m_cfg.m_attack > 255 ? 255 : (byte)m_cfg.m_attack;
     a22:	8a 81       	ldd	r24, Y+2	; 0x02
     a24:	9b 81       	ldd	r25, Y+3	; 0x03
     a26:	8f 3f       	cpi	r24, 0xFF	; 255
     a28:	91 05       	cpc	r25, r1
     a2a:	11 f0       	breq	.+4      	; 0xa30 <_ZN9NeoPixels16StartRandomPixelEj+0x128>
     a2c:	08 f0       	brcs	.+2      	; 0xa30 <_ZN9NeoPixels16StartRandomPixelEj+0x128>
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	fb 01       	movw	r30, r22
     a32:	e4 52       	subi	r30, 0x24	; 36
     a34:	ff 4f       	sbci	r31, 0xFF	; 255
     a36:	80 83       	st	Z, r24
			pixels--;
			m_active++;
     a38:	f5 01       	movw	r30, r10
     a3a:	80 81       	ld	r24, Z
     a3c:	91 81       	ldd	r25, Z+1	; 0x01
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	91 83       	std	Z+1, r25	; 0x01
     a42:	80 83       	st	Z, r24
			{
				if(GetPixelState(i) == TurnedOff && m_tmrs[i] == 0)
					op++;
			}

		while(pixels > 0 && op > 0)
     a44:	08 15       	cp	r16, r8
     a46:	19 05       	cpc	r17, r9
     a48:	21 f0       	breq	.+8      	; 0xa52 <_ZN9NeoPixels16StartRandomPixelEj+0x14a>
     a4a:	01 50       	subi	r16, 0x01	; 1
     a4c:	11 09       	sbc	r17, r1
     a4e:	09 f0       	breq	.+2      	; 0xa52 <_ZN9NeoPixels16StartRandomPixelEj+0x14a>
     a50:	b0 cf       	rjmp	.-160    	; 0x9b2 <_ZN9NeoPixels16StartRandomPixelEj+0xaa>
			pixels--;
			m_active++;
			op--;
			}

	}
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	df 90       	pop	r13
     a60:	cf 90       	pop	r12
     a62:	bf 90       	pop	r11
     a64:	af 90       	pop	r10
     a66:	9f 90       	pop	r9
     a68:	8f 90       	pop	r8
     a6a:	08 95       	ret

00000a6c <_ZN9NeoPixels11initTwinkleEv>:

void NeoPixels::initTwinkle()
	{
     a6c:	cf 92       	push	r12
     a6e:	df 92       	push	r13
     a70:	ef 92       	push	r14
     a72:	ff 92       	push	r15
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	8c 01       	movw	r16, r24
		memset(m_arry,0,sizeof(m_arry));
     a7e:	7c 01       	movw	r14, r24
     a80:	89 e3       	ldi	r24, 0x39	; 57
     a82:	e8 0e       	add	r14, r24
     a84:	f1 1c       	adc	r15, r1
     a86:	86 e9       	ldi	r24, 0x96	; 150
     a88:	d7 01       	movw	r26, r14
     a8a:	1d 92       	st	X+, r1
     a8c:	8a 95       	dec	r24
     a8e:	e9 f7       	brne	.-6      	; 0xa8a <_ZN9NeoPixels11initTwinkleEv+0x1e>
		memset(m_status_bits,0,sizeof(m_status_bits));
     a90:	f8 01       	movw	r30, r16
     a92:	e1 53       	subi	r30, 0x31	; 49
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	8d e0       	ldi	r24, 0x0D	; 13
     a98:	df 01       	movw	r26, r30
     a9a:	1d 92       	st	X+, r1
     a9c:	8a 95       	dec	r24
     a9e:	e9 f7       	brne	.-6      	; 0xa9a <_ZN9NeoPixels11initTwinkleEv+0x2e>

		for(size_t i=0;i<m_cfg.m_pixels;i++)
     aa0:	f8 01       	movw	r30, r16
     aa2:	80 81       	ld	r24, Z
     aa4:	91 81       	ldd	r25, Z+1	; 0x01
     aa6:	00 97       	sbiw	r24, 0x00	; 0
     aa8:	b1 f0       	breq	.+44     	; 0xad6 <_ZN9NeoPixels11initTwinkleEv+0x6a>
     aaa:	68 01       	movw	r12, r16
     aac:	fc ed       	ldi	r31, 0xDC	; 220
     aae:	cf 0e       	add	r12, r31
     ab0:	d1 1c       	adc	r13, r1
     ab2:	c0 e0       	ldi	r28, 0x00	; 0
     ab4:	d0 e0       	ldi	r29, 0x00	; 0
			m_tmrs[i] = RandomOffset(m_cfg.m_off);
     ab6:	d8 01       	movw	r26, r16
     ab8:	18 96       	adiw	r26, 0x08	; 8
     aba:	8d 91       	ld	r24, X+
     abc:	9c 91       	ld	r25, X
     abe:	19 97       	sbiw	r26, 0x09	; 9
     ac0:	7c dd       	rcall	.-1288   	; 0x5ba <_Z12RandomOffsetj>
     ac2:	f6 01       	movw	r30, r12
     ac4:	81 93       	st	Z+, r24
     ac6:	6f 01       	movw	r12, r30
     ac8:	21 96       	adiw	r28, 0x01	; 1
void NeoPixels::initTwinkle()
	{
		memset(m_arry,0,sizeof(m_arry));
		memset(m_status_bits,0,sizeof(m_status_bits));

		for(size_t i=0;i<m_cfg.m_pixels;i++)
     aca:	d8 01       	movw	r26, r16
     acc:	8d 91       	ld	r24, X+
     ace:	9c 91       	ld	r25, X
     ad0:	c8 17       	cp	r28, r24
     ad2:	d9 07       	cpc	r29, r25
     ad4:	80 f3       	brcs	.-32     	; 0xab6 <_ZN9NeoPixels11initTwinkleEv+0x4a>
     ad6:	f8 01       	movw	r30, r16
			m_tmrs[i] = RandomOffset(m_cfg.m_off);

		m_lit = m_cfg.m_pixels * m_cfg.m_density / 100;
     ad8:	65 85       	ldd	r22, Z+13	; 0x0d
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	0e 94 6f 10 	call	0x20de	; 0x20de <__mulhi3>
     ae0:	64 e6       	ldi	r22, 0x64	; 100
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	0e 94 80 10 	call	0x2100	; 0x2100 <__udivmodhi4>
     ae8:	eb 01       	movw	r28, r22
     aea:	e2 5f       	subi	r30, 0xF2	; 242
     aec:	fe 4f       	sbci	r31, 0xFE	; 254
     aee:	71 83       	std	Z+1, r23	; 0x01
     af0:	60 83       	st	Z, r22
     af2:	32 96       	adiw	r30, 0x02	; 2
		m_active = 0;
     af4:	11 82       	std	Z+1, r1	; 0x01
     af6:	10 82       	st	Z, r1
     af8:	20 97       	sbiw	r28, 0x00	; 0
		size_t x = m_lit;
		while(x > 0)
     afa:	a1 f0       	breq	.+40     	; 0xb24 <_ZN9NeoPixels11initTwinkleEv+0xb8>
     afc:	0e 94 af 11 	call	0x235e	; 0x235e <random>
			{
				size_t idx = random() % m_cfg.m_pixels;
     b00:	d8 01       	movw	r26, r16
     b02:	2d 91       	ld	r18, X+
     b04:	3c 91       	ld	r19, X
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	0e 94 c9 10 	call	0x2192	; 0x2192 <__divmodsi4>
     b0e:	60 0f       	add	r22, r16
				if(m_tmrs[idx] != 0)
     b10:	71 1f       	adc	r23, r17
     b12:	fb 01       	movw	r30, r22
     b14:	e4 52       	subi	r30, 0x24	; 36
     b16:	ff 4f       	sbci	r31, 0xFF	; 255
     b18:	80 81       	ld	r24, Z
     b1a:	88 23       	and	r24, r24
     b1c:	79 f3       	breq	.-34     	; 0xafc <_ZN9NeoPixels11initTwinkleEv+0x90>
     b1e:	10 82       	st	Z, r1
					{
						m_tmrs[idx] = 0;
     b20:	21 97       	sbiw	r28, 0x01	; 1
						x--;
     b22:	ea cf       	rjmp	.-44     	; 0xaf8 <_ZN9NeoPixels11initTwinkleEv+0x8c>
     b24:	62 e3       	ldi	r22, 0x32	; 50
					}
			}
		sendPixels(m_arry,PIXELS);
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	c7 01       	movw	r24, r14
     b2a:	df 91       	pop	r29
	}
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ff 90       	pop	r15
     b34:	ef 90       	pop	r14
     b36:	df 90       	pop	r13
     b38:	cf 90       	pop	r12
     b3a:	29 ce       	rjmp	.-942    	; 0x78e <_Z10sendPixelsP13NeoPixelColorj>

00000b3c <_ZN13NeoPixelColorC1Ev>:
	{
		colors[2] = v;
	}


NeoPixelColor::NeoPixelColor()
     b3c:	fc 01       	movw	r30, r24



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     b3e:	80 91 12 01 	lds	r24, 0x0112
     b42:	81 30       	cpi	r24, 0x01	; 1
     b44:	21 f4       	brne	.+8      	; 0xb4e <_ZN13NeoPixelColorC1Ev+0x12>
			{
		case GRB:
			colors[1] = v;
     b46:	11 82       	std	Z+1, r1	; 0x01
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     b48:	10 82       	st	Z, r1
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     b4a:	12 82       	std	Z+2, r1	; 0x02
     b4c:	08 95       	ret
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     b4e:	10 82       	st	Z, r1
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     b50:	11 82       	std	Z+1, r1	; 0x01
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     b52:	12 82       	std	Z+2, r1	; 0x02
     b54:	08 95       	ret

00000b56 <_ZN13NeoPixelColorC1Ehhh>:
		setRed(0);
		setGreen(0);
		setBlue(0);
	}

NeoPixelColor::NeoPixelColor(byte r, byte g, byte b)
     b56:	fc 01       	movw	r30, r24



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     b58:	80 91 12 01 	lds	r24, 0x0112
     b5c:	81 30       	cpi	r24, 0x01	; 1
     b5e:	21 f4       	brne	.+8      	; 0xb68 <_ZN13NeoPixelColorC1Ehhh+0x12>
			{
		case GRB:
			colors[1] = v;
     b60:	61 83       	std	Z+1, r22	; 0x01
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     b62:	40 83       	st	Z, r20
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     b64:	22 83       	std	Z+2, r18	; 0x02
     b66:	08 95       	ret
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     b68:	60 83       	st	Z, r22
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     b6a:	41 83       	std	Z+1, r20	; 0x01
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     b6c:	22 83       	std	Z+2, r18	; 0x02
     b6e:	08 95       	ret

00000b70 <_ZN13NeoPixelColorC1ERKS_>:
		setRed(r);
		setGreen(g);
		setBlue(b);
	}

NeoPixelColor::NeoPixelColor(const NeoPixelColor &r)
     b70:	fc 01       	movw	r30, r24
     b72:	db 01       	movw	r26, r22

NeoColorOrder NeoPixelColor::m_color_order = RGB;

byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
     b74:	80 91 12 01 	lds	r24, 0x0112
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	51 f4       	brne	.+20     	; 0xb90 <_ZN13NeoPixelColorC1ERKS_+0x20>
			{
		case GRB:
			return colors[1];
     b7c:	11 96       	adiw	r26, 0x01	; 1
     b7e:	8c 91       	ld	r24, X
     b80:	11 97       	sbiw	r26, 0x01	; 1
void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[1] = v;
     b82:	81 83       	std	Z+1, r24	; 0x01
byte NeoPixelColor::getGreen()
	{
		switch(m_color_order)
			{
		case GRB:
			return colors[0];
     b84:	8c 91       	ld	r24, X
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     b86:	80 83       	st	Z, r24
	}


byte NeoPixelColor::getBlue()
	{
		return colors[2];
     b88:	12 96       	adiw	r26, 0x02	; 2
     b8a:	8c 91       	ld	r24, X
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     b8c:	82 83       	std	Z+2, r24	; 0x02
     b8e:	08 95       	ret
		case GRB:
			return colors[1];
			break;
		case RGB:
		default:
			return colors[0];
     b90:	8c 91       	ld	r24, X
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     b92:	80 83       	st	Z, r24
		case GRB:
			return colors[0];
			break;
		case RGB:
		default:
			return colors[1];
     b94:	11 96       	adiw	r26, 0x01	; 1
     b96:	8c 91       	ld	r24, X
     b98:	11 97       	sbiw	r26, 0x01	; 1
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     b9a:	81 83       	std	Z+1, r24	; 0x01
	}


byte NeoPixelColor::getBlue()
	{
		return colors[2];
     b9c:	12 96       	adiw	r26, 0x02	; 2
     b9e:	8c 91       	ld	r24, X
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     ba0:	82 83       	std	Z+2, r24	; 0x02
     ba2:	08 95       	ret

00000ba4 <_ZN13NeoPixelColoraSERKS_>:
		setGreen(r.getGreen());
		setBlue(r.getBlue());
	}

NeoPixelColor & NeoPixelColor::operator=(const NeoPixelColor &r)
	{
     ba4:	fb 01       	movw	r30, r22

NeoColorOrder NeoPixelColor::m_color_order = RGB;

byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
     ba6:	20 91 12 01 	lds	r18, 0x0112
     baa:	21 30       	cpi	r18, 0x01	; 1
     bac:	59 f4       	brne	.+22     	; 0xbc4 <_ZN13NeoPixelColoraSERKS_+0x20>
			{
		case GRB:
			return colors[1];
     bae:	21 81       	ldd	r18, Z+1	; 0x01
void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[1] = v;
     bb0:	dc 01       	movw	r26, r24
     bb2:	11 96       	adiw	r26, 0x01	; 1
     bb4:	2c 93       	st	X, r18
     bb6:	11 97       	sbiw	r26, 0x01	; 1
byte NeoPixelColor::getGreen()
	{
		switch(m_color_order)
			{
		case GRB:
			return colors[0];
     bb8:	20 81       	ld	r18, Z
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     bba:	2c 93       	st	X, r18
	}


byte NeoPixelColor::getBlue()
	{
		return colors[2];
     bbc:	22 81       	ldd	r18, Z+2	; 0x02
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     bbe:	fc 01       	movw	r30, r24
     bc0:	22 83       	std	Z+2, r18	; 0x02
	{
		setRed(r.getRed());
		setGreen(r.getGreen());
		setBlue(r.getBlue());
		return *this;
	}
     bc2:	08 95       	ret
		case GRB:
			return colors[1];
			break;
		case RGB:
		default:
			return colors[0];
     bc4:	20 81       	ld	r18, Z
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     bc6:	dc 01       	movw	r26, r24
     bc8:	2c 93       	st	X, r18
		case GRB:
			return colors[0];
			break;
		case RGB:
		default:
			return colors[1];
     bca:	21 81       	ldd	r18, Z+1	; 0x01
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     bcc:	11 96       	adiw	r26, 0x01	; 1
     bce:	2c 93       	st	X, r18
	}


byte NeoPixelColor::getBlue()
	{
		return colors[2];
     bd0:	22 81       	ldd	r18, Z+2	; 0x02
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     bd2:	fc 01       	movw	r30, r24
     bd4:	22 83       	std	Z+2, r18	; 0x02
	{
		setRed(r.getRed());
		setGreen(r.getGreen());
		setBlue(r.getBlue());
		return *this;
	}
     bd6:	08 95       	ret

00000bd8 <_ZN9NeoPixels10fillPixelsE13NeoPixelColor>:
  }
}


void NeoPixels::fillPixels(NeoPixelColor c)
	{
     bd8:	af 92       	push	r10
     bda:	bf 92       	push	r11
     bdc:	cf 92       	push	r12
     bde:	df 92       	push	r13
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
		for (size_t i = 0; i < m_cfg.m_pixels; i++)
     bec:	fc 01       	movw	r30, r24
     bee:	20 81       	ld	r18, Z
     bf0:	31 81       	ldd	r19, Z+1	; 0x01
     bf2:	21 15       	cp	r18, r1
     bf4:	31 05       	cpc	r19, r1
     bf6:	11 f1       	breq	.+68     	; 0xc3c <_ZN9NeoPixels10fillPixelsE13NeoPixelColor+0x64>
     bf8:	6b 01       	movw	r12, r22
     bfa:	7c 01       	movw	r14, r24
     bfc:	5c 01       	movw	r10, r24
     bfe:	59 e3       	ldi	r21, 0x39	; 57
     c00:	a5 0e       	add	r10, r21
     c02:	b1 1c       	adc	r11, r1
     c04:	85 01       	movw	r16, r10
     c06:	c0 e0       	ldi	r28, 0x00	; 0
     c08:	d0 e0       	ldi	r29, 0x00	; 0
			{
				m_arry[i] = c;
     c0a:	b6 01       	movw	r22, r12
     c0c:	c8 01       	movw	r24, r16
     c0e:	ca df       	rcall	.-108    	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
     c10:	21 96       	adiw	r28, 0x01	; 1
}


void NeoPixels::fillPixels(NeoPixelColor c)
	{
		for (size_t i = 0; i < m_cfg.m_pixels; i++)
     c12:	f7 01       	movw	r30, r14
     c14:	20 81       	ld	r18, Z
     c16:	31 81       	ldd	r19, Z+1	; 0x01
     c18:	0d 5f       	subi	r16, 0xFD	; 253
     c1a:	1f 4f       	sbci	r17, 0xFF	; 255
     c1c:	c2 17       	cp	r28, r18
     c1e:	d3 07       	cpc	r29, r19
     c20:	a0 f3       	brcs	.-24     	; 0xc0a <_ZN9NeoPixels10fillPixelsE13NeoPixelColor+0x32>
     c22:	b9 01       	movw	r22, r18
			{
				m_arry[i] = c;
			}
		sendPixels(m_arry,m_cfg.m_pixels);
     c24:	c5 01       	movw	r24, r10
     c26:	df 91       	pop	r29
	}
     c28:	cf 91       	pop	r28
     c2a:	1f 91       	pop	r17
     c2c:	0f 91       	pop	r16
     c2e:	ff 90       	pop	r15
     c30:	ef 90       	pop	r14
     c32:	df 90       	pop	r13
     c34:	cf 90       	pop	r12
     c36:	bf 90       	pop	r11
     c38:	af 90       	pop	r10
     c3a:	a9 cd       	rjmp	.-1198   	; 0x78e <_Z10sendPixelsP13NeoPixelColorj>
	{
		for (size_t i = 0; i < m_cfg.m_pixels; i++)
			{
				m_arry[i] = c;
			}
		sendPixels(m_arry,m_cfg.m_pixels);
     c3c:	ac 01       	movw	r20, r24
     c3e:	47 5c       	subi	r20, 0xC7	; 199
     c40:	5f 4f       	sbci	r21, 0xFF	; 255
     c42:	5a 01       	movw	r10, r20
     c44:	ee cf       	rjmp	.-36     	; 0xc22 <_ZN9NeoPixels10fillPixelsE13NeoPixelColor+0x4a>

00000c46 <_ZN9NeoPixels4initEv>:
		init();
		Update();
	}

void NeoPixels::init()
	{
     c46:	af 92       	push	r10
     c48:	bf 92       	push	r11
     c4a:	cf 92       	push	r12
     c4c:	df 92       	push	r13
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <_ZN9NeoPixels4initEv+0x16>
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <_ZN9NeoPixels4initEv+0x18>
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	8c 01       	movw	r16, r24
		switch (m_cfg.m_effect)
     c64:	dc 01       	movw	r26, r24
     c66:	1a 96       	adiw	r26, 0x0a	; 10
     c68:	2c 91       	ld	r18, X
     c6a:	23 30       	cpi	r18, 0x03	; 3
     c6c:	09 f4       	brne	.+2      	; 0xc70 <_ZN9NeoPixels4initEv+0x2a>
     c6e:	85 c0       	rjmp	.+266    	; 0xd7a <_ZN9NeoPixels4initEv+0x134>
     c70:	40 f0       	brcs	.+16     	; 0xc82 <_ZN9NeoPixels4initEv+0x3c>
     c72:	25 30       	cpi	r18, 0x05	; 5
     c74:	d1 f0       	breq	.+52     	; 0xcaa <_ZN9NeoPixels4initEv+0x64>
     c76:	08 f4       	brcc	.+2      	; 0xc7a <_ZN9NeoPixels4initEv+0x34>
     c78:	47 c0       	rjmp	.+142    	; 0xd08 <_ZN9NeoPixels4initEv+0xc2>
     c7a:	26 30       	cpi	r18, 0x06	; 6
     c7c:	39 f5       	brne	.+78     	; 0xccc <_ZN9NeoPixels4initEv+0x86>
			{
		case effectCandle:
			initCandle();
     c7e:	93 da       	rcall	.-2778   	; 0x1a6 <_ZN9NeoPixels10initCandleEv>
     c80:	05 c0       	rjmp	.+10     	; 0xc8c <_ZN9NeoPixels4initEv+0x46>
			break;
     c82:	21 30       	cpi	r18, 0x01	; 1
		Update();
	}

void NeoPixels::init()
	{
		switch (m_cfg.m_effect)
     c84:	79 f1       	breq	.+94     	; 0xce4 <_ZN9NeoPixels4initEv+0x9e>
     c86:	22 30       	cpi	r18, 0x02	; 2
     c88:	09 f5       	brne	.+66     	; 0xccc <_ZN9NeoPixels4initEv+0x86>
     c8a:	f0 de       	rcall	.-544    	; 0xa6c <_ZN9NeoPixels11initTwinkleEv>
			{
		case effectCandle:
			initCandle();
			break;
		case effectTwinkle:
			initTwinkle();
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
		default:
			memset(m_arry,0,sizeof(m_arry));
			m_tmrs[1] = 1;
			break;
			}
	}
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	ff 90       	pop	r15
     c9e:	ef 90       	pop	r14
     ca0:	df 90       	pop	r13
     ca2:	cf 90       	pop	r12
     ca4:	bf 90       	pop	r11
     ca6:	af 90       	pop	r10
     ca8:	08 95       	ret
     caa:	fc 01       	movw	r30, r24
     cac:	e4 52       	subi	r30, 0x24	; 36
	}


void NeoPixels::initRainbow()
	{
		m_tmrs[0] = m_cfg.m_sustain;
     cae:	ff 4f       	sbci	r31, 0xFF	; 255
     cb0:	dc 01       	movw	r26, r24
     cb2:	14 96       	adiw	r26, 0x04	; 4
     cb4:	8c 91       	ld	r24, X
     cb6:	80 83       	st	Z, r24
     cb8:	31 96       	adiw	r30, 0x01	; 1
     cba:	10 82       	st	Z, r1
		m_tmrs[1] = 0;
     cbc:	e4 5a       	subi	r30, 0xA4	; 164
     cbe:	f1 09       	sbc	r31, r1
		memset(m_arry,0,sizeof(m_arry));
     cc0:	86 e9       	ldi	r24, 0x96	; 150
     cc2:	df 01       	movw	r26, r30
     cc4:	1d 92       	st	X+, r1
     cc6:	8a 95       	dec	r24
     cc8:	e9 f7       	brne	.-6      	; 0xcc4 <_ZN9NeoPixels4initEv+0x7e>
     cca:	e0 cf       	rjmp	.-64     	; 0xc8c <_ZN9NeoPixels4initEv+0x46>
     ccc:	f8 01       	movw	r30, r16
     cce:	f9 96       	adiw	r30, 0x39	; 57
		case effectRainbow:
			initRainbow();
			break;
		case effectOff:
		default:
			memset(m_arry,0,sizeof(m_arry));
     cd0:	86 e9       	ldi	r24, 0x96	; 150
     cd2:	df 01       	movw	r26, r30
     cd4:	1d 92       	st	X+, r1
     cd6:	8a 95       	dec	r24
     cd8:	e9 f7       	brne	.-6      	; 0xcd4 <_ZN9NeoPixels4initEv+0x8e>
     cda:	ec 55       	subi	r30, 0x5C	; 92
     cdc:	ff 4f       	sbci	r31, 0xFF	; 255
			m_tmrs[1] = 1;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	80 83       	st	Z, r24
     ce2:	d4 cf       	rjmp	.-88     	; 0xc8c <_ZN9NeoPixels4initEv+0x46>
     ce4:	bc 01       	movw	r22, r24
			break;
     ce6:	61 5f       	subi	r22, 0xF1	; 241
			break;
		case effectTheaterChase:
			initTheaterChase();
			break;
		case effectAllOn:
			fillPixels(m_cfg.m_pattern[0]);
     ce8:	7f 4f       	sbci	r23, 0xFF	; 255
     cea:	ce 01       	movw	r24, r28
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	2c 83       	std	Y+4, r18	; 0x04
     cf0:	3f df       	rcall	.-386    	; 0xb70 <_ZN13NeoPixelColorC1ERKS_>
     cf2:	be 01       	movw	r22, r28
     cf4:	6f 5f       	subi	r22, 0xFF	; 255
     cf6:	7f 4f       	sbci	r23, 0xFF	; 255
     cf8:	c8 01       	movw	r24, r16
     cfa:	6e df       	rcall	.-292    	; 0xbd8 <_ZN9NeoPixels10fillPixelsE13NeoPixelColor>
     cfc:	f8 01       	movw	r30, r16
     cfe:	e3 52       	subi	r30, 0x23	; 35
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
     d02:	2c 81       	ldd	r18, Y+4	; 0x04
			m_tmrs[1] = 1;
     d04:	20 83       	st	Z, r18
     d06:	c2 cf       	rjmp	.-124    	; 0xc8c <_ZN9NeoPixels4initEv+0x46>
     d08:	fc 01       	movw	r30, r24
     d0a:	f9 96       	adiw	r30, 0x39	; 57
     d0c:	86 e9       	ldi	r24, 0x96	; 150
			break;
     d0e:	df 01       	movw	r26, r30
		case effectPattern:
			memset(m_arry,0,sizeof(m_arry));
     d10:	1d 92       	st	X+, r1
     d12:	8a 95       	dec	r24
     d14:	e9 f7       	brne	.-6      	; 0xd10 <_ZN9NeoPixels4initEv+0xca>
     d16:	d8 01       	movw	r26, r16
     d18:	8d 91       	ld	r24, X+
     d1a:	9c 91       	ld	r25, X
     d1c:	89 2b       	or	r24, r25
			for(uint16_t i=0;i<m_cfg.m_pixels;i++)
     d1e:	39 f1       	breq	.+78     	; 0xd6e <_ZN9NeoPixels4initEv+0x128>
     d20:	7f 01       	movw	r14, r30
     d22:	a1 2c       	mov	r10, r1
     d24:	b1 2c       	mov	r11, r1
     d26:	8c e3       	ldi	r24, 0x3C	; 60
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	6c 01       	movw	r12, r24
     d2c:	ce 1a       	sub	r12, r30
     d2e:	df 0a       	sbc	r13, r31
     d30:	04 c0       	rjmp	.+8      	; 0xd3a <_ZN9NeoPixels4initEv+0xf4>
     d32:	ec 0c       	add	r14, r12
     d34:	fd 1c       	adc	r15, r13
     d36:	e0 0e       	add	r14, r16
     d38:	f1 1e       	adc	r15, r17
     d3a:	f8 01       	movw	r30, r16
     d3c:	66 85       	ldd	r22, Z+14	; 0x0e
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	c5 01       	movw	r24, r10
				{
					uint16_t x = i % m_cfg.m_pattern_size;
     d42:	0e 94 80 10 	call	0x2100	; 0x2100 <__udivmodhi4>
     d46:	bc 01       	movw	r22, r24
     d48:	66 0f       	add	r22, r22
     d4a:	77 1f       	adc	r23, r23
     d4c:	68 0f       	add	r22, r24
					m_arry[i] = m_cfg.m_pattern[x];
     d4e:	79 1f       	adc	r23, r25
     d50:	61 5f       	subi	r22, 0xF1	; 241
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
     d54:	60 0f       	add	r22, r16
     d56:	71 1f       	adc	r23, r17
     d58:	c7 01       	movw	r24, r14
     d5a:	24 df       	rcall	.-440    	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
     d5c:	ff ef       	ldi	r31, 0xFF	; 255
     d5e:	af 1a       	sub	r10, r31
     d60:	bf 0a       	sbc	r11, r31
     d62:	d8 01       	movw	r26, r16
     d64:	8d 91       	ld	r24, X+
			fillPixels(m_cfg.m_pattern[0]);
			m_tmrs[1] = 1;
			break;
		case effectPattern:
			memset(m_arry,0,sizeof(m_arry));
			for(uint16_t i=0;i<m_cfg.m_pixels;i++)
     d66:	9c 91       	ld	r25, X
     d68:	a8 16       	cp	r10, r24
     d6a:	b9 06       	cpc	r11, r25
     d6c:	10 f3       	brcs	.-60     	; 0xd32 <_ZN9NeoPixels4initEv+0xec>
     d6e:	f8 01       	movw	r30, r16
     d70:	e3 52       	subi	r30, 0x23	; 35
     d72:	ff 4f       	sbci	r31, 0xFF	; 255
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	80 83       	st	Z, r24
				{
					uint16_t x = i % m_cfg.m_pattern_size;
					m_arry[i] = m_cfg.m_pattern[x];
				}
			m_tmrs[1] = 1;
     d78:	89 cf       	rjmp	.-238    	; 0xc8c <_ZN9NeoPixels4initEv+0x46>
     d7a:	13 db       	rcall	.-2522   	; 0x3a2 <_ZN9NeoPixels16initTheaterChaseEv>
     d7c:	87 cf       	rjmp	.-242    	; 0xc8c <_ZN9NeoPixels4initEv+0x46>

00000d7e <_ZN9NeoPixels13RainbowEffectEv.part.2>:
		m_tmrs[0] = m_cfg.m_sustain;
		m_tmrs[1] = 0;
		memset(m_arry,0,sizeof(m_arry));
	}

void NeoPixels::RainbowEffect()
     d7e:	8f 92       	push	r8
     d80:	9f 92       	push	r9
     d82:	af 92       	push	r10
     d84:	bf 92       	push	r11
     d86:	cf 92       	push	r12
     d88:	df 92       	push	r13
     d8a:	ef 92       	push	r14
     d8c:	ff 92       	push	r15
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	00 d0       	rcall	.+0      	; 0xd98 <_ZN9NeoPixels13RainbowEffectEv.part.2+0x1a>
     d98:	1f 92       	push	r1
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	6c 01       	movw	r12, r24
	{
		m_tmrs[0]--;
		if(m_tmrs[0] == 0)
			{
			for(size_t i=0;i<m_cfg.m_pixels;i++)
     da0:	dc 01       	movw	r26, r24
     da2:	6d 91       	ld	r22, X+
     da4:	7c 91       	ld	r23, X
     da6:	61 15       	cp	r22, r1
     da8:	71 05       	cpc	r23, r1
     daa:	09 f4       	brne	.+2      	; 0xdae <_ZN9NeoPixels13RainbowEffectEv.part.2+0x30>
     dac:	3e c0       	rjmp	.+124    	; 0xe2a <_ZN9NeoPixels13RainbowEffectEv.part.2+0xac>
     dae:	4c 01       	movw	r8, r24
     db0:	99 e3       	ldi	r25, 0x39	; 57
     db2:	89 0e       	add	r8, r25
     db4:	91 1c       	adc	r9, r1
     db6:	74 01       	movw	r14, r8
     db8:	00 e0       	ldi	r16, 0x00	; 0
     dba:	10 e0       	ldi	r17, 0x00	; 0
     dbc:	d6 01       	movw	r26, r12
     dbe:	a3 52       	subi	r26, 0x23	; 35
     dc0:	bf 4f       	sbci	r27, 0xFF	; 255
     dc2:	5d 01       	movw	r10, r26
				{
					m_arry[i] = Wheel((byte)((i+m_tmrs[1])&0xff));
     dc4:	f5 01       	movw	r30, r10
     dc6:	60 81       	ld	r22, Z
     dc8:	60 0f       	add	r22, r16
     dca:	ce 01       	movw	r24, r28
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	04 dd       	rcall	.-1528   	; 0x7d8 <_Z5Wheelh>
     dd0:	be 01       	movw	r22, r28
     dd2:	6f 5f       	subi	r22, 0xFF	; 255
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255
     dd6:	c7 01       	movw	r24, r14
     dd8:	e5 de       	rcall	.-566    	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
     dda:	0f 5f       	subi	r16, 0xFF	; 255
     ddc:	1f 4f       	sbci	r17, 0xFF	; 255
void NeoPixels::RainbowEffect()
	{
		m_tmrs[0]--;
		if(m_tmrs[0] == 0)
			{
			for(size_t i=0;i<m_cfg.m_pixels;i++)
     dde:	d6 01       	movw	r26, r12
     de0:	6d 91       	ld	r22, X+
     de2:	7c 91       	ld	r23, X
     de4:	b3 e0       	ldi	r27, 0x03	; 3
     de6:	eb 0e       	add	r14, r27
     de8:	f1 1c       	adc	r15, r1
     dea:	06 17       	cp	r16, r22
     dec:	17 07       	cpc	r17, r23
     dee:	50 f3       	brcs	.-44     	; 0xdc4 <_ZN9NeoPixels13RainbowEffectEv.part.2+0x46>
     df0:	f5 01       	movw	r30, r10
     df2:	80 81       	ld	r24, Z
				{
					m_arry[i] = Wheel((byte)((i+m_tmrs[1])&0xff));
				}
			m_tmrs[1]++;
     df4:	8f 5f       	subi	r24, 0xFF	; 255
     df6:	80 83       	st	Z, r24
     df8:	f6 01       	movw	r30, r12
     dfa:	e4 52       	subi	r30, 0x24	; 36
			m_tmrs[0] = m_cfg.m_sustain;
     dfc:	ff 4f       	sbci	r31, 0xFF	; 255
     dfe:	d6 01       	movw	r26, r12
     e00:	14 96       	adiw	r26, 0x04	; 4
     e02:	8c 91       	ld	r24, X
     e04:	80 83       	st	Z, r24
     e06:	c4 01       	movw	r24, r8
     e08:	c2 dc       	rcall	.-1660   	; 0x78e <_Z10sendPixelsP13NeoPixelColorj>
			sendPixels(m_arry,m_cfg.m_pixels);
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
			}
	}
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	ff 90       	pop	r15
     e1a:	ef 90       	pop	r14
     e1c:	df 90       	pop	r13
     e1e:	cf 90       	pop	r12
     e20:	bf 90       	pop	r11
     e22:	af 90       	pop	r10
     e24:	9f 90       	pop	r9
     e26:	8f 90       	pop	r8
     e28:	08 95       	ret
     e2a:	fc 01       	movw	r30, r24
     e2c:	f9 96       	adiw	r30, 0x39	; 57
     e2e:	4f 01       	movw	r8, r30
     e30:	83 52       	subi	r24, 0x23	; 35
     e32:	9f 4f       	sbci	r25, 0xFF	; 255
     e34:	5c 01       	movw	r10, r24
     e36:	dc cf       	rjmp	.-72     	; 0xdf0 <_ZN9NeoPixels13RainbowEffectEv.part.2+0x72>

00000e38 <_ZN9NeoPixels9SetConfigER9NeoConfig>:
		if (millis() > m_timer)
			Update();
	}

void NeoPixels::SetConfig(NeoConfig &cfg)
	{
     e38:	cf 92       	push	r12
     e3a:	df 92       	push	r13
     e3c:	ef 92       	push	r14
     e3e:	ff 92       	push	r15
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	7c 01       	movw	r14, r24
     e4a:	eb 01       	movw	r28, r22
	// Set intensity based on scale of 0-255
	NeoPixelColor operator *(byte b);

	};

class NeoConfig
     e4c:	88 81       	ld	r24, Y
     e4e:	99 81       	ldd	r25, Y+1	; 0x01
     e50:	f7 01       	movw	r30, r14
     e52:	91 83       	std	Z+1, r25	; 0x01
     e54:	80 83       	st	Z, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	9b 81       	ldd	r25, Y+3	; 0x03
     e5a:	93 83       	std	Z+3, r25	; 0x03
     e5c:	82 83       	std	Z+2, r24	; 0x02
     e5e:	8c 81       	ldd	r24, Y+4	; 0x04
     e60:	9d 81       	ldd	r25, Y+5	; 0x05
     e62:	95 83       	std	Z+5, r25	; 0x05
     e64:	84 83       	std	Z+4, r24	; 0x04
     e66:	8e 81       	ldd	r24, Y+6	; 0x06
     e68:	9f 81       	ldd	r25, Y+7	; 0x07
     e6a:	97 83       	std	Z+7, r25	; 0x07
     e6c:	86 83       	std	Z+6, r24	; 0x06
     e6e:	88 85       	ldd	r24, Y+8	; 0x08
     e70:	99 85       	ldd	r25, Y+9	; 0x09
     e72:	91 87       	std	Z+9, r25	; 0x09
     e74:	80 87       	std	Z+8, r24	; 0x08
     e76:	8a 85       	ldd	r24, Y+10	; 0x0a
     e78:	82 87       	std	Z+10, r24	; 0x0a
     e7a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e7c:	83 87       	std	Z+11, r24	; 0x0b
     e7e:	8c 85       	ldd	r24, Y+12	; 0x0c
     e80:	84 87       	std	Z+12, r24	; 0x0c
     e82:	8d 85       	ldd	r24, Y+13	; 0x0d
     e84:	85 87       	std	Z+13, r24	; 0x0d
     e86:	8e 85       	ldd	r24, Y+14	; 0x0e
     e88:	86 87       	std	Z+14, r24	; 0x0e
     e8a:	87 01       	movw	r16, r14
     e8c:	01 5f       	subi	r16, 0xF1	; 241
     e8e:	1f 4f       	sbci	r17, 0xFF	; 255
     e90:	2f 96       	adiw	r28, 0x0f	; 15
     e92:	67 01       	movw	r12, r14
     e94:	fd e2       	ldi	r31, 0x2D	; 45
     e96:	cf 0e       	add	r12, r31
     e98:	d1 1c       	adc	r13, r1
     e9a:	be 01       	movw	r22, r28
     e9c:	c8 01       	movw	r24, r16
     e9e:	82 de       	rcall	.-764    	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
     ea0:	0d 5f       	subi	r16, 0xFD	; 253
     ea2:	1f 4f       	sbci	r17, 0xFF	; 255
     ea4:	23 96       	adiw	r28, 0x03	; 3
     ea6:	0c 15       	cp	r16, r12
     ea8:	1d 05       	cpc	r17, r13
     eaa:	b9 f7       	brne	.-18     	; 0xe9a <_ZN9NeoPixels9SetConfigER9NeoConfig+0x62>
     eac:	c7 01       	movw	r24, r14
		m_cfg = cfg;
		init();
     eae:	df 91       	pop	r29
	}
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	ff 90       	pop	r15
     eb8:	ef 90       	pop	r14
     eba:	df 90       	pop	r13
     ebc:	cf 90       	pop	r12
     ebe:	c3 ce       	rjmp	.-634    	; 0xc46 <_ZN9NeoPixels4initEv>

00000ec0 <_ZN13NeoPixelColormlEh>:
		setBlue(r.getBlue());
		return *this;
	}

NeoPixelColor NeoPixelColor::operator *(byte b)
	{
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	1f 92       	push	r1
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	8c 01       	movw	r16, r24
		NeoPixelColor ret = *this;
     ed0:	49 83       	std	Y+1, r20	; 0x01
     ed2:	4e de       	rcall	.-868    	; 0xb70 <_ZN13NeoPixelColorC1ERKS_>
     ed4:	80 91 12 01 	lds	r24, 0x0112

NeoColorOrder NeoPixelColor::m_color_order = RGB;

byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
     ed8:	49 81       	ldd	r20, Y+1	; 0x01
     eda:	d8 01       	movw	r26, r16
	}

NeoPixelColor NeoPixelColor::operator *(byte b)
	{
		NeoPixelColor ret = *this;
		unsigned int x = ret.getRed();
     edc:	81 30       	cpi	r24, 0x01	; 1

NeoColorOrder NeoPixelColor::m_color_order = RGB;

byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
     ede:	81 f5       	brne	.+96     	; 0xf40 <_ZN13NeoPixelColormlEh+0x80>
     ee0:	11 96       	adiw	r26, 0x01	; 1
	}

NeoPixelColor NeoPixelColor::operator *(byte b)
	{
		NeoPixelColor ret = *this;
		unsigned int x = ret.getRed();
     ee2:	6c 91       	ld	r22, X
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	24 2f       	mov	r18, r20
		x *= b;
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	c9 01       	movw	r24, r18
     eec:	0e 94 6f 10 	call	0x20de	; 0x20de <__mulhi3>
     ef0:	ef ef       	ldi	r30, 0xFF	; 255
		x /= 255;
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	bf 01       	movw	r22, r30
     ef6:	0e 94 80 10 	call	0x2100	; 0x2100 <__udivmodhi4>
     efa:	d8 01       	movw	r26, r16
void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[1] = v;
     efc:	11 96       	adiw	r26, 0x01	; 1
     efe:	6c 93       	st	X, r22
     f00:	11 97       	sbiw	r26, 0x01	; 1
     f02:	4c 91       	ld	r20, X
		x /= 255;
		if(x > 255)
			x = 255;
		ret.setRed(x);

		x = ret.getGreen();
     f04:	64 2f       	mov	r22, r20
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	c9 01       	movw	r24, r18
		x *= b;
     f0a:	0e 94 6f 10 	call	0x20de	; 0x20de <__mulhi3>
     f0e:	bf 01       	movw	r22, r30
		x /= 255;
     f10:	0e 94 80 10 	call	0x2100	; 0x2100 <__udivmodhi4>
     f14:	f8 01       	movw	r30, r16
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     f16:	60 83       	st	Z, r22
     f18:	d8 01       	movw	r26, r16
		x /= 255;
		if(x > 255)
			x = 255;
		ret.setGreen(x);

		x = ret.getBlue();
     f1a:	12 96       	adiw	r26, 0x02	; 2
     f1c:	6c 91       	ld	r22, X
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	c9 01       	movw	r24, r18
		x *= b;
     f22:	0e 94 6f 10 	call	0x20de	; 0x20de <__mulhi3>
     f26:	6f ef       	ldi	r22, 0xFF	; 255
		x /= 255;
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	0e 94 80 10 	call	0x2100	; 0x2100 <__udivmodhi4>
     f2e:	f8 01       	movw	r30, r16
		if(x > 255)
			x = 255;
		ret.setBlue(x);
     f30:	62 83       	std	Z+2, r22	; 0x02
     f32:	c8 01       	movw	r24, r16

		return ret;
	}
     f34:	0f 90       	pop	r0
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	08 95       	ret
     f40:	6c 91       	ld	r22, X
	}

NeoPixelColor NeoPixelColor::operator *(byte b)
	{
		NeoPixelColor ret = *this;
		unsigned int x = ret.getRed();
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	24 2f       	mov	r18, r20
		x *= b;
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	c9 01       	movw	r24, r18
     f4a:	0e 94 6f 10 	call	0x20de	; 0x20de <__mulhi3>
     f4e:	ef ef       	ldi	r30, 0xFF	; 255
		x /= 255;
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	bf 01       	movw	r22, r30
     f54:	0e 94 80 10 	call	0x2100	; 0x2100 <__udivmodhi4>
     f58:	d8 01       	movw	r26, r16
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     f5a:	6c 93       	st	X, r22
     f5c:	11 96       	adiw	r26, 0x01	; 1
		x /= 255;
		if(x > 255)
			x = 255;
		ret.setRed(x);

		x = ret.getGreen();
     f5e:	4c 91       	ld	r20, X
     f60:	64 2f       	mov	r22, r20
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	c9 01       	movw	r24, r18
		x *= b;
     f66:	0e 94 6f 10 	call	0x20de	; 0x20de <__mulhi3>
     f6a:	bf 01       	movw	r22, r30
		x /= 255;
     f6c:	0e 94 80 10 	call	0x2100	; 0x2100 <__udivmodhi4>
     f70:	f8 01       	movw	r30, r16
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     f72:	61 83       	std	Z+1, r22	; 0x01
     f74:	d1 cf       	rjmp	.-94     	; 0xf18 <_ZN13NeoPixelColormlEh+0x58>

00000f76 <_ZN9NeoPixels19TwinkleSingleEffectEv>:
		NeoPixelState ret = (NeoPixelState)(x & 0x03);
		return ret;
	}

void NeoPixels::TwinkleSingleEffect()
	{
     f76:	2f 92       	push	r2
     f78:	3f 92       	push	r3
     f7a:	4f 92       	push	r4
     f7c:	5f 92       	push	r5
     f7e:	6f 92       	push	r6
     f80:	7f 92       	push	r7
     f82:	8f 92       	push	r8
     f84:	9f 92       	push	r9
     f86:	af 92       	push	r10
     f88:	bf 92       	push	r11
     f8a:	cf 92       	push	r12
     f8c:	df 92       	push	r13
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	27 97       	sbiw	r28, 0x07	; 7
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	5c 01       	movw	r10, r24
		size_t idx;
		for(idx = 0;idx < m_cfg.m_pixels;idx++)
     fac:	fc 01       	movw	r30, r24
     fae:	60 81       	ld	r22, Z
     fb0:	71 81       	ldd	r23, Z+1	; 0x01
     fb2:	61 15       	cp	r22, r1
     fb4:	71 05       	cpc	r23, r1
     fb6:	09 f4       	brne	.+2      	; 0xfba <_ZN9NeoPixels19TwinkleSingleEffectEv+0x44>
     fb8:	f2 c0       	rjmp	.+484    	; 0x119e <_ZN9NeoPixels19TwinkleSingleEffectEv+0x228>
     fba:	6c 01       	movw	r12, r24
     fbc:	fc ed       	ldi	r31, 0xDC	; 220
     fbe:	cf 0e       	add	r12, r31
     fc0:	d1 1c       	adc	r13, r1
     fc2:	c9 96       	adiw	r24, 0x39	; 57
     fc4:	9f 83       	std	Y+7, r25	; 0x07
     fc6:	8e 83       	std	Y+6, r24	; 0x06
     fc8:	3c 01       	movw	r6, r24
     fca:	e1 2c       	mov	r14, r1
     fcc:	f1 2c       	mov	r15, r1
     fce:	f5 01       	movw	r30, r10
     fd0:	e0 5f       	subi	r30, 0xF0	; 240
     fd2:	fe 4f       	sbci	r31, 0xFE	; 254
     fd4:	fd 83       	std	Y+5, r31	; 0x05
     fd6:	ec 83       	std	Y+4, r30	; 0x04
								//m_arry[idx] = NeoPixelColor(255,0,0) * (byte)(x);
								m_arry[idx] = m_cfg.m_pattern[0] * (byte)(x);
								}
							break;
						case Sustaining:
							m_arry[idx] = m_cfg.m_pattern[0];
     fd8:	15 01       	movw	r2, r10
     fda:	ff e0       	ldi	r31, 0x0F	; 15
     fdc:	2f 0e       	add	r2, r31
     fde:	31 1c       	adc	r3, r1

void NeoPixels::SetPixelState(size_t idx,NeoPixelState state)
	{
		byte x = ((byte)state) & 0x03;
		byte mask = 0x03;
		x <<= 2 * (idx % 4);
     fe0:	23 e0       	ldi	r18, 0x03	; 3
     fe2:	82 2e       	mov	r8, r18
     fe4:	91 2c       	mov	r9, r1
     fe6:	1f c0       	rjmp	.+62     	; 0x1026 <_ZN9NeoPixels19TwinkleSingleEffectEv+0xb0>
		for(idx = 0;idx < m_cfg.m_pixels;idx++)
			{
				NeoPixelState ps = GetPixelState(idx);
				if(m_tmrs[idx] == 0)
					{
						switch(ps)
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	09 f4       	brne	.+2      	; 0xfee <_ZN9NeoPixels19TwinkleSingleEffectEv+0x78>
     fec:	c5 c0       	rjmp	.+394    	; 0x1178 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x202>
     fee:	83 30       	cpi	r24, 0x03	; 3
     ff0:	09 f4       	brne	.+2      	; 0xff4 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x7e>
     ff2:	a3 c0       	rjmp	.+326    	; 0x113a <_ZN9NeoPixels19TwinkleSingleEffectEv+0x1c4>
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	09 f4       	brne	.+2      	; 0xffa <_ZN9NeoPixels19TwinkleSingleEffectEv+0x84>
     ff8:	82 c0       	rjmp	.+260    	; 0x10fe <_ZN9NeoPixels19TwinkleSingleEffectEv+0x188>
							{
						case TurnedOff:
							if(m_active > 0)
     ffa:	ec 81       	ldd	r30, Y+4	; 0x04
     ffc:	fd 81       	ldd	r31, Y+5	; 0x05
     ffe:	80 81       	ld	r24, Z
    1000:	91 81       	ldd	r25, Z+1	; 0x01
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	19 f0       	breq	.+6      	; 0x100c <_ZN9NeoPixels19TwinkleSingleEffectEv+0x96>
								m_active--;
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	91 83       	std	Z+1, r25	; 0x01
    100a:	80 83       	st	Z, r24
	}

void NeoPixels::TwinkleSingleEffect()
	{
		size_t idx;
		for(idx = 0;idx < m_cfg.m_pixels;idx++)
    100c:	ff ef       	ldi	r31, 0xFF	; 255
    100e:	ef 1a       	sub	r14, r31
    1010:	ff 0a       	sbc	r15, r31
    1012:	8f ef       	ldi	r24, 0xFF	; 255
    1014:	c8 1a       	sub	r12, r24
    1016:	d8 0a       	sbc	r13, r24
    1018:	93 e0       	ldi	r25, 0x03	; 3
    101a:	69 0e       	add	r6, r25
    101c:	71 1c       	adc	r7, r1
    101e:	e6 16       	cp	r14, r22
    1020:	f7 06       	cpc	r15, r23
    1022:	08 f0       	brcs	.+2      	; 0x1026 <_ZN9NeoPixels19TwinkleSingleEffectEv+0xb0>
    1024:	c3 c0       	rjmp	.+390    	; 0x11ac <_ZN9NeoPixels19TwinkleSingleEffectEv+0x236>
		m_status_bits[idx/4] = v;
	}

NeoPixelState NeoPixels::GetPixelState(size_t idx)
	{
		byte x = m_status_bits[idx/4];
    1026:	87 01       	movw	r16, r14
    1028:	16 95       	lsr	r17
    102a:	07 95       	ror	r16
    102c:	16 95       	lsr	r17
    102e:	07 95       	ror	r16
    1030:	0a 0d       	add	r16, r10
    1032:	1b 1d       	adc	r17, r11
    1034:	01 53       	subi	r16, 0x31	; 49
    1036:	1f 4f       	sbci	r17, 0xFF	; 255
    1038:	f8 01       	movw	r30, r16
    103a:	20 81       	ld	r18, Z
		x >>= 2*(idx % 4);
    103c:	27 01       	movw	r4, r14
    103e:	f3 e0       	ldi	r31, 0x03	; 3
    1040:	4f 22       	and	r4, r31
    1042:	55 24       	eor	r5, r5
    1044:	44 0c       	add	r4, r4
    1046:	55 1c       	adc	r5, r5
    1048:	82 2f       	mov	r24, r18
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	04 2c       	mov	r0, r4
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <_ZN9NeoPixels19TwinkleSingleEffectEv+0xde>
    1050:	95 95       	asr	r25
    1052:	87 95       	ror	r24
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <_ZN9NeoPixels19TwinkleSingleEffectEv+0xda>
		NeoPixelState ret = (NeoPixelState)(x & 0x03);
    1058:	83 70       	andi	r24, 0x03	; 3
	{
		size_t idx;
		for(idx = 0;idx < m_cfg.m_pixels;idx++)
			{
				NeoPixelState ps = GetPixelState(idx);
				if(m_tmrs[idx] == 0)
    105a:	f6 01       	movw	r30, r12
    105c:	40 81       	ld	r20, Z
    105e:	44 23       	and	r20, r20
    1060:	19 f2       	breq	.-122    	; 0xfe8 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x72>
							break;
							}
					}
				else
					{
						m_tmrs[idx]--;
    1062:	41 50       	subi	r20, 0x01	; 1
    1064:	f6 01       	movw	r30, r12
    1066:	40 83       	st	Z, r20
						size_t x;
						switch(ps)
    1068:	82 30       	cpi	r24, 0x02	; 2
    106a:	41 f0       	breq	.+16     	; 0x107c <_ZN9NeoPixels19TwinkleSingleEffectEv+0x106>
							break;
						case Sustaining:
							m_arry[idx] = m_cfg.m_pattern[0];
							break;
						case Decaying:
							if(m_cfg.m_decay > 0)
    106c:	f5 01       	movw	r30, r10
					}
				else
					{
						m_tmrs[idx]--;
						size_t x;
						switch(ps)
    106e:	83 30       	cpi	r24, 0x03	; 3
    1070:	69 f1       	breq	.+90     	; 0x10cc <_ZN9NeoPixels19TwinkleSingleEffectEv+0x156>
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	51 f0       	breq	.+20     	; 0x108a <_ZN9NeoPixels19TwinkleSingleEffectEv+0x114>
    1076:	60 81       	ld	r22, Z
    1078:	71 81       	ldd	r23, Z+1	; 0x01
    107a:	c8 cf       	rjmp	.-112    	; 0x100c <_ZN9NeoPixels19TwinkleSingleEffectEv+0x96>
								//m_arry[idx] = NeoPixelColor(255,0,0) * (byte)(x);
								m_arry[idx] = m_cfg.m_pattern[0] * (byte)(x);
								}
							break;
						case Sustaining:
							m_arry[idx] = m_cfg.m_pattern[0];
    107c:	b1 01       	movw	r22, r2
    107e:	c3 01       	movw	r24, r6
    1080:	91 dd       	rcall	.-1246   	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
    1082:	f5 01       	movw	r30, r10
    1084:	60 81       	ld	r22, Z
    1086:	71 81       	ldd	r23, Z+1	; 0x01
    1088:	c1 cf       	rjmp	.-126    	; 0x100c <_ZN9NeoPixels19TwinkleSingleEffectEv+0x96>
							break;
    108a:	22 81       	ldd	r18, Z+2	; 0x02
						switch(ps)
							{
						case TurnedOff:
							break;
						case Attacking:
							if(m_cfg.m_attack > 0)
    108c:	33 81       	ldd	r19, Z+3	; 0x03
    108e:	21 15       	cp	r18, r1
    1090:	31 05       	cpc	r19, r1
    1092:	89 f3       	breq	.-30     	; 0x1076 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x100>
    1094:	80 e0       	ldi	r24, 0x00	; 0
								{
								x = 256 / m_cfg.m_attack;
    1096:	91 e0       	ldi	r25, 0x01	; 1
    1098:	b9 01       	movw	r22, r18
    109a:	0e 94 80 10 	call	0x2100	; 0x2100 <__udivmodhi4>
    109e:	c9 01       	movw	r24, r18
								x *= m_cfg.m_attack - m_tmrs[idx];
    10a0:	84 1b       	sub	r24, r20
    10a2:	91 09       	sbc	r25, r1
    10a4:	0e 94 6f 10 	call	0x20de	; 0x20de <__mulhi3>
    10a8:	8f 3f       	cpi	r24, 0xFF	; 255
    10aa:	91 05       	cpc	r25, r1
    10ac:	19 f0       	breq	.+6      	; 0x10b4 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x13e>
    10ae:	10 f0       	brcs	.+4      	; 0x10b4 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x13e>
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	48 2f       	mov	r20, r24
								if(x > 255)
									x = 255;
								//m_arry[idx] = NeoPixelColor(255,0,0) * (byte)(x);
								m_arry[idx] = m_cfg.m_pattern[0] * (byte)(x);
    10b6:	b1 01       	movw	r22, r2
								x *= m_cfg.m_decay - m_tmrs[idx];
								x = 256 - x;
								if(x > 255)
									x = 255;
								//m_arry[idx] = NeoPixelColor(0,255,0) * (byte)(x);
								m_arry[idx] = m_cfg.m_pattern[0] * (byte)(x);
    10b8:	ce 01       	movw	r24, r28
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	01 df       	rcall	.-510    	; 0xec0 <_ZN13NeoPixelColormlEh>
    10be:	be 01       	movw	r22, r28
    10c0:	6f 5f       	subi	r22, 0xFF	; 255
    10c2:	7f 4f       	sbci	r23, 0xFF	; 255
    10c4:	c3 01       	movw	r24, r6
    10c6:	6e dd       	rcall	.-1316   	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
    10c8:	f5 01       	movw	r30, r10
    10ca:	d5 cf       	rjmp	.-86     	; 0x1076 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x100>
    10cc:	26 81       	ldd	r18, Z+6	; 0x06
    10ce:	37 81       	ldd	r19, Z+7	; 0x07
    10d0:	21 15       	cp	r18, r1
							break;
						case Sustaining:
							m_arry[idx] = m_cfg.m_pattern[0];
							break;
						case Decaying:
							if(m_cfg.m_decay > 0)
    10d2:	31 05       	cpc	r19, r1
    10d4:	81 f2       	breq	.-96     	; 0x1076 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x100>
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	b9 01       	movw	r22, r18
								{
								x = 256 / m_cfg.m_decay;
    10dc:	0e 94 80 10 	call	0x2100	; 0x2100 <__udivmodhi4>
    10e0:	c9 01       	movw	r24, r18
    10e2:	84 1b       	sub	r24, r20
    10e4:	91 09       	sbc	r25, r1
								x *= m_cfg.m_decay - m_tmrs[idx];
    10e6:	fb d7       	rcall	.+4086   	; 0x20de <__mulhi3>
    10e8:	40 e0       	ldi	r20, 0x00	; 0
    10ea:	51 e0       	ldi	r21, 0x01	; 1
    10ec:	48 1b       	sub	r20, r24
    10ee:	59 0b       	sbc	r21, r25
    10f0:	4f 3f       	cpi	r20, 0xFF	; 255
    10f2:	51 05       	cpc	r21, r1
    10f4:	01 f3       	breq	.-64     	; 0x10b6 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x140>
    10f6:	f8 f2       	brcs	.-66     	; 0x10b6 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x140>
    10f8:	4f ef       	ldi	r20, 0xFF	; 255
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	dc cf       	rjmp	.-72     	; 0x10b6 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x140>
    10fe:	b1 01       	movw	r22, r2
    1100:	c3 01       	movw	r24, r6
    1102:	50 dd       	rcall	.-1376   	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
    1104:	c4 01       	movw	r24, r8
						case TurnedOff:
							if(m_active > 0)
								m_active--;
							break;
						case Attacking:
							m_arry[idx] = m_cfg.m_pattern[0];
    1106:	04 2c       	mov	r0, r4
    1108:	01 c0       	rjmp	.+2      	; 0x110c <_ZN9NeoPixels19TwinkleSingleEffectEv+0x196>
    110a:	88 0f       	add	r24, r24
    110c:	0a 94       	dec	r0
void NeoPixels::SetPixelState(size_t idx,NeoPixelState state)
	{
		byte x = ((byte)state) & 0x03;
		byte mask = 0x03;
		x <<= 2 * (idx % 4);
		mask <<= 2 * (idx % 4);
    110e:	ea f7       	brpl	.-6      	; 0x110a <_ZN9NeoPixels19TwinkleSingleEffectEv+0x194>
    1110:	80 95       	com	r24
    1112:	f8 01       	movw	r30, r16
    1114:	90 81       	ld	r25, Z
    1116:	28 2f       	mov	r18, r24
    1118:	29 23       	and	r18, r25
		mask = ~mask;
    111a:	82 e0       	ldi	r24, 0x02	; 2
		byte v = m_status_bits[idx/4] & mask;
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	01 c0       	rjmp	.+2      	; 0x1122 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x1ac>
    1120:	88 0f       	add	r24, r24
    1122:	4a 94       	dec	r4

void NeoPixels::SetPixelState(size_t idx,NeoPixelState state)
	{
		byte x = ((byte)state) & 0x03;
		byte mask = 0x03;
		x <<= 2 * (idx % 4);
    1124:	ea f7       	brpl	.-6      	; 0x1120 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x1aa>
    1126:	82 2b       	or	r24, r18
    1128:	80 83       	st	Z, r24
    112a:	f5 01       	movw	r30, r10
    112c:	84 81       	ldd	r24, Z+4	; 0x04
    112e:	f6 01       	movw	r30, r12
		mask <<= 2 * (idx % 4);
		mask = ~mask;
		byte v = m_status_bits[idx/4] & mask;
		v |= x;
    1130:	80 83       	st	Z, r24
		m_status_bits[idx/4] = v;
    1132:	f5 01       	movw	r30, r10
							break;
						case Attacking:
							m_arry[idx] = m_cfg.m_pattern[0];
							SetPixelState(idx,Sustaining);
							//m_tmrs[idx] = RandomOffset(m_sustain);
							m_tmrs[idx] = (byte) m_cfg.m_sustain > 255 ? 255 : m_cfg.m_sustain;
    1134:	60 81       	ld	r22, Z
    1136:	71 81       	ldd	r23, Z+1	; 0x01
    1138:	69 cf       	rjmp	.-302    	; 0x100c <_ZN9NeoPixels19TwinkleSingleEffectEv+0x96>
    113a:	c4 01       	movw	r24, r8
    113c:	01 c0       	rjmp	.+2      	; 0x1140 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x1ca>
    113e:	88 0f       	add	r24, r24
    1140:	4a 94       	dec	r4
							break;
    1142:	ea f7       	brpl	.-6      	; 0x113e <_ZN9NeoPixels19TwinkleSingleEffectEv+0x1c8>
void NeoPixels::SetPixelState(size_t idx,NeoPixelState state)
	{
		byte x = ((byte)state) & 0x03;
		byte mask = 0x03;
		x <<= 2 * (idx % 4);
		mask <<= 2 * (idx % 4);
    1144:	80 95       	com	r24
    1146:	28 23       	and	r18, r24
    1148:	f8 01       	movw	r30, r16
    114a:	20 83       	st	Z, r18
    114c:	80 91 12 01 	lds	r24, 0x0112
		mask = ~mask;
		byte v = m_status_bits[idx/4] & mask;
    1150:	81 30       	cpi	r24, 0x01	; 1
		v |= x;
		m_status_bits[idx/4] = v;
    1152:	11 f5       	brne	.+68     	; 0x1198 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x222>
    1154:	1a 82       	std	Y+2, r1	; 0x02



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
    1156:	19 82       	std	Y+1, r1	; 0x01
    1158:	1b 82       	std	Y+3, r1	; 0x03
    115a:	be 01       	movw	r22, r28
    115c:	6f 5f       	subi	r22, 0xFF	; 255
			{
		case GRB:
			colors[1] = v;
    115e:	7f 4f       	sbci	r23, 0xFF	; 255
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
    1160:	c3 01       	movw	r24, r6
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
    1162:	20 dd       	rcall	.-1472   	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
							SetPixelState(idx,Decaying);
							m_tmrs[idx] = (byte) m_cfg.m_decay > 255 ? 255 : m_cfg.m_decay;
							break;
						case Decaying:
							SetPixelState(idx,TurnedOff);
							m_arry[idx] = NeoPixelColor(0,0,0);
    1164:	f5 01       	movw	r30, r10
    1166:	80 85       	ldd	r24, Z+8	; 0x08
    1168:	91 85       	ldd	r25, Z+9	; 0x09
    116a:	27 da       	rcall	.-2994   	; 0x5ba <_Z12RandomOffsetj>
    116c:	f6 01       	movw	r30, r12
    116e:	80 83       	st	Z, r24
							m_tmrs[idx] = RandomOffset(m_cfg.m_off);//(byte) m_off > 255 ? 255 : m_off;
    1170:	f5 01       	movw	r30, r10
    1172:	60 81       	ld	r22, Z
    1174:	71 81       	ldd	r23, Z+1	; 0x01
    1176:	4a cf       	rjmp	.-364    	; 0x100c <_ZN9NeoPixels19TwinkleSingleEffectEv+0x96>
    1178:	c4 01       	movw	r24, r8
    117a:	01 c0       	rjmp	.+2      	; 0x117e <_ZN9NeoPixels19TwinkleSingleEffectEv+0x208>
    117c:	88 0f       	add	r24, r24
    117e:	4a 94       	dec	r4
    1180:	ea f7       	brpl	.-6      	; 0x117c <_ZN9NeoPixels19TwinkleSingleEffectEv+0x206>
    1182:	28 2b       	or	r18, r24
							break;
    1184:	f8 01       	movw	r30, r16

void NeoPixels::SetPixelState(size_t idx,NeoPixelState state)
	{
		byte x = ((byte)state) & 0x03;
		byte mask = 0x03;
		x <<= 2 * (idx % 4);
    1186:	20 83       	st	Z, r18
    1188:	f5 01       	movw	r30, r10
    118a:	86 81       	ldd	r24, Z+6	; 0x06
    118c:	f6 01       	movw	r30, r12
    118e:	80 83       	st	Z, r24
		mask <<= 2 * (idx % 4);
		mask = ~mask;
		byte v = m_status_bits[idx/4] & mask;
		v |= x;
    1190:	f5 01       	movw	r30, r10
		m_status_bits[idx/4] = v;
    1192:	60 81       	ld	r22, Z
    1194:	71 81       	ldd	r23, Z+1	; 0x01
							//m_tmrs[idx] = RandomOffset(m_sustain);
							m_tmrs[idx] = (byte) m_cfg.m_sustain > 255 ? 255 : m_cfg.m_sustain;
							break;
						case Sustaining:
							SetPixelState(idx,Decaying);
							m_tmrs[idx] = (byte) m_cfg.m_decay > 255 ? 255 : m_cfg.m_decay;
    1196:	3a cf       	rjmp	.-396    	; 0x100c <_ZN9NeoPixels19TwinkleSingleEffectEv+0x96>
    1198:	19 82       	std	Y+1, r1	; 0x01
    119a:	1a 82       	std	Y+2, r1	; 0x02
    119c:	dd cf       	rjmp	.-70     	; 0x1158 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x1e2>
    119e:	80 5f       	subi	r24, 0xF0	; 240
    11a0:	9e 4f       	sbci	r25, 0xFE	; 254
    11a2:	9d 83       	std	Y+5, r25	; 0x05
							break;
    11a4:	8c 83       	std	Y+4, r24	; 0x04
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
    11a6:	f9 96       	adiw	r30, 0x39	; 57
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
    11a8:	ff 83       	std	Y+7, r31	; 0x07
    11aa:	ee 83       	std	Y+6, r30	; 0x06
    11ac:	ec 81       	ldd	r30, Y+4	; 0x04
    11ae:	fd 81       	ldd	r31, Y+5	; 0x05
    11b0:	20 81       	ld	r18, Z
    11b2:	31 81       	ldd	r19, Z+1	; 0x01
    11b4:	f5 01       	movw	r30, r10
    11b6:	e2 5f       	subi	r30, 0xF2	; 242
    11b8:	fe 4f       	sbci	r31, 0xFE	; 254
								}
							break;
							}
					}
			}
		if(m_active < m_lit)
    11ba:	80 81       	ld	r24, Z
    11bc:	91 81       	ldd	r25, Z+1	; 0x01
    11be:	28 17       	cp	r18, r24
    11c0:	39 07       	cpc	r19, r25
    11c2:	40 f4       	brcc	.+16     	; 0x11d4 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x25e>
    11c4:	bc 01       	movw	r22, r24
    11c6:	62 1b       	sub	r22, r18
    11c8:	73 0b       	sbc	r23, r19
    11ca:	c5 01       	movw	r24, r10
    11cc:	9d db       	rcall	.-2246   	; 0x908 <_ZN9NeoPixels16StartRandomPixelEj>
    11ce:	f5 01       	movw	r30, r10
    11d0:	60 81       	ld	r22, Z
			StartRandomPixel(m_lit - m_active);
    11d2:	71 81       	ldd	r23, Z+1	; 0x01
    11d4:	8e 81       	ldd	r24, Y+6	; 0x06
    11d6:	9f 81       	ldd	r25, Y+7	; 0x07
    11d8:	da da       	rcall	.-2636   	; 0x78e <_Z10sendPixelsP13NeoPixelColorj>
    11da:	27 96       	adiw	r28, 0x07	; 7
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
		sendPixels(m_arry,m_cfg.m_pixels);
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
	}
    11ec:	0f 91       	pop	r16
    11ee:	ff 90       	pop	r15
    11f0:	ef 90       	pop	r14
    11f2:	df 90       	pop	r13
    11f4:	cf 90       	pop	r12
    11f6:	bf 90       	pop	r11
    11f8:	af 90       	pop	r10
    11fa:	9f 90       	pop	r9
    11fc:	8f 90       	pop	r8
    11fe:	7f 90       	pop	r7
    1200:	6f 90       	pop	r6
    1202:	5f 90       	pop	r5
    1204:	4f 90       	pop	r4
    1206:	3f 90       	pop	r3
    1208:	2f 90       	pop	r2
    120a:	08 95       	ret

0000120c <_ZN9NeoPixels6UpdateEv>:

void NeoPixels::Update()
	{
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	ec 01       	movw	r28, r24

		switch (m_cfg.m_effect)
    1216:	9a 85       	ldd	r25, Y+10	; 0x0a
    1218:	93 30       	cpi	r25, 0x03	; 3
    121a:	b9 f1       	breq	.+110    	; 0x128a <_ZN9NeoPixels6UpdateEv+0x7e>
    121c:	48 f0       	brcs	.+18     	; 0x1230 <_ZN9NeoPixels6UpdateEv+0x24>
    121e:	95 30       	cpi	r25, 0x05	; 5
    1220:	71 f0       	breq	.+28     	; 0x123e <_ZN9NeoPixels6UpdateEv+0x32>
    1222:	b0 f1       	brcs	.+108    	; 0x1290 <_ZN9NeoPixels6UpdateEv+0x84>
    1224:	96 30       	cpi	r25, 0x06	; 6
    1226:	11 f5       	brne	.+68     	; 0x126c <_ZN9NeoPixels6UpdateEv+0x60>
			{
		case effectCandle:
			CandleEffect();
    1228:	ce 01       	movw	r24, r28
    122a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_ZN9NeoPixels12CandleEffectEv>
			break;
    122e:	0f c0       	rjmp	.+30     	; 0x124e <_ZN9NeoPixels6UpdateEv+0x42>
	}

void NeoPixels::Update()
	{

		switch (m_cfg.m_effect)
    1230:	91 30       	cpi	r25, 0x01	; 1
    1232:	71 f1       	breq	.+92     	; 0x1290 <_ZN9NeoPixels6UpdateEv+0x84>
    1234:	92 30       	cpi	r25, 0x02	; 2
    1236:	d1 f4       	brne	.+52     	; 0x126c <_ZN9NeoPixels6UpdateEv+0x60>
			{
		case effectCandle:
			CandleEffect();
			break;
		case effectTwinkle:
			TwinkleSingleEffect();
    1238:	ce 01       	movw	r24, r28
    123a:	9d de       	rcall	.-710    	; 0xf76 <_ZN9NeoPixels19TwinkleSingleEffectEv>
    123c:	08 c0       	rjmp	.+16     	; 0x124e <_ZN9NeoPixels6UpdateEv+0x42>
			break;
    123e:	fe 01       	movw	r30, r28
		memset(m_arry,0,sizeof(m_arry));
	}

void NeoPixels::RainbowEffect()
	{
		m_tmrs[0]--;
    1240:	e4 52       	subi	r30, 0x24	; 36
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	80 81       	ld	r24, Z
    1246:	81 50       	subi	r24, 0x01	; 1
    1248:	80 83       	st	Z, r24
    124a:	88 23       	and	r24, r24
		if(m_tmrs[0] == 0)
    124c:	81 f1       	breq	.+96     	; 0x12ae <_ZN9NeoPixels6UpdateEv+0xa2>
    124e:	b3 d6       	rcall	.+3430   	; 0x1fb6 <_Z6millisv>
				sendPixels(m_arry,PIXELS);
				m_tmrs[1] = 0;
				}
			break;
			}
		m_timer = millis() + 10;
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	0a 96       	adiw	r24, 0x0a	; 10
    1256:	a1 1d       	adc	r26, r1
    1258:	b1 1d       	adc	r27, r1
    125a:	8d a7       	std	Y+45, r24	; 0x2d
    125c:	9e a7       	std	Y+46, r25	; 0x2e
    125e:	af a7       	std	Y+47, r26	; 0x2f
    1260:	b8 ab       	std	Y+48, r27	; 0x30
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
	}
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	08 95       	ret
    126c:	26 e9       	ldi	r18, 0x96	; 150
    126e:	ce 01       	movw	r24, r28
			break;
		case effectOff:
		default:
			//if(m_tmrs[1])
				{
				memset(m_arry,0,sizeof(m_arry));
    1270:	c9 96       	adiw	r24, 0x39	; 57
    1272:	fc 01       	movw	r30, r24
    1274:	11 92       	st	Z+, r1
    1276:	2a 95       	dec	r18
    1278:	e9 f7       	brne	.-6      	; 0x1274 <_ZN9NeoPixels6UpdateEv+0x68>
    127a:	62 e3       	ldi	r22, 0x32	; 50
    127c:	70 e0       	ldi	r23, 0x00	; 0
				sendPixels(m_arry,PIXELS);
    127e:	87 da       	rcall	.-2802   	; 0x78e <_Z10sendPixelsP13NeoPixelColorj>
    1280:	fe 01       	movw	r30, r28
    1282:	e3 52       	subi	r30, 0x23	; 35
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
				m_tmrs[1] = 0;
    1286:	10 82       	st	Z, r1
    1288:	e2 cf       	rjmp	.-60     	; 0x124e <_ZN9NeoPixels6UpdateEv+0x42>
    128a:	ce 01       	movw	r24, r28
    128c:	a5 d8       	rcall	.-3766   	; 0x3d8 <_ZN9NeoPixels18TheaterChaseEffectEv>
				}
			break;
    128e:	df cf       	rjmp	.-66     	; 0x124e <_ZN9NeoPixels6UpdateEv+0x42>
			break;
		case effectTwinkle:
			TwinkleSingleEffect();
			break;
		case effectTheaterChase:
			TheaterChaseEffect();
    1290:	8e 01       	movw	r16, r28
    1292:	03 52       	subi	r16, 0x23	; 35
    1294:	1f 4f       	sbci	r17, 0xFF	; 255
			break;
    1296:	f8 01       	movw	r30, r16
		case effectRainbow:
			RainbowEffect();
			break;
		case effectAllOn:
		case effectPattern:
			if(m_tmrs[1])
    1298:	80 81       	ld	r24, Z
    129a:	88 23       	and	r24, r24
    129c:	c1 f2       	breq	.-80     	; 0x124e <_ZN9NeoPixels6UpdateEv+0x42>
    129e:	62 e3       	ldi	r22, 0x32	; 50
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	ce 01       	movw	r24, r28
    12a4:	c9 96       	adiw	r24, 0x39	; 57
				{
				sendPixels(m_arry,PIXELS);
    12a6:	73 da       	rcall	.-2842   	; 0x78e <_Z10sendPixelsP13NeoPixelColorj>
    12a8:	f8 01       	movw	r30, r16
    12aa:	10 82       	st	Z, r1
    12ac:	d0 cf       	rjmp	.-96     	; 0x124e <_ZN9NeoPixels6UpdateEv+0x42>
    12ae:	ce 01       	movw	r24, r28
    12b0:	66 dd       	rcall	.-1332   	; 0xd7e <_ZN9NeoPixels13RainbowEffectEv.part.2>
				m_tmrs[1] = 0;
    12b2:	cd cf       	rjmp	.-102    	; 0x124e <_ZN9NeoPixels6UpdateEv+0x42>

000012b4 <_ZN9NeoPixels5beginEv>:
		spacing = 2;
		memset(m_arry,0,sizeof(m_arry));
	}

void NeoPixels::begin()
	{
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	ec 01       	movw	r28, r24
		m_timer = millis();
    12ba:	7d d6       	rcall	.+3322   	; 0x1fb6 <_Z6millisv>
    12bc:	6d a7       	std	Y+45, r22	; 0x2d
    12be:	7e a7       	std	Y+46, r23	; 0x2e
    12c0:	8f a7       	std	Y+47, r24	; 0x2f
    12c2:	98 ab       	std	Y+48, r25	; 0x30
    12c4:	ce 01       	movw	r24, r28
		init();
    12c6:	bf dc       	rcall	.-1666   	; 0xc46 <_ZN9NeoPixels4initEv>
    12c8:	ce 01       	movw	r24, r28
    12ca:	df 91       	pop	r29
		Update();
    12cc:	cf 91       	pop	r28
	}
    12ce:	9e cf       	rjmp	.-196    	; 0x120c <_ZN9NeoPixels6UpdateEv>

000012d0 <_ZN9NeoPixels4TaskEv>:
			sendPixels(m_arry,m_cfg.m_pixels);
			}
	}

void NeoPixels::Task()
	{
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	ec 01       	movw	r28, r24
		if (millis() > m_timer)
    12da:	6d d6       	rcall	.+3290   	; 0x1fb6 <_Z6millisv>
    12dc:	0d a5       	ldd	r16, Y+45	; 0x2d
    12de:	1e a5       	ldd	r17, Y+46	; 0x2e
    12e0:	2f a5       	ldd	r18, Y+47	; 0x2f
    12e2:	38 a9       	ldd	r19, Y+48	; 0x30
    12e4:	06 17       	cp	r16, r22
    12e6:	17 07       	cpc	r17, r23
    12e8:	28 07       	cpc	r18, r24
    12ea:	39 07       	cpc	r19, r25
    12ec:	28 f0       	brcs	.+10     	; 0x12f8 <_ZN9NeoPixels4TaskEv+0x28>
    12ee:	df 91       	pop	r29
			Update();
	}
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	08 95       	ret
    12f8:	ce 01       	movw	r24, r28
	}

void NeoPixels::Task()
	{
		if (millis() > m_timer)
			Update();
    12fa:	df 91       	pop	r29
	}
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	84 cf       	rjmp	.-248    	; 0x120c <_ZN9NeoPixels6UpdateEv>

00001304 <_ZN6MyMqttC1Ev>:
#define debug_P(x)
#define debug(x)
#define debug_char(x)
#endif

MyMqtt::MyMqtt()
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	ec 01       	movw	r28, r24
    130a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN9NeoConfigC1Ev>
	{
		m_flags.reg = 0;
    130e:	1d a6       	std	Y+45, r1	; 0x2d
		cmdbuf = localbuf;
    1310:	ce 01       	movw	r24, r28
    1312:	c2 96       	adiw	r24, 0x32	; 50
    1314:	9f a7       	std	Y+47, r25	; 0x2f
    1316:	8e a7       	std	Y+46, r24	; 0x2e
		cmdbuflen = sizeof(localbuf);
    1318:	80 e4       	ldi	r24, 0x40	; 64
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	99 ab       	std	Y+49, r25	; 0x31
    131e:	88 ab       	std	Y+48, r24	; 0x30
		cmd_idx = 0;
    1320:	ce 58       	subi	r28, 0x8E	; 142
    1322:	df 4f       	sbci	r29, 0xFF	; 255
    1324:	19 82       	std	Y+1, r1	; 0x01
    1326:	18 82       	st	Y, r1

	}
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	08 95       	ret

0000132e <_ZN6MyMqtt9SetBufferEPcj>:

void MyMqtt::SetBuffer(char *buf,size_t len)
	{
    132e:	fc 01       	movw	r30, r24
		if(buf == NULL)
    1330:	61 15       	cp	r22, r1
    1332:	71 05       	cpc	r23, r1
    1334:	69 f0       	breq	.+26     	; 0x1350 <_ZN6MyMqtt9SetBufferEPcj+0x22>
				cmdbuf = localbuf;
				cmdbuflen = sizeof(localbuf);
			}
		else
			{
				cmdbuf = buf;
    1336:	77 a7       	std	Z+47, r23	; 0x2f
    1338:	66 a7       	std	Z+46, r22	; 0x2e
				cmdbuflen = len;
    133a:	40 ab       	std	Z+48, r20	; 0x30
    133c:	51 ab       	std	Z+49, r21	; 0x31
    133e:	cb 01       	movw	r24, r22
			}
		cmd_idx = 0;
    1340:	ee 58       	subi	r30, 0x8E	; 142
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	11 82       	std	Z+1, r1	; 0x01
    1346:	10 82       	st	Z, r1
		memset(cmdbuf,0,cmdbuflen);
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	0c 94 14 12 	jmp	0x2428	; 0x2428 <memset>

void MyMqtt::SetBuffer(char *buf,size_t len)
	{
		if(buf == NULL)
			{
				cmdbuf = localbuf;
    1350:	c2 96       	adiw	r24, 0x32	; 50
    1352:	97 a7       	std	Z+47, r25	; 0x2f
    1354:	86 a7       	std	Z+46, r24	; 0x2e
				cmdbuflen = sizeof(localbuf);
    1356:	20 e4       	ldi	r18, 0x40	; 64
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	31 ab       	std	Z+49, r19	; 0x31
    135c:	20 ab       	std	Z+48, r18	; 0x30
    135e:	40 e4       	ldi	r20, 0x40	; 64
    1360:	50 e0       	ldi	r21, 0x00	; 0
		else
			{
				cmdbuf = buf;
				cmdbuflen = len;
			}
		cmd_idx = 0;
    1362:	ee 58       	subi	r30, 0x8E	; 142
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	11 82       	std	Z+1, r1	; 0x01
    1368:	10 82       	st	Z, r1
		memset(cmdbuf,0,cmdbuflen);
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	0c 94 14 12 	jmp	0x2428	; 0x2428 <memset>

00001372 <_ZN6MyMqtt7OnTopicEPcS0_>:
//					}
//			}
//	}

void MyMqtt::OnTopic(char *topic, char *payload)
	{
    1372:	8f 92       	push	r8
    1374:	9f 92       	push	r9
    1376:	af 92       	push	r10
    1378:	bf 92       	push	r11
    137a:	cf 92       	push	r12
    137c:	df 92       	push	r13
    137e:	ef 92       	push	r14
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	00 d0       	rcall	.+0      	; 0x138c <_ZN6MyMqtt7OnTopicEPcS0_+0x1a>
    138c:	00 d0       	rcall	.+0      	; 0x138e <_ZN6MyMqtt7OnTopicEPcS0_+0x1c>
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	8c 01       	movw	r16, r24
    1394:	6b 01       	movw	r12, r22
    1396:	7a 01       	movw	r14, r20
		USBSerial.SendStr_P(DarkYellow,PSTR("'\n"));
#endif
		byte r, g, b;
		uint16_t v;
		char *p = payload;
		m_flags.flags.update = 1;
    1398:	fc 01       	movw	r30, r24
    139a:	95 a5       	ldd	r25, Z+45	; 0x2d
    139c:	90 62       	ori	r25, 0x20	; 32
    139e:	95 a7       	std	Z+45, r25	; 0x2d
		if (strstr_P((char *) topic, PSTR("pcolor")) != NULL)
    13a0:	6b ec       	ldi	r22, 0xCB	; 203
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	c6 01       	movw	r24, r12
    13a6:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <strstr_P>
    13aa:	89 2b       	or	r24, r25
    13ac:	89 f1       	breq	.+98     	; 0x1410 <_ZN6MyMqtt7OnTopicEPcS0_+0x9e>
			{
				r = atoi(p) & 0xff;
    13ae:	c7 01       	movw	r24, r14
    13b0:	e2 d7       	rcall	.+4036   	; 0x2376 <atoi>
    13b2:	d8 2e       	mov	r13, r24
    13b4:	6c e2       	ldi	r22, 0x2C	; 44
				p = strchr(p, ',') + 1;
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	c7 01       	movw	r24, r14
    13ba:	0e 94 1b 12 	call	0x2436	; 0x2436 <strchr>
    13be:	01 96       	adiw	r24, 0x01	; 1
    13c0:	7c 01       	movw	r14, r24
    13c2:	d9 d7       	rcall	.+4018   	; 0x2376 <atoi>
				g = atoi(p) & 0xff;
    13c4:	48 2f       	mov	r20, r24
    13c6:	6c e2       	ldi	r22, 0x2C	; 44
    13c8:	70 e0       	ldi	r23, 0x00	; 0
				p = strchr(p, ',') + 1;
    13ca:	c7 01       	movw	r24, r14
    13cc:	4c 83       	std	Y+4, r20	; 0x04
    13ce:	0e 94 1b 12 	call	0x2436	; 0x2436 <strchr>
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	d0 d7       	rcall	.+4000   	; 0x2376 <atoi>
				b = atoi(p) & 0xff;
    13d6:	28 2f       	mov	r18, r24
    13d8:	4c 81       	ldd	r20, Y+4	; 0x04
    13da:	6d 2d       	mov	r22, r13
				m_cfg.m_pattern[0] = NeoPixelColor(r, g, b);
    13dc:	ce 01       	movw	r24, r28
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	ba db       	rcall	.-2188   	; 0xb56 <_ZN13NeoPixelColorC1Ehhh>
    13e2:	be 01       	movw	r22, r28
    13e4:	6f 5f       	subi	r22, 0xFF	; 255
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255
    13e8:	c8 01       	movw	r24, r16
    13ea:	0f 96       	adiw	r24, 0x0f	; 15
    13ec:	db db       	rcall	.-2122   	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	df 91       	pop	r29
			}
		else
			{
			}

	}
    13f8:	cf 91       	pop	r28
    13fa:	1f 91       	pop	r17
    13fc:	0f 91       	pop	r16
    13fe:	ff 90       	pop	r15
    1400:	ef 90       	pop	r14
    1402:	df 90       	pop	r13
    1404:	cf 90       	pop	r12
    1406:	bf 90       	pop	r11
    1408:	af 90       	pop	r10
    140a:	9f 90       	pop	r9
    140c:	8f 90       	pop	r8
    140e:	08 95       	ret
    1410:	64 ec       	ldi	r22, 0xC4	; 196
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	c6 01       	movw	r24, r12
    1416:	e5 d7       	rcall	.+4042   	; 0x23e2 <strstr_P>
    1418:	89 2b       	or	r24, r25
				g = atoi(p) & 0xff;
				p = strchr(p, ',') + 1;
				b = atoi(p) & 0xff;
				m_cfg.m_pattern[0] = NeoPixelColor(r, g, b);
			}
		else if (strstr_P((char *) topic, PSTR("scolor")) != NULL)
    141a:	01 f1       	breq	.+64     	; 0x145c <_ZN6MyMqtt7OnTopicEPcS0_+0xea>
    141c:	c7 01       	movw	r24, r14
    141e:	ab d7       	rcall	.+3926   	; 0x2376 <atoi>
    1420:	d8 2e       	mov	r13, r24
    1422:	6c e2       	ldi	r22, 0x2C	; 44
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	c7 01       	movw	r24, r14
			{
				r = atoi(p) & 0xff;
    1428:	0e 94 1b 12 	call	0x2436	; 0x2436 <strchr>
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	7c 01       	movw	r14, r24
				p = strchr(p, ',') + 1;
    1430:	a2 d7       	rcall	.+3908   	; 0x2376 <atoi>
    1432:	48 2f       	mov	r20, r24
    1434:	6c e2       	ldi	r22, 0x2C	; 44
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	c7 01       	movw	r24, r14
    143a:	4c 83       	std	Y+4, r20	; 0x04
    143c:	fc d7       	rcall	.+4088   	; 0x2436 <strchr>
				g = atoi(p) & 0xff;
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	9a d7       	rcall	.+3892   	; 0x2376 <atoi>
    1442:	28 2f       	mov	r18, r24
				p = strchr(p, ',') + 1;
    1444:	4c 81       	ldd	r20, Y+4	; 0x04
    1446:	6d 2d       	mov	r22, r13
    1448:	ce 01       	movw	r24, r28
    144a:	01 96       	adiw	r24, 0x01	; 1
    144c:	84 db       	rcall	.-2296   	; 0xb56 <_ZN13NeoPixelColorC1Ehhh>
    144e:	be 01       	movw	r22, r28
				b = atoi(p) & 0xff;
    1450:	6f 5f       	subi	r22, 0xFF	; 255
    1452:	7f 4f       	sbci	r23, 0xFF	; 255
    1454:	c8 01       	movw	r24, r16
				m_cfg.m_pattern[1] = NeoPixelColor(r, g, b);
    1456:	42 96       	adiw	r24, 0x12	; 18
    1458:	a5 db       	rcall	.-2230   	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
    145a:	c9 cf       	rjmp	.-110    	; 0x13ee <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    145c:	6d eb       	ldi	r22, 0xBD	; 189
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	c6 01       	movw	r24, r12
    1462:	bf d7       	rcall	.+3966   	; 0x23e2 <strstr_P>
    1464:	89 2b       	or	r24, r25
    1466:	f9 f0       	breq	.+62     	; 0x14a6 <_ZN6MyMqtt7OnTopicEPcS0_+0x134>
    1468:	c7 01       	movw	r24, r14
    146a:	85 d7       	rcall	.+3850   	; 0x2376 <atoi>
    146c:	d8 2e       	mov	r13, r24
    146e:	6c e2       	ldi	r22, 0x2C	; 44
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	c7 01       	movw	r24, r14
			}
		else if (strstr_P((char *) topic, PSTR("tcolor")) != NULL)
    1474:	e0 d7       	rcall	.+4032   	; 0x2436 <strchr>
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	7c 01       	movw	r14, r24
    147a:	7d d7       	rcall	.+3834   	; 0x2376 <atoi>
    147c:	48 2f       	mov	r20, r24
    147e:	6c e2       	ldi	r22, 0x2C	; 44
    1480:	70 e0       	ldi	r23, 0x00	; 0
			{
				r = atoi(p) & 0xff;
    1482:	c7 01       	movw	r24, r14
    1484:	4c 83       	std	Y+4, r20	; 0x04
    1486:	d7 d7       	rcall	.+4014   	; 0x2436 <strchr>
    1488:	01 96       	adiw	r24, 0x01	; 1
				p = strchr(p, ',') + 1;
    148a:	75 d7       	rcall	.+3818   	; 0x2376 <atoi>
    148c:	28 2f       	mov	r18, r24
    148e:	4c 81       	ldd	r20, Y+4	; 0x04
    1490:	6d 2d       	mov	r22, r13
    1492:	ce 01       	movw	r24, r28
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	5f db       	rcall	.-2370   	; 0xb56 <_ZN13NeoPixelColorC1Ehhh>
				g = atoi(p) & 0xff;
    1498:	be 01       	movw	r22, r28
    149a:	6f 5f       	subi	r22, 0xFF	; 255
    149c:	7f 4f       	sbci	r23, 0xFF	; 255
				p = strchr(p, ',') + 1;
    149e:	c8 01       	movw	r24, r16
    14a0:	45 96       	adiw	r24, 0x15	; 21
    14a2:	80 db       	rcall	.-2304   	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
    14a4:	a4 cf       	rjmp	.-184    	; 0x13ee <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    14a6:	67 eb       	ldi	r22, 0xB7	; 183
    14a8:	70 e0       	ldi	r23, 0x00	; 0
				b = atoi(p) & 0xff;
    14aa:	c6 01       	movw	r24, r12
    14ac:	9a d7       	rcall	.+3892   	; 0x23e2 <strstr_P>
    14ae:	89 2b       	or	r24, r25
				m_cfg.m_pattern[2] = NeoPixelColor(r, g, b);
    14b0:	29 f0       	breq	.+10     	; 0x14bc <_ZN6MyMqtt7OnTopicEPcS0_+0x14a>
    14b2:	c7 01       	movw	r24, r14
    14b4:	60 d7       	rcall	.+3776   	; 0x2376 <atoi>
    14b6:	80 93 12 01 	sts	0x0112, r24
    14ba:	99 cf       	rjmp	.-206    	; 0x13ee <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    14bc:	61 eb       	ldi	r22, 0xB1	; 177
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	c6 01       	movw	r24, r12
    14c2:	8f d7       	rcall	.+3870   	; 0x23e2 <strstr_P>
    14c4:	89 2b       	or	r24, r25
    14c6:	29 f0       	breq	.+10     	; 0x14d2 <_ZN6MyMqtt7OnTopicEPcS0_+0x160>
    14c8:	c7 01       	movw	r24, r14
    14ca:	55 d7       	rcall	.+3754   	; 0x2376 <atoi>
    14cc:	f8 01       	movw	r30, r16
			}
		else if (strstr_P((char *) topic, PSTR("order")) != NULL)
    14ce:	83 87       	std	Z+11, r24	; 0x0b
    14d0:	8e cf       	rjmp	.-228    	; 0x13ee <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    14d2:	6a ea       	ldi	r22, 0xAA	; 170
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	c6 01       	movw	r24, r12
    14d8:	84 d7       	rcall	.+3848   	; 0x23e2 <strstr_P>
    14da:	89 2b       	or	r24, r25
			{
				v = atoi(p);
    14dc:	29 f0       	breq	.+10     	; 0x14e8 <_ZN6MyMqtt7OnTopicEPcS0_+0x176>
    14de:	c7 01       	movw	r24, r14
    14e0:	4a d7       	rcall	.+3732   	; 0x2376 <atoi>
				NeoPixelColor::m_color_order = (NeoColorOrder)v;
    14e2:	f8 01       	movw	r30, r16
    14e4:	82 87       	std	Z+10, r24	; 0x0a
    14e6:	83 cf       	rjmp	.-250    	; 0x13ee <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
			}
		else if (strstr_P((char *) topic, PSTR("cmode")) != NULL)
    14e8:	64 ea       	ldi	r22, 0xA4	; 164
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	c6 01       	movw	r24, r12
    14ee:	79 d7       	rcall	.+3826   	; 0x23e2 <strstr_P>
    14f0:	89 2b       	or	r24, r25
    14f2:	29 f0       	breq	.+10     	; 0x14fe <_ZN6MyMqtt7OnTopicEPcS0_+0x18c>
    14f4:	c7 01       	movw	r24, r14
			{
				v = atoi(p);
    14f6:	3f d7       	rcall	.+3710   	; 0x2376 <atoi>
    14f8:	f8 01       	movw	r30, r16
    14fa:	84 87       	std	Z+12, r24	; 0x0c
				m_cfg.m_colormode = (NeoPixelColorMode) (v);
    14fc:	78 cf       	rjmp	.-272    	; 0x13ee <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    14fe:	6c e9       	ldi	r22, 0x9C	; 156
    1500:	70 e0       	ldi	r23, 0x00	; 0
			}
		else if (strstr_P((char *) topic, PSTR("effect")) != NULL)
    1502:	c6 01       	movw	r24, r12
    1504:	6e d7       	rcall	.+3804   	; 0x23e2 <strstr_P>
    1506:	89 2b       	or	r24, r25
    1508:	29 f0       	breq	.+10     	; 0x1514 <_ZN6MyMqtt7OnTopicEPcS0_+0x1a2>
    150a:	c7 01       	movw	r24, r14
    150c:	34 d7       	rcall	.+3688   	; 0x2376 <atoi>
    150e:	f8 01       	movw	r30, r16
			{
				v = atoi(p);
    1510:	85 87       	std	Z+13, r24	; 0x0d
    1512:	6d cf       	rjmp	.-294    	; 0x13ee <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    1514:	65 e9       	ldi	r22, 0x95	; 149
				m_cfg.m_effect = (NeoPixelEffect) v;
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	c6 01       	movw	r24, r12
    151a:	63 d7       	rcall	.+3782   	; 0x23e2 <strstr_P>
			}
		else if (strstr_P((char *) topic, PSTR("smode")) != NULL)
    151c:	89 2b       	or	r24, r25
    151e:	31 f0       	breq	.+12     	; 0x152c <_ZN6MyMqtt7OnTopicEPcS0_+0x1ba>
    1520:	c7 01       	movw	r24, r14
    1522:	29 d7       	rcall	.+3666   	; 0x2376 <atoi>
    1524:	f8 01       	movw	r30, r16
    1526:	93 83       	std	Z+3, r25	; 0x03
    1528:	82 83       	std	Z+2, r24	; 0x02
			{
				v = atoi(p);
    152a:	61 cf       	rjmp	.-318    	; 0x13ee <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    152c:	6d e8       	ldi	r22, 0x8D	; 141
    152e:	70 e0       	ldi	r23, 0x00	; 0
				m_cfg.m_strandmode = (NeoPixelStrandMode) (v);
    1530:	c6 01       	movw	r24, r12
    1532:	57 d7       	rcall	.+3758   	; 0x23e2 <strstr_P>
    1534:	89 2b       	or	r24, r25
			}
		else if (strstr_P((char *) topic, PSTR("density")) != NULL)
    1536:	31 f0       	breq	.+12     	; 0x1544 <_ZN6MyMqtt7OnTopicEPcS0_+0x1d2>
    1538:	c7 01       	movw	r24, r14
    153a:	1d d7       	rcall	.+3642   	; 0x2376 <atoi>
    153c:	f8 01       	movw	r30, r16
    153e:	95 83       	std	Z+5, r25	; 0x05
    1540:	84 83       	std	Z+4, r24	; 0x04
    1542:	55 cf       	rjmp	.-342    	; 0x13ee <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
			{
				v = atoi(p);
    1544:	67 e8       	ldi	r22, 0x87	; 135
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	c6 01       	movw	r24, r12
				m_cfg.m_density = v;
    154a:	4b d7       	rcall	.+3734   	; 0x23e2 <strstr_P>
    154c:	89 2b       	or	r24, r25
    154e:	31 f0       	breq	.+12     	; 0x155c <_ZN6MyMqtt7OnTopicEPcS0_+0x1ea>
			}
		else if (strstr_P((char *) topic, PSTR("attack")) != NULL)
    1550:	c7 01       	movw	r24, r14
    1552:	11 d7       	rcall	.+3618   	; 0x2376 <atoi>
    1554:	f8 01       	movw	r30, r16
    1556:	97 83       	std	Z+7, r25	; 0x07
    1558:	86 83       	std	Z+6, r24	; 0x06
    155a:	49 cf       	rjmp	.-366    	; 0x13ee <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    155c:	63 e8       	ldi	r22, 0x83	; 131
			{
				v = atoi(p);
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	c6 01       	movw	r24, r12
    1562:	3f d7       	rcall	.+3710   	; 0x23e2 <strstr_P>
				m_cfg.m_attack = v;
    1564:	89 2b       	or	r24, r25
    1566:	31 f0       	breq	.+12     	; 0x1574 <_ZN6MyMqtt7OnTopicEPcS0_+0x202>
    1568:	c7 01       	movw	r24, r14
    156a:	05 d7       	rcall	.+3594   	; 0x2376 <atoi>
			}
		else if (strstr_P((char *) topic, PSTR("sustain")) != NULL)
    156c:	f8 01       	movw	r30, r16
    156e:	91 87       	std	Z+9, r25	; 0x09
    1570:	80 87       	std	Z+8, r24	; 0x08
    1572:	3d cf       	rjmp	.-390    	; 0x13ee <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    1574:	6c e7       	ldi	r22, 0x7C	; 124
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	c6 01       	movw	r24, r12
			{
				v = atoi(p);
    157a:	33 d7       	rcall	.+3686   	; 0x23e2 <strstr_P>
    157c:	89 2b       	or	r24, r25
    157e:	31 f0       	breq	.+12     	; 0x158c <_ZN6MyMqtt7OnTopicEPcS0_+0x21a>
				m_cfg.m_sustain = v;
    1580:	c7 01       	movw	r24, r14
    1582:	f9 d6       	rcall	.+3570   	; 0x2376 <atoi>
    1584:	f8 01       	movw	r30, r16
    1586:	91 83       	std	Z+1, r25	; 0x01
			}
		else if (strstr_P((char *) topic, PSTR("decay")) != NULL)
    1588:	80 83       	st	Z, r24
    158a:	31 cf       	rjmp	.-414    	; 0x13ee <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    158c:	64 e7       	ldi	r22, 0x74	; 116
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	c6 01       	movw	r24, r12
    1592:	27 d7       	rcall	.+3662   	; 0x23e2 <strstr_P>
    1594:	89 2b       	or	r24, r25
			{
				v = atoi(p);
    1596:	09 f4       	brne	.+2      	; 0x159a <_ZN6MyMqtt7OnTopicEPcS0_+0x228>
    1598:	2a cf       	rjmp	.-428    	; 0x13ee <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    159a:	68 01       	movw	r12, r16
				m_cfg.m_decay = v;
    159c:	ff e0       	ldi	r31, 0x0F	; 15
    159e:	cf 0e       	add	r12, r31
    15a0:	d1 1c       	adc	r13, r1
    15a2:	91 2c       	mov	r9, r1
			}
		else if (strstr_P((char *) topic, PSTR("off")) != NULL)
    15a4:	e1 14       	cp	r14, r1
    15a6:	f1 04       	cpc	r15, r1
    15a8:	09 f4       	brne	.+2      	; 0x15ac <_ZN6MyMqtt7OnTopicEPcS0_+0x23a>
    15aa:	39 c0       	rjmp	.+114    	; 0x161e <_ZN6MyMqtt7OnTopicEPcS0_+0x2ac>
    15ac:	c7 01       	movw	r24, r14
    15ae:	e3 d6       	rcall	.+3526   	; 0x2376 <atoi>
    15b0:	88 2e       	mov	r8, r24
			{
				v = atoi(p);
    15b2:	6c e2       	ldi	r22, 0x2C	; 44
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	c7 01       	movw	r24, r14
				m_cfg.m_off = v;
    15b8:	3e d7       	rcall	.+3708   	; 0x2436 <strchr>
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	99 f1       	breq	.+102    	; 0x1624 <_ZN6MyMqtt7OnTopicEPcS0_+0x2b2>
    15be:	7c 01       	movw	r14, r24
			}
		else if (strstr_P((char *) topic, PSTR("pixels")) != NULL)
    15c0:	2f ef       	ldi	r18, 0xFF	; 255
    15c2:	e2 1a       	sub	r14, r18
    15c4:	f2 0a       	sbc	r15, r18
    15c6:	c7 01       	movw	r24, r14
    15c8:	d6 d6       	rcall	.+3500   	; 0x2376 <atoi>
    15ca:	b8 2e       	mov	r11, r24
    15cc:	6c e2       	ldi	r22, 0x2C	; 44
			{
				v = atoi(p);
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	c7 01       	movw	r24, r14
    15d2:	31 d7       	rcall	.+3682   	; 0x2436 <strchr>
				m_cfg.m_pixels = v;
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	31 f1       	breq	.+76     	; 0x1624 <_ZN6MyMqtt7OnTopicEPcS0_+0x2b2>
    15d8:	7c 01       	movw	r14, r24
    15da:	ef ef       	ldi	r30, 0xFF	; 255
			}
		else if (strstr_P((char *) topic, PSTR("pattern")) != NULL)
    15dc:	ee 1a       	sub	r14, r30
    15de:	fe 0a       	sbc	r15, r30
    15e0:	c7 01       	movw	r24, r14
    15e2:	c9 d6       	rcall	.+3474   	; 0x2376 <atoi>
    15e4:	a8 2e       	mov	r10, r24
    15e6:	6c e2       	ldi	r22, 0x2C	; 44
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	c7 01       	movw	r24, r14
    15ec:	24 d7       	rcall	.+3656   	; 0x2436 <strchr>
    15ee:	7c 01       	movw	r14, r24
    15f0:	89 2b       	or	r24, r25
    15f2:	19 f0       	breq	.+6      	; 0x15fa <_ZN6MyMqtt7OnTopicEPcS0_+0x288>
    15f4:	ff ef       	ldi	r31, 0xFF	; 255
			{
				byte idx = 0;
				while(idx < sizeof(m_cfg.m_pattern)/sizeof(m_cfg.m_pattern[0]) && p != NULL)
    15f6:	ef 1a       	sub	r14, r31
    15f8:	ff 0a       	sbc	r15, r31
    15fa:	2a 2d       	mov	r18, r10
    15fc:	4b 2d       	mov	r20, r11
					{
					r = atoi(p) & 0xff;
    15fe:	68 2d       	mov	r22, r8
    1600:	ce 01       	movw	r24, r28
    1602:	01 96       	adiw	r24, 0x01	; 1
    1604:	a8 da       	rcall	.-2736   	; 0xb56 <_ZN13NeoPixelColorC1Ehhh>
					p = strchr(p, ',');
    1606:	be 01       	movw	r22, r28
    1608:	6f 5f       	subi	r22, 0xFF	; 255
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	c6 01       	movw	r24, r12
    160e:	ca da       	rcall	.-2668   	; 0xba4 <_ZN13NeoPixelColoraSERKS_>
					if(p != NULL)
    1610:	93 94       	inc	r9
    1612:	23 e0       	ldi	r18, 0x03	; 3
						{
							p++;
    1614:	c2 0e       	add	r12, r18
    1616:	d1 1c       	adc	r13, r1
    1618:	8a e0       	ldi	r24, 0x0A	; 10
    161a:	98 12       	cpse	r9, r24
							g = atoi(p) & 0xff;
    161c:	c3 cf       	rjmp	.-122    	; 0x15a4 <_ZN6MyMqtt7OnTopicEPcS0_+0x232>
    161e:	f8 01       	movw	r30, r16
    1620:	96 86       	std	Z+14, r9	; 0x0e
    1622:	e5 ce       	rjmp	.-566    	; 0x13ee <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
							p = strchr(p, ',');
    1624:	e1 2c       	mov	r14, r1
    1626:	f1 2c       	mov	r15, r1
    1628:	e8 cf       	rjmp	.-48     	; 0x15fa <_ZN6MyMqtt7OnTopicEPcS0_+0x288>

0000162a <_ZN6MyMqtt11CheckUpdateEv>:
			}

	}

void MyMqtt::CheckUpdate()
	{
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
		if(m_flags.flags.update != 0)
    162e:	fc 01       	movw	r30, r24
    1630:	25 a5       	ldd	r18, Z+45	; 0x2d
    1632:	25 ff       	sbrs	r18, 5
    1634:	08 c0       	rjmp	.+16     	; 0x1646 <_ZN6MyMqtt11CheckUpdateEv+0x1c>
    1636:	ec 01       	movw	r28, r24
			{
				neo.SetConfig(m_cfg);
    1638:	bc 01       	movw	r22, r24
    163a:	87 e8       	ldi	r24, 0x87	; 135
    163c:	91 e0       	ldi	r25, 0x01	; 1
    163e:	fc db       	rcall	.-2056   	; 0xe38 <_ZN9NeoPixels9SetConfigER9NeoConfig>
    1640:	8d a5       	ldd	r24, Y+45	; 0x2d
				m_flags.flags.update = 0;
    1642:	8f 7d       	andi	r24, 0xDF	; 223
    1644:	8d a7       	std	Y+45, r24	; 0x2d
    1646:	df 91       	pop	r29
			}
	}
    1648:	cf 91       	pop	r28
    164a:	08 95       	ret

0000164c <_ZN6MyMqtt5beginEv>:
		cmd_idx = 0;
		memset(cmdbuf,0,cmdbuflen);
	}

void MyMqtt::begin()
	{
    164c:	8f 92       	push	r8
    164e:	9f 92       	push	r9
    1650:	af 92       	push	r10
    1652:	bf 92       	push	r11
    1654:	df 92       	push	r13
    1656:	ef 92       	push	r14
    1658:	ff 92       	push	r15
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	8c 01       	movw	r16, r24
		sbi(E_RST_DDR, E_RST);
    1664:	50 9a       	sbi	0x0a, 0	; 10
		cbi(E_RST_PORT, E_RST);
    1666:	58 98       	cbi	0x0b, 0	; 11
		sbi(E_CH_PD_DDR, E_CH_PD);
    1668:	51 9a       	sbi	0x0a, 1	; 10
		cbi(E_CH_PD_PORT, E_CH_PD);
    166a:	59 98       	cbi	0x0b, 1	; 11
		sbi(E_RX_DDR, E_RX);
    166c:	52 9a       	sbi	0x0a, 2	; 10
		sbi(E_RX_PORT, E_RX);
    166e:	5a 9a       	sbi	0x0b, 2	; 11
		sbi(E_TX_DDR, E_TX);
    1670:	53 9a       	sbi	0x0a, 3	; 10
		sbi(E_TX_PORT, E_TX);
    1672:	5b 9a       	sbi	0x0b, 3	; 11
		delay(1000);
    1674:	68 ee       	ldi	r22, 0xE8	; 232
    1676:	73 e0       	ldi	r23, 0x03	; 3
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	ce d4       	rcall	.+2460   	; 0x201a <_Z5delaym>
    167e:	52 98       	cbi	0x0a, 2	; 10
		cbi(E_RX_DDR, E_RX);
    1680:	53 98       	cbi	0x0a, 3	; 10
		cbi(E_TX_DDR, E_TX);
    1682:	40 e0       	ldi	r20, 0x00	; 0
		Serial1.begin(115200);
    1684:	52 ec       	ldi	r21, 0xC2	; 194
    1686:	61 e0       	ldi	r22, 0x01	; 1
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	89 e9       	ldi	r24, 0x99	; 153
    168c:	92 e0       	ldi	r25, 0x02	; 2
    168e:	58 d3       	rcall	.+1712   	; 0x1d40 <_ZN9HWSerial15beginEm>
    1690:	59 9a       	sbi	0x0b, 1	; 11
    1692:	68 ee       	ldi	r22, 0xE8	; 232
		sbi(E_CH_PD_PORT, E_CH_PD);
    1694:	73 e0       	ldi	r23, 0x03	; 3
		delay(1000);
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	bf d4       	rcall	.+2430   	; 0x201a <_Z5delaym>
    169c:	58 9a       	sbi	0x0b, 0	; 11
    169e:	78 94       	sei
    16a0:	78 01       	movw	r14, r16
    16a2:	22 e7       	ldi	r18, 0x72	; 114
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    16a4:	e2 0e       	add	r14, r18
		sbi(E_RST_PORT, E_RST);
		GlobalInterruptEnable();

		cmd_idx = 0;
    16a6:	f1 1c       	adc	r15, r1
    16a8:	f7 01       	movw	r30, r14
    16aa:	11 82       	std	Z+1, r1	; 0x01
    16ac:	10 82       	st	Z, r1
    16ae:	f8 01       	movw	r30, r16
    16b0:	40 a9       	ldd	r20, Z+48	; 0x30
    16b2:	51 a9       	ldd	r21, Z+49	; 0x31
		memset(cmdbuf, 0, cmdbuflen);
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	86 a5       	ldd	r24, Z+46	; 0x2e
    16ba:	97 a5       	ldd	r25, Z+47	; 0x2f
    16bc:	b5 d6       	rcall	.+3434   	; 0x2428 <memset>
    16be:	7b d4       	rcall	.+2294   	; 0x1fb6 <_Z6millisv>
    16c0:	4b 01       	movw	r8, r22
    16c2:	5c 01       	movw	r10, r24
    16c4:	f8 eb       	ldi	r31, 0xB8	; 184
		unsigned long tmr = millis() + 3000;
    16c6:	8f 0e       	add	r8, r31
    16c8:	fb e0       	ldi	r31, 0x0B	; 11
    16ca:	9f 1e       	adc	r9, r31
    16cc:	a1 1c       	adc	r10, r1
    16ce:	b1 1c       	adc	r11, r1
    16d0:	89 e9       	ldi	r24, 0x99	; 153
    16d2:	92 e0       	ldi	r25, 0x02	; 2
    16d4:	9a d2       	rcall	.+1332   	; 0x1c0a <_ZN9HWSerial13getEv>
    16d6:	ec 01       	movw	r28, r24
    16d8:	d1 2c       	mov	r13, r1
		int c = Serial1.get();
    16da:	2e c0       	rjmp	.+92     	; 0x1738 <_ZN6MyMqtt5beginEv+0xec>
    16dc:	c3 35       	cpi	r28, 0x53	; 83
    16de:	d1 05       	cpc	r29, r1
    16e0:	29 f0       	breq	.+10     	; 0x16ec <_ZN6MyMqtt5beginEv+0xa0>
    16e2:	dd 20       	and	r13, r13
		bool startFill = false;
    16e4:	29 f1       	breq	.+74     	; 0x1730 <_ZN6MyMqtt5beginEv+0xe4>

		debug_P("begin\r\n");
		while (millis() < tmr)
    16e6:	1c 16       	cp	r1, r28
			{
#ifdef DO_USB
				USBSerial.StreamTask();
#endif
				if (c == 'S')
    16e8:	1d 06       	cpc	r1, r29
    16ea:	14 f5       	brge	.+68     	; 0x1730 <_ZN6MyMqtt5beginEv+0xe4>
    16ec:	ce 01       	movw	r24, r28
					startFill = true;

				if (startFill && c > 0 && (isprint(c) || isspace(c)))
    16ee:	62 d6       	rcall	.+3268   	; 0x23b4 <isprint>
    16f0:	89 2b       	or	r24, r25
    16f2:	21 f4       	brne	.+8      	; 0x16fc <_ZN6MyMqtt5beginEv+0xb0>
    16f4:	ce 01       	movw	r24, r28
    16f6:	64 d6       	rcall	.+3272   	; 0x23c0 <isspace>
    16f8:	89 2b       	or	r24, r25
    16fa:	c1 f0       	breq	.+48     	; 0x172c <_ZN6MyMqtt5beginEv+0xe0>
    16fc:	f8 01       	movw	r30, r16
    16fe:	26 a5       	ldd	r18, Z+46	; 0x2e
    1700:	37 a5       	ldd	r19, Z+47	; 0x2f
    1702:	f7 01       	movw	r30, r14
    1704:	80 81       	ld	r24, Z
    1706:	91 81       	ldd	r25, Z+1	; 0x01
    1708:	ac 01       	movw	r20, r24
    170a:	4f 5f       	subi	r20, 0xFF	; 255
					{
						cmdbuf[cmd_idx++] = c;
    170c:	5f 4f       	sbci	r21, 0xFF	; 255
    170e:	51 83       	std	Z+1, r21	; 0x01
    1710:	40 83       	st	Z, r20
    1712:	f9 01       	movw	r30, r18
    1714:	e8 0f       	add	r30, r24
    1716:	f9 1f       	adc	r31, r25
    1718:	c0 83       	st	Z, r28
    171a:	f8 01       	movw	r30, r16
    171c:	c6 a5       	ldd	r28, Z+46	; 0x2e
    171e:	d7 a5       	ldd	r29, Z+47	; 0x2f
    1720:	64 e3       	ldi	r22, 0x34	; 52
    1722:	71 e0       	ldi	r23, 0x01	; 1
    1724:	ce 01       	movw	r24, r28
    1726:	5d d6       	rcall	.+3258   	; 0x23e2 <strstr_P>
    1728:	89 2b       	or	r24, r25
						debug_char(c);
						if (strstr_P(cmdbuf, PSTR("System init done.\r\nReady\r\n")) != NULL)
    172a:	c1 f4       	brne	.+48     	; 0x175c <_ZN6MyMqtt5beginEv+0x110>
    172c:	dd 24       	eor	r13, r13
    172e:	d3 94       	inc	r13
    1730:	89 e9       	ldi	r24, 0x99	; 153
    1732:	92 e0       	ldi	r25, 0x02	; 2
    1734:	6a d2       	rcall	.+1236   	; 0x1c0a <_ZN9HWSerial13getEv>
    1736:	ec 01       	movw	r28, r24
    1738:	3e d4       	rcall	.+2172   	; 0x1fb6 <_Z6millisv>
    173a:	68 15       	cp	r22, r8
    173c:	79 05       	cpc	r23, r9
    173e:	8a 05       	cpc	r24, r10
    1740:	9b 05       	cpc	r25, r11
								memset(cmdbuf, 0, cmdbuflen);
								cmd_idx = 0;
								return;
							}
					}
				c = Serial1.get();
    1742:	60 f2       	brcs	.-104    	; 0x16dc <_ZN6MyMqtt5beginEv+0x90>
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	1f 91       	pop	r17
    174a:	0f 91       	pop	r16
		unsigned long tmr = millis() + 3000;
		int c = Serial1.get();
		bool startFill = false;

		debug_P("begin\r\n");
		while (millis() < tmr)
    174c:	ff 90       	pop	r15
    174e:	ef 90       	pop	r14
    1750:	df 90       	pop	r13
    1752:	bf 90       	pop	r11
    1754:	af 90       	pop	r10
    1756:	9f 90       	pop	r9
    1758:	8f 90       	pop	r8
				c = Serial1.get();
			}
		debug_P("Buffer:  '");
		debug(cmdbuf);
		debug_P("'\r\n");
	}
    175a:	08 95       	ret
    175c:	f8 01       	movw	r30, r16
    175e:	40 a9       	ldd	r20, Z+48	; 0x30
    1760:	51 a9       	ldd	r21, Z+49	; 0x31
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	ce 01       	movw	r24, r28
    1768:	5f d6       	rcall	.+3262   	; 0x2428 <memset>
    176a:	f7 01       	movw	r30, r14
    176c:	11 82       	std	Z+1, r1	; 0x01
    176e:	10 82       	st	Z, r1
    1770:	e9 cf       	rjmp	.-46     	; 0x1744 <_ZN6MyMqtt5beginEv+0xf8>

00001772 <_ZN6MyMqtt9MqttTasksEv>:
#endif


#define TASK_WAIT 5
void MyMqtt::MqttTasks()
	{
    1772:	8f 92       	push	r8
    1774:	9f 92       	push	r9
    1776:	af 92       	push	r10
    1778:	bf 92       	push	r11
    177a:	cf 92       	push	r12
    177c:	df 92       	push	r13
    177e:	ef 92       	push	r14
    1780:	ff 92       	push	r15
    1782:	0f 93       	push	r16
    1784:	1f 93       	push	r17
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	8c 01       	movw	r16, r24
		char *p;
		int c = Serial1.get();
    178c:	89 e9       	ldi	r24, 0x99	; 153
    178e:	92 e0       	ldi	r25, 0x02	; 2
    1790:	3c d2       	rcall	.+1144   	; 0x1c0a <_ZN9HWSerial13getEv>
    1792:	ec 01       	movw	r28, r24
    1794:	10 d4       	rcall	.+2080   	; 0x1fb6 <_Z6millisv>
		bool b = true;
		unsigned long tmr = millis() + TASK_WAIT;
    1796:	4b 01       	movw	r8, r22
    1798:	5c 01       	movw	r10, r24
    179a:	25 e0       	ldi	r18, 0x05	; 5
    179c:	82 0e       	add	r8, r18
    179e:	91 1c       	adc	r9, r1
    17a0:	a1 1c       	adc	r10, r1
    17a2:	b1 1c       	adc	r11, r1
    17a4:	d7 fd       	sbrc	r29, 7
    17a6:	ad c0       	rjmp	.+346    	; 0x1902 <_ZN6MyMqtt9MqttTasksEv+0x190>

		if(c < 0)
    17a8:	78 01       	movw	r14, r16
    17aa:	82 e7       	ldi	r24, 0x72	; 114
			return;

		// read chars until none come for 1 ms or buffer fills
		while(millis() < tmr)
			{
				if(c > 0 && cmd_idx < (cmdbuflen - 1))
    17ac:	e8 0e       	add	r14, r24
    17ae:	f1 1c       	adc	r15, r1
    17b0:	12 c0       	rjmp	.+36     	; 0x17d6 <_ZN6MyMqtt9MqttTasksEv+0x64>
    17b2:	f7 01       	movw	r30, r14
    17b4:	80 81       	ld	r24, Z
    17b6:	91 81       	ldd	r25, Z+1	; 0x01
    17b8:	f8 01       	movw	r30, r16
    17ba:	20 a9       	ldd	r18, Z+48	; 0x30
    17bc:	31 a9       	ldd	r19, Z+49	; 0x31
    17be:	21 50       	subi	r18, 0x01	; 1
    17c0:	31 09       	sbc	r19, r1
    17c2:	82 17       	cp	r24, r18
    17c4:	93 07       	cpc	r25, r19
    17c6:	d8 f0       	brcs	.+54     	; 0x17fe <_ZN6MyMqtt9MqttTasksEv+0x8c>
    17c8:	f6 d3       	rcall	.+2028   	; 0x1fb6 <_Z6millisv>
    17ca:	4b 01       	movw	r8, r22
				if(cmd_idx < (cmdbuflen-1))
					{
					}
				else
					{
						tmr = millis();
    17cc:	5c 01       	movw	r10, r24
    17ce:	89 e9       	ldi	r24, 0x99	; 153
    17d0:	92 e0       	ldi	r25, 0x02	; 2
    17d2:	1b d2       	rcall	.+1078   	; 0x1c0a <_ZN9HWSerial13getEv>
					}
				c = Serial1.get();
    17d4:	ec 01       	movw	r28, r24
    17d6:	ef d3       	rcall	.+2014   	; 0x1fb6 <_Z6millisv>
    17d8:	68 15       	cp	r22, r8
    17da:	79 05       	cpc	r23, r9
    17dc:	8a 05       	cpc	r24, r10

		if(c < 0)
			return;

		// read chars until none come for 1 ms or buffer fills
		while(millis() < tmr)
    17de:	9b 05       	cpc	r25, r11
    17e0:	20 f5       	brcc	.+72     	; 0x182a <_ZN6MyMqtt9MqttTasksEv+0xb8>
    17e2:	1c 16       	cp	r1, r28
    17e4:	1d 06       	cpc	r1, r29
    17e6:	2c f3       	brlt	.-54     	; 0x17b2 <_ZN6MyMqtt9MqttTasksEv+0x40>
    17e8:	f8 01       	movw	r30, r16
    17ea:	80 a9       	ldd	r24, Z+48	; 0x30
			{
				if(c > 0 && cmd_idx < (cmdbuflen - 1))
    17ec:	91 a9       	ldd	r25, Z+49	; 0x31
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f7 01       	movw	r30, r14
					{
						cmdbuf[cmd_idx++] = c;
						tmr = millis() + TASK_WAIT;
					}
				if(cmd_idx < (cmdbuflen-1))
    17f2:	20 81       	ld	r18, Z
    17f4:	31 81       	ldd	r19, Z+1	; 0x01
    17f6:	28 17       	cp	r18, r24
    17f8:	39 07       	cpc	r19, r25
    17fa:	48 f3       	brcs	.-46     	; 0x17ce <_ZN6MyMqtt9MqttTasksEv+0x5c>
    17fc:	e5 cf       	rjmp	.-54     	; 0x17c8 <_ZN6MyMqtt9MqttTasksEv+0x56>
    17fe:	f8 01       	movw	r30, r16
    1800:	26 a5       	ldd	r18, Z+46	; 0x2e
    1802:	37 a5       	ldd	r19, Z+47	; 0x2f
    1804:	ac 01       	movw	r20, r24
    1806:	4f 5f       	subi	r20, 0xFF	; 255
		// read chars until none come for 1 ms or buffer fills
		while(millis() < tmr)
			{
				if(c > 0 && cmd_idx < (cmdbuflen - 1))
					{
						cmdbuf[cmd_idx++] = c;
    1808:	5f 4f       	sbci	r21, 0xFF	; 255
    180a:	f7 01       	movw	r30, r14
    180c:	51 83       	std	Z+1, r21	; 0x01
    180e:	40 83       	st	Z, r20
    1810:	f9 01       	movw	r30, r18
    1812:	e8 0f       	add	r30, r24
    1814:	f9 1f       	adc	r31, r25
    1816:	c0 83       	st	Z, r28
    1818:	ce d3       	rcall	.+1948   	; 0x1fb6 <_Z6millisv>
    181a:	4b 01       	movw	r8, r22
    181c:	5c 01       	movw	r10, r24
    181e:	e5 e0       	ldi	r30, 0x05	; 5
    1820:	8e 0e       	add	r8, r30
						tmr = millis() + TASK_WAIT;
    1822:	91 1c       	adc	r9, r1
    1824:	a1 1c       	adc	r10, r1
    1826:	b1 1c       	adc	r11, r1
    1828:	df cf       	rjmp	.-66     	; 0x17e8 <_ZN6MyMqtt9MqttTasksEv+0x76>
    182a:	f8 01       	movw	r30, r16
    182c:	c6 a4       	ldd	r12, Z+46	; 0x2e
    182e:	d7 a4       	ldd	r13, Z+47	; 0x2f
    1830:	f6 01       	movw	r30, r12
    1832:	80 81       	ld	r24, Z
    1834:	88 23       	and	r24, r24
#ifdef DO_USB
						USBSerial.StreamTask();
#endif
			}

		if(strlen(cmdbuf) > 0)
    1836:	09 f4       	brne	.+2      	; 0x183a <_ZN6MyMqtt9MqttTasksEv+0xc8>
    1838:	64 c0       	rjmp	.+200    	; 0x1902 <_ZN6MyMqtt9MqttTasksEv+0x190>
    183a:	c0 e0       	ldi	r28, 0x00	; 0
			}
		else
			b = false;

		size_t idx = 0;
		while (b)
    183c:	d0 e0       	ldi	r29, 0x00	; 0
    183e:	c8 01       	movw	r24, r16
    1840:	8e 58       	subi	r24, 0x8E	; 142
    1842:	9f 4f       	sbci	r25, 0xFF	; 255
    1844:	5c 01       	movw	r10, r24
    1846:	76 01       	movw	r14, r12
    1848:	ec 0e       	add	r14, r28
    184a:	fd 1e       	adc	r15, r29
    184c:	61 e3       	ldi	r22, 0x31	; 49
    184e:	71 e0       	ldi	r23, 0x01	; 1
    1850:	c7 01       	movw	r24, r14
			{
				p = strstr_P(cmdbuf+idx,PSTR("\r\n"));
    1852:	c7 d5       	rcall	.+2958   	; 0x23e2 <strstr_P>
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	09 f4       	brne	.+2      	; 0x185a <_ZN6MyMqtt9MqttTasksEv+0xe8>
    1858:	4e c0       	rjmp	.+156    	; 0x18f6 <_ZN6MyMqtt9MqttTasksEv+0x184>
    185a:	fc 01       	movw	r30, r24
    185c:	10 82       	st	Z, r1
    185e:	f8 01       	movw	r30, r16
    1860:	c6 a4       	ldd	r12, Z+46	; 0x2e
				if(p != NULL)
    1862:	d7 a4       	ldd	r13, Z+47	; 0x2f
    1864:	76 01       	movw	r14, r12
    1866:	ec 0e       	add	r14, r28
					{
						*p = 0;
    1868:	fd 1e       	adc	r15, r29
    186a:	f7 01       	movw	r30, r14
						char *pcmdbuf = cmdbuf+idx;
    186c:	01 90       	ld	r0, Z+
    186e:	00 20       	and	r0, r0
    1870:	e9 f7       	brne	.-6      	; 0x186c <_ZN6MyMqtt9MqttTasksEv+0xfa>
    1872:	9f 01       	movw	r18, r30
    1874:	2e 19       	sub	r18, r14
    1876:	3f 09       	sbc	r19, r15
						idx += strlen(pcmdbuf) + 2;
    1878:	2f 5f       	subi	r18, 0xFF	; 255
    187a:	3f 4f       	sbci	r19, 0xFF	; 255
    187c:	c2 0f       	add	r28, r18
    187e:	d3 1f       	adc	r29, r19
    1880:	61 e2       	ldi	r22, 0x21	; 33
    1882:	71 e0       	ldi	r23, 0x01	; 1
    1884:	c7 01       	movw	r24, r14
    1886:	a4 d5       	rcall	.+2888   	; 0x23d0 <strcmp_P>
    1888:	89 2b       	or	r24, r25
    188a:	f9 f4       	brne	.+62     	; 0x18ca <_ZN6MyMqtt9MqttTasksEv+0x158>
    188c:	f8 01       	movw	r30, r16
						if (strcmp_P(pcmdbuf, PSTR("+MQTT Connected")) == 0)
    188e:	85 a5       	ldd	r24, Z+45	; 0x2d
    1890:	82 60       	ori	r24, 0x02	; 2
    1892:	85 a7       	std	Z+45, r24	; 0x2d
    1894:	f5 01       	movw	r30, r10
    1896:	80 81       	ld	r24, Z
    1898:	91 81       	ldd	r25, Z+1	; 0x01
    189a:	c8 17       	cp	r28, r24
							{
								m_flags.flags.mqttonline = true;
    189c:	d9 07       	cpc	r29, r25
    189e:	98 f2       	brcs	.-90     	; 0x1846 <_ZN6MyMqtt9MqttTasksEv+0xd4>
    18a0:	11 82       	std	Z+1, r1	; 0x01
    18a2:	10 82       	st	Z, r1
#ifdef DO_USB
								USBSerial.SendStr_P(Red,PSTR("Got Other!\r\n"));
								USBSerial.SendStr(Red,pcmdbuf);
#endif
							}
						if(idx >= cmd_idx)
    18a4:	f8 01       	movw	r30, r16
    18a6:	40 a9       	ldd	r20, Z+48	; 0x30
    18a8:	51 a9       	ldd	r21, Z+49	; 0x31
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	c6 01       	movw	r24, r12
							{
								b = false;
								cmd_idx = 0;
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
								memset(cmdbuf,0,cmdbuflen);
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	ff 90       	pop	r15
    18ba:	ef 90       	pop	r14
    18bc:	df 90       	pop	r13
    18be:	cf 90       	pop	r12
//					{
//
//					}
//			}
//#endif
	}
    18c0:	bf 90       	pop	r11
    18c2:	af 90       	pop	r10
    18c4:	9f 90       	pop	r9
    18c6:	8f 90       	pop	r8
    18c8:	af c5       	rjmp	.+2910   	; 0x2428 <memset>
    18ca:	6e e0       	ldi	r22, 0x0E	; 14
    18cc:	71 e0       	ldi	r23, 0x01	; 1
    18ce:	c7 01       	movw	r24, r14
    18d0:	7f d5       	rcall	.+2814   	; 0x23d0 <strcmp_P>
    18d2:	89 2b       	or	r24, r25
    18d4:	29 f4       	brne	.+10     	; 0x18e0 <_ZN6MyMqtt9MqttTasksEv+0x16e>
    18d6:	f8 01       	movw	r30, r16
						b = false;
						if(idx < cmd_idx)
							{	// chars left over in buffer when full, shift them down
								memcpy(cmdbuf,cmdbuf+idx,cmd_idx-idx);
								cmd_idx -= idx;
								memset(cmdbuf+idx,0,cmdbuflen-idx);
    18d8:	85 a5       	ldd	r24, Z+45	; 0x2d
    18da:	8d 7f       	andi	r24, 0xFD	; 253
								m_flags.flags.mqttonline = true;
#ifdef DO_USB
								USBSerial.SendStr_P(Green,PSTR("MQTT Connected\r\n"));
#endif
							}
						else if (strcmp_P(pcmdbuf, PSTR("+MQTT Disconnected")) == 0)
    18dc:	85 a7       	std	Z+45, r24	; 0x2d
    18de:	da cf       	rjmp	.-76     	; 0x1894 <_ZN6MyMqtt9MqttTasksEv+0x122>
    18e0:	6e ef       	ldi	r22, 0xFE	; 254
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	c7 01       	movw	r24, r14
    18e6:	74 d5       	rcall	.+2792   	; 0x23d0 <strcmp_P>
    18e8:	89 2b       	or	r24, r25
							{
								m_flags.flags.mqttonline = false;
    18ea:	c1 f4       	brne	.+48     	; 0x191c <_ZN6MyMqtt9MqttTasksEv+0x1aa>
    18ec:	f8 01       	movw	r30, r16
    18ee:	85 a5       	ldd	r24, Z+45	; 0x2d
    18f0:	84 60       	ori	r24, 0x04	; 4
    18f2:	85 a7       	std	Z+45, r24	; 0x2d
#ifdef DO_USB
								USBSerial.SendStr_P(Green,PSTR("MQTT Disconnected\r\n"));
#endif
							}
						else if (strcmp_P(pcmdbuf, PSTR("+WIFI Connected")) == 0)
    18f4:	cf cf       	rjmp	.-98     	; 0x1894 <_ZN6MyMqtt9MqttTasksEv+0x122>
    18f6:	f5 01       	movw	r30, r10
    18f8:	40 81       	ld	r20, Z
    18fa:	51 81       	ldd	r21, Z+1	; 0x01
    18fc:	c4 17       	cp	r28, r20
    18fe:	d5 07       	cpc	r29, r21
    1900:	18 f1       	brcs	.+70     	; 0x1948 <_ZN6MyMqtt9MqttTasksEv+0x1d6>
							{
								m_flags.flags.wifionline = true;
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	1f 91       	pop	r17
    1908:	0f 91       	pop	r16
    190a:	ff 90       	pop	r15
							}
					}
				else
					{
						b = false;
						if(idx < cmd_idx)
    190c:	ef 90       	pop	r14
    190e:	df 90       	pop	r13
    1910:	cf 90       	pop	r12
    1912:	bf 90       	pop	r11
    1914:	af 90       	pop	r10
    1916:	9f 90       	pop	r9
//					{
//
//					}
//			}
//#endif
	}
    1918:	8f 90       	pop	r8
    191a:	08 95       	ret
    191c:	6b ee       	ldi	r22, 0xEB	; 235
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	c7 01       	movw	r24, r14
    1922:	56 d5       	rcall	.+2732   	; 0x23d0 <strcmp_P>
    1924:	89 2b       	or	r24, r25
    1926:	59 f0       	breq	.+22     	; 0x193e <_ZN6MyMqtt9MqttTasksEv+0x1cc>
    1928:	68 ee       	ldi	r22, 0xE8	; 232
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	c7 01       	movw	r24, r14
    192e:	50 d5       	rcall	.+2720   	; 0x23d0 <strcmp_P>
    1930:	89 2b       	or	r24, r25
								m_flags.flags.wifionline = true;
#ifdef DO_USB
								USBSerial.SendStr_P(Green,PSTR("WIFI Connected\r\n"));
#endif
							}
						else if (strcmp_P(pcmdbuf, PSTR("+WIFI Disconnected")) == 0)
    1932:	11 f5       	brne	.+68     	; 0x1978 <_ZN6MyMqtt9MqttTasksEv+0x206>
    1934:	f8 01       	movw	r30, r16
    1936:	85 a5       	ldd	r24, Z+45	; 0x2d
    1938:	88 60       	ori	r24, 0x08	; 8
    193a:	85 a7       	std	Z+45, r24	; 0x2d
    193c:	ab cf       	rjmp	.-170    	; 0x1894 <_ZN6MyMqtt9MqttTasksEv+0x122>
    193e:	f8 01       	movw	r30, r16
								m_flags.flags.wifionline = false;
#ifdef DO_USB
								USBSerial.SendStr_P(Green,PSTR("WIFI Disconnected\r\n"));
#endif
							}
						else if (strcmp_P(pcmdbuf, PSTR("OK")) == 0)
    1940:	85 a5       	ldd	r24, Z+45	; 0x2d
    1942:	8b 7f       	andi	r24, 0xFB	; 251
    1944:	85 a7       	std	Z+45, r24	; 0x2d
    1946:	a6 cf       	rjmp	.-180    	; 0x1894 <_ZN6MyMqtt9MqttTasksEv+0x122>
    1948:	4c 1b       	sub	r20, r28
    194a:	5d 0b       	sbc	r21, r29
    194c:	b7 01       	movw	r22, r14
							{
								m_flags.flags.got_ok = true;
    194e:	c6 01       	movw	r24, r12
    1950:	62 d5       	rcall	.+2756   	; 0x2416 <memcpy>
    1952:	f5 01       	movw	r30, r10
    1954:	80 81       	ld	r24, Z
    1956:	91 81       	ldd	r25, Z+1	; 0x01
								USBSerial.SendStr_P(Green,PSTR("WIFI Connected\r\n"));
#endif
							}
						else if (strcmp_P(pcmdbuf, PSTR("+WIFI Disconnected")) == 0)
							{
								m_flags.flags.wifionline = false;
    1958:	8c 1b       	sub	r24, r28
    195a:	9d 0b       	sbc	r25, r29
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
    1960:	f8 01       	movw	r30, r16
				else
					{
						b = false;
						if(idx < cmd_idx)
							{	// chars left over in buffer when full, shift them down
								memcpy(cmdbuf,cmdbuf+idx,cmd_idx-idx);
    1962:	40 a9       	ldd	r20, Z+48	; 0x30
    1964:	51 a9       	ldd	r21, Z+49	; 0x31
    1966:	4c 1b       	sub	r20, r28
    1968:	5d 0b       	sbc	r21, r29
    196a:	86 a5       	ldd	r24, Z+46	; 0x2e
    196c:	97 a5       	ldd	r25, Z+47	; 0x2f
								cmd_idx -= idx;
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	8c 0f       	add	r24, r28
    1974:	9d 1f       	adc	r25, r29
    1976:	9c cf       	rjmp	.-200    	; 0x18b0 <_ZN6MyMqtt9MqttTasksEv+0x13e>
    1978:	62 ee       	ldi	r22, 0xE2	; 226
    197a:	70 e0       	ldi	r23, 0x00	; 0
								memset(cmdbuf+idx,0,cmdbuflen-idx);
    197c:	c7 01       	movw	r24, r14
    197e:	31 d5       	rcall	.+2658   	; 0x23e2 <strstr_P>
    1980:	89 2b       	or	r24, r25
    1982:	29 f0       	breq	.+10     	; 0x198e <_ZN6MyMqtt9MqttTasksEv+0x21c>
    1984:	f8 01       	movw	r30, r16
    1986:	85 a5       	ldd	r24, Z+45	; 0x2d
    1988:	80 61       	ori	r24, 0x10	; 16
    198a:	85 a7       	std	Z+45, r24	; 0x2d
    198c:	83 cf       	rjmp	.-250    	; 0x1894 <_ZN6MyMqtt9MqttTasksEv+0x122>
    198e:	66 ed       	ldi	r22, 0xD6	; 214
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	c7 01       	movw	r24, r14
								m_flags.flags.got_ok = true;
#ifdef DO_USB
								USBSerial.SendStr_P(Green,PSTR("Got OK\r\n"));
#endif
							}
						else if (strstr_P(pcmdbuf, PSTR("Error")) != NULL)
    1994:	26 d5       	rcall	.+2636   	; 0x23e2 <strstr_P>
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	09 f4       	brne	.+2      	; 0x199c <_ZN6MyMqtt9MqttTasksEv+0x22a>
    199a:	7c cf       	rjmp	.-264    	; 0x1894 <_ZN6MyMqtt9MqttTasksEv+0x122>
    199c:	6c 01       	movw	r12, r24
    199e:	fb e0       	ldi	r31, 0x0B	; 11
    19a0:	cf 0e       	add	r12, r31
							{
								m_flags.flags.got_error = true;
    19a2:	d1 1c       	adc	r13, r1
    19a4:	f7 01       	movw	r30, r14
    19a6:	10 82       	st	Z, r1
    19a8:	64 ed       	ldi	r22, 0xD4	; 212
    19aa:	70 e0       	ldi	r23, 0x00	; 0
#ifdef DO_USB
								USBSerial.SendStr_P(Red,PSTR("Got Error\r\n"));
#endif
							}
						else if ((p = strstr_P(pcmdbuf, PSTR("+AT+TOPIC=\""))) != NULL)
    19ac:	c6 01       	movw	r24, r12
    19ae:	19 d5       	rcall	.+2610   	; 0x23e2 <strstr_P>
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	71 f0       	breq	.+28     	; 0x19d0 <_ZN6MyMqtt9MqttTasksEv+0x25e>
    19b4:	fc 01       	movw	r30, r24
    19b6:	10 82       	st	Z, r1
    19b8:	7c 01       	movw	r14, r24
    19ba:	f3 e0       	ldi	r31, 0x03	; 3
							{
								char *topic = p + 11;
    19bc:	ef 0e       	add	r14, r31
    19be:	f1 1c       	adc	r15, r1
    19c0:	62 ed       	ldi	r22, 0xD2	; 210
    19c2:	70 e0       	ldi	r23, 0x00	; 0
#ifdef DO_USB
								USBSerial.SendStr_P(Green,PSTR("Got Topic\r\n"));
								USBSerial.SendStr(Green,pcmdbuf);
#endif

								pcmdbuf[0] = 0;
    19c4:	c7 01       	movw	r24, r14
    19c6:	0d d5       	rcall	.+2586   	; 0x23e2 <strstr_P>
								p = strstr_P(topic, PSTR("\""));
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	11 f0       	breq	.+4      	; 0x19d0 <_ZN6MyMqtt9MqttTasksEv+0x25e>
    19cc:	fc 01       	movw	r30, r24
    19ce:	10 82       	st	Z, r1
    19d0:	a7 01       	movw	r20, r14
								if (p != NULL)
    19d2:	b6 01       	movw	r22, r12
    19d4:	c8 01       	movw	r24, r16
									{
										*p = 0;
    19d6:	cd dc       	rcall	.-1638   	; 0x1372 <_ZN6MyMqtt7OnTopicEPcS0_>
    19d8:	f8 01       	movw	r30, r16
										payload = p + 3;
    19da:	c6 a4       	ldd	r12, Z+46	; 0x2e
    19dc:	d7 a4       	ldd	r13, Z+47	; 0x2f
    19de:	5a cf       	rjmp	.-332    	; 0x1894 <_ZN6MyMqtt9MqttTasksEv+0x122>

000019e0 <_Z14checkSignatureb>:
				char buf[32];
				sprintf_P(buf,PSTR("Stack=%04x\n"), (int) (TrackStack()));
				USBSerial.SendStr(buf);
			}
#endif
		if (StackSignature != SIGNATURE)
    19e0:	80 91 09 03 	lds	r24, 0x0309
    19e4:	90 91 0a 03 	lds	r25, 0x030A
    19e8:	8a 3a       	cpi	r24, 0xAA	; 170
    19ea:	95 45       	sbci	r25, 0x55	; 85
    19ec:	69 f0       	breq	.+26     	; 0x1a08 <_Z14checkSignatureb+0x28>
				while (1)
					{
#ifdef DO_USB
						USBSerial.StreamTask();
#endif
						sbi(PORTB, 7);
    19ee:	2f 9a       	sbi	0x05, 7	; 5
						delay(100);
    19f0:	64 e6       	ldi	r22, 0x64	; 100
    19f2:	70 e0       	ldi	r23, 0x00	; 0
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	10 d3       	rcall	.+1568   	; 0x201a <_Z5delaym>
    19fa:	2f 98       	cbi	0x05, 7	; 5
						cbi(PORTB, 7);
    19fc:	64 e6       	ldi	r22, 0x64	; 100
						delay(100);
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	0a d3       	rcall	.+1556   	; 0x201a <_Z5delaym>
    1a06:	f3 cf       	rjmp	.-26     	; 0x19ee <_Z14checkSignatureb+0xe>
    1a08:	08 95       	ret

00001a0a <_Z10fillPixelshhhh>:
					}
			}
	}

void fillPixels(byte pixels, byte r, byte g, byte b)
	{
    1a0a:	ef 92       	push	r14
    1a0c:	ff 92       	push	r15
    1a0e:	0f 93       	push	r16
    1a10:	1f 93       	push	r17
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    unsigned char sreg;

public:
    InterruptBlocker()
	{
	sreg = SREG;
    1a16:	ef b6       	in	r14, 0x3f	; 63
	cli();
    1a18:	f8 94       	cli
		InterruptBlocker ib;
		for (byte i = 0; i < pixels; i++)
    1a1a:	88 23       	and	r24, r24
    1a1c:	91 f0       	breq	.+36     	; 0x1a42 <_Z10fillPixelshhhh+0x38>
    1a1e:	f2 2e       	mov	r15, r18
    1a20:	04 2f       	mov	r16, r20
    1a22:	16 2f       	mov	r17, r22
    1a24:	d8 2f       	mov	r29, r24
    1a26:	c0 e0       	ldi	r28, 0x00	; 0
    1a28:	03 c0       	rjmp	.+6      	; 0x1a30 <_Z10fillPixelshhhh+0x26>
    1a2a:	cf 5f       	subi	r28, 0xFF	; 255
    1a2c:	cd 17       	cp	r28, r29
    1a2e:	49 f0       	breq	.+18     	; 0x1a42 <_Z10fillPixelshhhh+0x38>
			{
				sendPixel(r, g, b);
    1a30:	4f 2d       	mov	r20, r15
    1a32:	60 2f       	mov	r22, r16
    1a34:	81 2f       	mov	r24, r17
    1a36:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_Z9sendPixelhhh>
				if (tbi(UCSR1A,RXC1))
    1a3a:	90 91 c8 00 	lds	r25, 0x00C8
    1a3e:	97 ff       	sbrs	r25, 7
    1a40:	f4 cf       	rjmp	.-24     	; 0x1a2a <_Z10fillPixelshhhh+0x20>
	}
    ;

    ~InterruptBlocker()
	{
	SREG = sreg;
    1a42:	ef be       	out	0x3f, r14	; 63
					return;
			}
	}
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	1f 91       	pop	r17
    1a4a:	0f 91       	pop	r16
    1a4c:	ff 90       	pop	r15
    1a4e:	ef 90       	pop	r14
    1a50:	08 95       	ret

00001a52 <_Z11flashPixelshhhhhj>:

void flashPixels(byte pixels, byte r, byte g, byte b, byte times, uint16_t delayrate)
	{
    1a52:	af 92       	push	r10
    1a54:	bf 92       	push	r11
    1a56:	cf 92       	push	r12
    1a58:	df 92       	push	r13
    1a5a:	ef 92       	push	r14
    1a5c:	ff 92       	push	r15
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
		for (byte t = 0; t < times; t++)
    1a66:	00 23       	and	r16, r16
    1a68:	d9 f0       	breq	.+54     	; 0x1aa0 <_Z11flashPixelshhhhhj+0x4e>
    1a6a:	a2 2e       	mov	r10, r18
    1a6c:	b4 2e       	mov	r11, r20
    1a6e:	16 2f       	mov	r17, r22
    1a70:	d8 2f       	mov	r29, r24
    1a72:	67 01       	movw	r12, r14
    1a74:	e1 2c       	mov	r14, r1
    1a76:	f1 2c       	mov	r15, r1
    1a78:	c0 e0       	ldi	r28, 0x00	; 0
			{
				fillPixels(pixels, r, g, b);
    1a7a:	2a 2d       	mov	r18, r10
    1a7c:	4b 2d       	mov	r20, r11
    1a7e:	61 2f       	mov	r22, r17
    1a80:	8d 2f       	mov	r24, r29
    1a82:	c3 df       	rcall	.-122    	; 0x1a0a <_Z10fillPixelshhhh>
    1a84:	c7 01       	movw	r24, r14
				delay(delayrate);
    1a86:	b6 01       	movw	r22, r12
    1a88:	c8 d2       	rcall	.+1424   	; 0x201a <_Z5delaym>
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	40 e0       	ldi	r20, 0x00	; 0
				fillPixels(pixels, 0, 0, 0);
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	8d 2f       	mov	r24, r29
    1a92:	bb df       	rcall	.-138    	; 0x1a0a <_Z10fillPixelshhhh>
    1a94:	c7 01       	movw	r24, r14
    1a96:	b6 01       	movw	r22, r12
    1a98:	c0 d2       	rcall	.+1408   	; 0x201a <_Z5delaym>
				delay(delayrate);
    1a9a:	cf 5f       	subi	r28, 0xFF	; 255
    1a9c:	c0 13       	cpse	r28, r16
    1a9e:	ed cf       	rjmp	.-38     	; 0x1a7a <_Z11flashPixelshhhhhj+0x28>
    1aa0:	df 91       	pop	r29
			}
	}

void flashPixels(byte pixels, byte r, byte g, byte b, byte times, uint16_t delayrate)
	{
		for (byte t = 0; t < times; t++)
    1aa2:	cf 91       	pop	r28
    1aa4:	1f 91       	pop	r17
    1aa6:	0f 91       	pop	r16
				fillPixels(pixels, r, g, b);
				delay(delayrate);
				fillPixels(pixels, 0, 0, 0);
				delay(delayrate);
			}
	}
    1aa8:	ff 90       	pop	r15
    1aaa:	ef 90       	pop	r14
    1aac:	df 90       	pop	r13
    1aae:	cf 90       	pop	r12
    1ab0:	bf 90       	pop	r11
    1ab2:	af 90       	pop	r10
    1ab4:	08 95       	ret

00001ab6 <_Z9PixelTesth>:
MyMqtt mqttsock;

#define INTERVAL_PIXEL 10

void PixelTest(byte pixels)
	{
    1ab6:	cf 92       	push	r12
    1ab8:	df 92       	push	r13
    1aba:	ef 92       	push	r14
    1abc:	ff 92       	push	r15
    1abe:	0f 93       	push	r16
		checkSignature(true);
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	8e df       	rcall	.-228    	; 0x19e0 <_Z14checkSignatureb>
    1ac4:	84 ef       	ldi	r24, 0xF4	; 244
		flashPixels(PIXELS, 0, 0, 32, 3, 500);
    1ac6:	e8 2e       	mov	r14, r24
    1ac8:	ff 24       	eor	r15, r15
    1aca:	f3 94       	inc	r15
    1acc:	03 e0       	ldi	r16, 0x03	; 3
    1ace:	20 e2       	ldi	r18, 0x20	; 32
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	60 e0       	ldi	r22, 0x00	; 0
    1ad4:	82 e3       	ldi	r24, 0x32	; 50
    1ad6:	bd df       	rcall	.-134    	; 0x1a52 <_Z11flashPixelshhhhhj>
    1ad8:	46 e9       	ldi	r20, 0x96	; 150
    1ada:	50 e0       	ldi	r21, 0x00	; 0

		//DDRB |= 1;
		mqttsock.SetBuffer((char *)neo.getPixels(),PIXELS * 3);
    1adc:	60 ec       	ldi	r22, 0xC0	; 192
    1ade:	71 e0       	ldi	r23, 0x01	; 1
    1ae0:	83 e1       	ldi	r24, 0x13	; 19
    1ae2:	91 e0       	ldi	r25, 0x01	; 1
    1ae4:	24 dc       	rcall	.-1976   	; 0x132e <_ZN6MyMqtt9SetBufferEPcj>
    1ae6:	83 e1       	ldi	r24, 0x13	; 19
    1ae8:	91 e0       	ldi	r25, 0x01	; 1
    1aea:	b0 dd       	rcall	.-1184   	; 0x164c <_ZN6MyMqtt5beginEv>
		mqttsock.begin();
    1aec:	64 d2       	rcall	.+1224   	; 0x1fb6 <_Z6millisv>
    1aee:	6b 01       	movw	r12, r22
    1af0:	7c 01       	movw	r14, r24
    1af2:	28 e8       	ldi	r18, 0x88	; 136
		//flashPixels(PIXELS, 0, 32, 0, 3, 500);
		unsigned long tmr;
		tmr = millis() + 5000;
    1af4:	c2 0e       	add	r12, r18
    1af6:	23 e1       	ldi	r18, 0x13	; 19
    1af8:	d2 1e       	adc	r13, r18
    1afa:	e1 1c       	adc	r14, r1
    1afc:	f1 1c       	adc	r15, r1
    1afe:	5b d2       	rcall	.+1206   	; 0x1fb6 <_Z6millisv>
    1b00:	6c 15       	cp	r22, r12
    1b02:	7d 05       	cpc	r23, r13
    1b04:	8e 05       	cpc	r24, r14
    1b06:	9f 05       	cpc	r25, r15
		while (millis() < tmr && mqttsock.IsConnected() == false)
    1b08:	20 f4       	brcc	.+8      	; 0x1b12 <_Z9PixelTesth+0x5c>
    1b0a:	80 91 40 01 	lds	r24, 0x0140
    1b0e:	81 ff       	sbrs	r24, 1
    1b10:	37 c0       	rjmp	.+110    	; 0x1b80 <_Z9PixelTesth+0xca>
    1b12:	51 d2       	rcall	.+1186   	; 0x1fb6 <_Z6millisv>
    1b14:	6b 01       	movw	r12, r22
    1b16:	7c 01       	movw	r14, r24
    1b18:	28 e8       	ldi	r18, 0x88	; 136
    1b1a:	c2 0e       	add	r12, r18
    1b1c:	23 e1       	ldi	r18, 0x13	; 19
				mqttsock.MqttTasks();
#ifdef DO_USB
				USBSerial.StreamTask();
#endif
			}
		tmr = millis() + 5000;
    1b1e:	d2 1e       	adc	r13, r18
    1b20:	e1 1c       	adc	r14, r1
    1b22:	f1 1c       	adc	r15, r1
    1b24:	48 d2       	rcall	.+1168   	; 0x1fb6 <_Z6millisv>
    1b26:	6c 15       	cp	r22, r12
    1b28:	7d 05       	cpc	r23, r13
    1b2a:	8e 05       	cpc	r24, r14
    1b2c:	9f 05       	cpc	r25, r15
    1b2e:	20 f4       	brcc	.+8      	; 0x1b38 <_Z9PixelTesth+0x82>
    1b30:	80 91 40 01 	lds	r24, 0x0140
    1b34:	81 fd       	sbrc	r24, 1
    1b36:	28 c0       	rjmp	.+80     	; 0x1b88 <_Z9PixelTesth+0xd2>
    1b38:	40 e0       	ldi	r20, 0x00	; 0
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	83 e1       	ldi	r24, 0x13	; 19
    1b42:	91 e0       	ldi	r25, 0x01	; 1

		// read any messages that come in fast
		while (millis() < tmr && mqttsock.IsConnected() == true)
    1b44:	f4 db       	rcall	.-2072   	; 0x132e <_ZN6MyMqtt9SetBufferEPcj>
    1b46:	87 e8       	ldi	r24, 0x87	; 135
#ifdef DO_USB
				USBSerial.StreamTask();
#endif
			}

		mqttsock.SetBuffer(NULL,0);
    1b48:	91 e0       	ldi	r25, 0x01	; 1
    1b4a:	b4 db       	rcall	.-2200   	; 0x12b4 <_ZN9NeoPixels5beginEv>
    1b4c:	0f c0       	rjmp	.+30     	; 0x1b6c <_Z9PixelTesth+0xb6>
    1b4e:	83 e1       	ldi	r24, 0x13	; 19
    1b50:	91 e0       	ldi	r25, 0x01	; 1
    1b52:	0f de       	rcall	.-994    	; 0x1772 <_ZN6MyMqtt9MqttTasksEv>
    1b54:	83 e1       	ldi	r24, 0x13	; 19
    1b56:	91 e0       	ldi	r25, 0x01	; 1

		neo.begin();
    1b58:	68 dd       	rcall	.-1328   	; 0x162a <_ZN6MyMqtt11CheckUpdateEv>
    1b5a:	87 e8       	ldi	r24, 0x87	; 135
    1b5c:	91 e0       	ldi	r25, 0x01	; 1
    1b5e:	b8 db       	rcall	.-2192   	; 0x12d0 <_ZN9NeoPixels4TaskEv>
		while (mqttsock.IsConnected() == true)
    1b60:	2a d2       	rcall	.+1108   	; 0x1fb6 <_Z6millisv>
			{
				mqttsock.MqttTasks();
    1b62:	c6 16       	cp	r12, r22
    1b64:	d7 06       	cpc	r13, r23
    1b66:	e8 06       	cpc	r14, r24
    1b68:	f9 06       	cpc	r15, r25
				mqttsock.CheckUpdate();
    1b6a:	90 f0       	brcs	.+36     	; 0x1b90 <_Z9PixelTesth+0xda>
    1b6c:	80 91 40 01 	lds	r24, 0x0140
    1b70:	81 fd       	sbrc	r24, 1
				neo.Task();
    1b72:	ed cf       	rjmp	.-38     	; 0x1b4e <_Z9PixelTesth+0x98>
    1b74:	0f 91       	pop	r16
    1b76:	ff 90       	pop	r15
    1b78:	ef 90       	pop	r14
    1b7a:	df 90       	pop	r13
    1b7c:	cf 90       	pop	r12
    1b7e:	08 95       	ret
    1b80:	83 e1       	ldi	r24, 0x13	; 19
    1b82:	91 e0       	ldi	r25, 0x01	; 1
    1b84:	f6 dd       	rcall	.-1044   	; 0x1772 <_ZN6MyMqtt9MqttTasksEv>
    1b86:	bb cf       	rjmp	.-138    	; 0x1afe <_Z9PixelTesth+0x48>
    1b88:	83 e1       	ldi	r24, 0x13	; 19
    1b8a:	91 e0       	ldi	r25, 0x01	; 1
			}

		mqttsock.SetBuffer(NULL,0);

		neo.begin();
		while (mqttsock.IsConnected() == true)
    1b8c:	f2 dd       	rcall	.-1052   	; 0x1772 <_ZN6MyMqtt9MqttTasksEv>
    1b8e:	ca cf       	rjmp	.-108    	; 0x1b24 <_Z9PixelTesth+0x6e>
						checkSignature(true);
						tmr = millis() + 500;
					}

			}
	}
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	26 df       	rcall	.-436    	; 0x19e0 <_Z14checkSignatureb>
    1b94:	10 d2       	rcall	.+1056   	; 0x1fb6 <_Z6millisv>
    1b96:	6b 01       	movw	r12, r22
    1b98:	7c 01       	movw	r14, r24
    1b9a:	24 ef       	ldi	r18, 0xF4	; 244
		//flashPixels(PIXELS, 0, 32, 0, 3, 500);
		unsigned long tmr;
		tmr = millis() + 5000;
		while (millis() < tmr && mqttsock.IsConnected() == false)
			{
				mqttsock.MqttTasks();
    1b9c:	c2 0e       	add	r12, r18
    1b9e:	21 e0       	ldi	r18, 0x01	; 1
    1ba0:	d2 1e       	adc	r13, r18
    1ba2:	e1 1c       	adc	r14, r1
    1ba4:	f1 1c       	adc	r15, r1
		tmr = millis() + 5000;

		// read any messages that come in fast
		while (millis() < tmr && mqttsock.IsConnected() == true)
			{
				mqttsock.MqttTasks();
    1ba6:	e2 cf       	rjmp	.-60     	; 0x1b6c <_Z9PixelTesth+0xb6>

00001ba8 <main>:
#endif

int main(void)
	{

		initTimer();
    1ba8:	60 d2       	rcall	.+1216   	; 0x206a <_Z9initTimerv>
    1baa:	27 9a       	sbi	0x04, 7	; 4
		sbi(DDRB, 7);
    1bac:	2f 9a       	sbi	0x05, 7	; 5
		sbi(PORTB, 7);
    1bae:	20 9a       	sbi	0x04, 0	; 4
		sbi(DDRB, 0);
    1bb0:	28 9a       	sbi	0x05, 0	; 5
		sbi(PORTB, 0);
    1bb2:	50 9a       	sbi	0x0a, 0	; 10
		sbi(E_RST_DDR, E_RST);
    1bb4:	58 98       	cbi	0x0b, 0	; 11
		cbi(E_RST_PORT, E_RST);
    1bb6:	51 9a       	sbi	0x0a, 1	; 10
		sbi(E_CH_PD_DDR, E_CH_PD);
    1bb8:	59 98       	cbi	0x0b, 1	; 11
		cbi(E_CH_PD_PORT, E_CH_PD);
    1bba:	68 ee       	ldi	r22, 0xE8	; 232
		delay(1000);
    1bbc:	73 e0       	ldi	r23, 0x03	; 3
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	2b d2       	rcall	.+1110   	; 0x201a <_Z5delaym>
    1bc4:	84 ef       	ldi	r24, 0xF4	; 244
    1bc6:	e8 2e       	mov	r14, r24
		flashPixels(PIXELS, 32, 0, 0, 3, 500);
    1bc8:	ff 24       	eor	r15, r15
    1bca:	f3 94       	inc	r15
    1bcc:	03 e0       	ldi	r16, 0x03	; 3
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	40 e0       	ldi	r20, 0x00	; 0
    1bd2:	60 e2       	ldi	r22, 0x20	; 32
    1bd4:	82 e3       	ldi	r24, 0x32	; 50
    1bd6:	3d df       	rcall	.-390    	; 0x1a52 <_Z11flashPixelshhhhhj>
    1bd8:	8a ea       	ldi	r24, 0xAA	; 170
    1bda:	95 e5       	ldi	r25, 0x55	; 85
    1bdc:	90 93 0a 03 	sts	0x030A, r25
		StackSignature = SIGNATURE;
    1be0:	80 93 09 03 	sts	0x0309, r24
    1be4:	78 94       	sei
    1be6:	20 9a       	sbi	0x04, 0	; 4
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	40 e0       	ldi	r20, 0x00	; 0
				USBSerial.StreamTask();
				_delay_ms(100);
			}
#endif
		GlobalInterruptEnable();
		sbi(DDRB, 0);
    1bec:	60 e0       	ldi	r22, 0x00	; 0
		fillPixels(150, 0, 0, 0);
    1bee:	86 e9       	ldi	r24, 0x96	; 150
    1bf0:	0c df       	rcall	.-488    	; 0x1a0a <_Z10fillPixelshhhh>
    1bf2:	82 e3       	ldi	r24, 0x32	; 50
    1bf4:	60 df       	rcall	.-320    	; 0x1ab6 <_Z9PixelTesth>
    1bf6:	fd cf       	rjmp	.-6      	; 0x1bf2 <main+0x4a>

00001bf8 <_GLOBAL__sub_I_StackSignature>:
			}
	}

volatile bool start = false;

NeoPixels neo(PIXELS);
    1bf8:	62 e3       	ldi	r22, 0x32	; 50
    1bfa:	70 e0       	ldi	r23, 0x00	; 0
    1bfc:	87 e8       	ldi	r24, 0x87	; 135
    1bfe:	91 e0       	ldi	r25, 0x01	; 1
    1c00:	0e 94 3c 04 	call	0x878	; 0x878 <_ZN9NeoPixelsC1Ej>
MyMqtt mqttsock;
    1c04:	83 e1       	ldi	r24, 0x13	; 19
    1c06:	91 e0       	ldi	r25, 0x01	; 1
    1c08:	7d cb       	rjmp	.-2310   	; 0x1304 <_ZN6MyMqttC1Ev>

00001c0a <_ZN9HWSerial13getEv>:
    1c0a:	4f b7       	in	r20, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	fc 01       	movw	r30, r24
    1c10:	ec 59       	subi	r30, 0x9C	; 156
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	20 81       	ld	r18, Z
    1c16:	dc 01       	movw	r26, r24
    1c18:	ab 59       	subi	r26, 0x9B	; 155
    1c1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c1c:	3c 91       	ld	r19, X
    1c1e:	23 17       	cp	r18, r19
    1c20:	71 f0       	breq	.+28     	; 0x1c3e <_ZN9HWSerial13getEv+0x34>
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	dc 01       	movw	r26, r24
    1c26:	a2 0f       	add	r26, r18
    1c28:	b3 1f       	adc	r27, r19
    1c2a:	94 96       	adiw	r26, 0x24	; 36
    1c2c:	8c 91       	ld	r24, X
    1c2e:	2f 5f       	subi	r18, 0xFF	; 255
    1c30:	3f 4f       	sbci	r19, 0xFF	; 255
    1c32:	2f 73       	andi	r18, 0x3F	; 63
    1c34:	33 27       	eor	r19, r19
    1c36:	20 83       	st	Z, r18
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	4f bf       	out	0x3f, r20	; 63
    1c3c:	08 95       	ret
    1c3e:	8f ef       	ldi	r24, 0xFF	; 255
    1c40:	9f ef       	ldi	r25, 0xFF	; 255
    1c42:	fb cf       	rjmp	.-10     	; 0x1c3a <_ZN9HWSerial13getEv+0x30>

00001c44 <_ZN9HWSerial16putrxcEc>:
    1c44:	cf 93       	push	r28
    1c46:	df 93       	push	r29
    1c48:	fc 01       	movw	r30, r24
    1c4a:	7f b7       	in	r23, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	dc 01       	movw	r26, r24
    1c50:	ab 59       	subi	r26, 0x9B	; 155
    1c52:	bf 4f       	sbci	r27, 0xFF	; 255
    1c54:	9c 91       	ld	r25, X
    1c56:	29 2f       	mov	r18, r25
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	a9 01       	movw	r20, r18
    1c5c:	4f 5f       	subi	r20, 0xFF	; 255
    1c5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c60:	4f 73       	andi	r20, 0x3F	; 63
    1c62:	55 27       	eor	r21, r21
    1c64:	ef 01       	movw	r28, r30
    1c66:	cc 59       	subi	r28, 0x9C	; 156
    1c68:	df 4f       	sbci	r29, 0xFF	; 255
    1c6a:	88 81       	ld	r24, Y
    1c6c:	84 17       	cp	r24, r20
    1c6e:	49 f0       	breq	.+18     	; 0x1c82 <_ZN9HWSerial16putrxcEc+0x3e>
    1c70:	e2 0f       	add	r30, r18
    1c72:	f3 1f       	adc	r31, r19
    1c74:	64 a3       	std	Z+36, r22	; 0x24
    1c76:	4c 93       	st	X, r20
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	7f bf       	out	0x3f, r23	; 63
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	08 95       	ret
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	7f bf       	out	0x3f, r23	; 63
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	08 95       	ret

00001c8c <_ZN9HWSerial16gettxcEv>:
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	4f b7       	in	r20, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	22 a1       	ldd	r18, Z+34	; 0x22
    1c94:	83 a1       	ldd	r24, Z+35	; 0x23
    1c96:	28 17       	cp	r18, r24
    1c98:	71 f0       	breq	.+28     	; 0x1cb6 <_ZN9HWSerial16gettxcEv+0x2a>
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	df 01       	movw	r26, r30
    1c9e:	a2 0f       	add	r26, r18
    1ca0:	b3 1f       	adc	r27, r19
    1ca2:	12 96       	adiw	r26, 0x02	; 2
    1ca4:	8c 91       	ld	r24, X
    1ca6:	2f 5f       	subi	r18, 0xFF	; 255
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    1caa:	2f 71       	andi	r18, 0x1F	; 31
    1cac:	33 27       	eor	r19, r19
    1cae:	22 a3       	std	Z+34, r18	; 0x22
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	4f bf       	out	0x3f, r20	; 63
    1cb4:	08 95       	ret
    1cb6:	8f ef       	ldi	r24, 0xFF	; 255
    1cb8:	9f ef       	ldi	r25, 0xFF	; 255
    1cba:	fb cf       	rjmp	.-10     	; 0x1cb2 <_ZN9HWSerial16gettxcEv+0x26>

00001cbc <_ZN9HWSerial17PutCharEcb>:
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	5f b7       	in	r21, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	83 a1       	ldd	r24, Z+35	; 0x23
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	9c 01       	movw	r18, r24
    1cc8:	2f 5f       	subi	r18, 0xFF	; 255
    1cca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ccc:	2f 71       	andi	r18, 0x1F	; 31
    1cce:	33 27       	eor	r19, r19
    1cd0:	72 a1       	ldd	r23, Z+34	; 0x22
    1cd2:	72 17       	cp	r23, r18
    1cd4:	d9 f0       	breq	.+54     	; 0x1d0c <_ZN9HWSerial17PutCharEcb+0x50>
    1cd6:	df 01       	movw	r26, r30
    1cd8:	a8 0f       	add	r26, r24
    1cda:	b9 1f       	adc	r27, r25
    1cdc:	12 96       	adiw	r26, 0x02	; 2
    1cde:	6c 93       	st	X, r22
    1ce0:	23 a3       	std	Z+35, r18	; 0x23
    1ce2:	5f bf       	out	0x3f, r21	; 63
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	ea 59       	subi	r30, 0x9A	; 154
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	90 81       	ld	r25, Z
    1cec:	90 fd       	sbrc	r25, 0
    1cee:	0d c0       	rjmp	.+26     	; 0x1d0a <_ZN9HWSerial17PutCharEcb+0x4e>
    1cf0:	91 60       	ori	r25, 0x01	; 1
    1cf2:	90 83       	st	Z, r25
    1cf4:	90 91 c9 00 	lds	r25, 0x00C9
    1cf8:	90 62       	ori	r25, 0x20	; 32
    1cfa:	90 93 c9 00 	sts	0x00C9, r25
    1cfe:	90 91 c8 00 	lds	r25, 0x00C8
    1d02:	90 64       	ori	r25, 0x40	; 64
    1d04:	90 93 c8 00 	sts	0x00C8, r25
    1d08:	08 95       	ret
    1d0a:	08 95       	ret
    1d0c:	5f bf       	out	0x3f, r21	; 63
    1d0e:	41 11       	cpse	r20, r1
    1d10:	03 c0       	rjmp	.+6      	; 0x1d18 <_ZN9HWSerial17PutCharEcb+0x5c>
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	e8 cf       	rjmp	.-48     	; 0x1ce6 <_ZN9HWSerial17PutCharEcb+0x2a>
    1d16:	4f bf       	out	0x3f, r20	; 63
    1d18:	4f b7       	in	r20, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	83 a1       	ldd	r24, Z+35	; 0x23
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	9c 01       	movw	r18, r24
    1d22:	2f 5f       	subi	r18, 0xFF	; 255
    1d24:	3f 4f       	sbci	r19, 0xFF	; 255
    1d26:	2f 71       	andi	r18, 0x1F	; 31
    1d28:	32 a1       	ldd	r19, Z+34	; 0x22
    1d2a:	23 17       	cp	r18, r19
    1d2c:	a1 f3       	breq	.-24     	; 0x1d16 <_ZN9HWSerial17PutCharEcb+0x5a>
    1d2e:	df 01       	movw	r26, r30
    1d30:	a8 0f       	add	r26, r24
    1d32:	b9 1f       	adc	r27, r25
    1d34:	12 96       	adiw	r26, 0x02	; 2
    1d36:	6c 93       	st	X, r22
    1d38:	23 a3       	std	Z+35, r18	; 0x23
    1d3a:	4f bf       	out	0x3f, r20	; 63
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	d3 cf       	rjmp	.-90     	; 0x1ce6 <_ZN9HWSerial17PutCharEcb+0x2a>

00001d40 <_ZN9HWSerial15beginEm>:
    1d40:	cf 92       	push	r12
    1d42:	df 92       	push	r13
    1d44:	ef 92       	push	r14
    1d46:	ff 92       	push	r15
    1d48:	6a 01       	movw	r12, r20
    1d4a:	7b 01       	movw	r14, r22
    1d4c:	41 15       	cp	r20, r1
    1d4e:	51 4e       	sbci	r21, 0xE1	; 225
    1d50:	61 05       	cpc	r22, r1
    1d52:	71 05       	cpc	r23, r1
    1d54:	d1 f0       	breq	.+52     	; 0x1d8a <_ZN9HWSerial15beginEm+0x4a>
    1d56:	80 91 c8 00 	lds	r24, 0x00C8
    1d5a:	82 60       	ori	r24, 0x02	; 2
    1d5c:	80 93 c8 00 	sts	0x00C8, r24
    1d60:	60 e0       	ldi	r22, 0x00	; 0
    1d62:	79 e0       	ldi	r23, 0x09	; 9
    1d64:	8d e3       	ldi	r24, 0x3D	; 61
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a7 01       	movw	r20, r14
    1d6a:	96 01       	movw	r18, r12
    1d6c:	f0 d1       	rcall	.+992    	; 0x214e <__udivmodsi4>
    1d6e:	da 01       	movw	r26, r20
    1d70:	c9 01       	movw	r24, r18
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	a1 09       	sbc	r26, r1
    1d76:	b1 09       	sbc	r27, r1
    1d78:	b6 95       	lsr	r27
    1d7a:	a7 95       	ror	r26
    1d7c:	97 95       	ror	r25
    1d7e:	87 95       	ror	r24
    1d80:	9c 01       	movw	r18, r24
    1d82:	21 15       	cp	r18, r1
    1d84:	80 e1       	ldi	r24, 0x10	; 16
    1d86:	38 07       	cpc	r19, r24
    1d88:	b0 f0       	brcs	.+44     	; 0x1db6 <_ZN9HWSerial15beginEm+0x76>
    1d8a:	80 91 c8 00 	lds	r24, 0x00C8
    1d8e:	8d 7f       	andi	r24, 0xFD	; 253
    1d90:	80 93 c8 00 	sts	0x00C8, r24
    1d94:	60 e8       	ldi	r22, 0x80	; 128
    1d96:	74 e8       	ldi	r23, 0x84	; 132
    1d98:	8e e1       	ldi	r24, 0x1E	; 30
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	a7 01       	movw	r20, r14
    1d9e:	96 01       	movw	r18, r12
    1da0:	d6 d1       	rcall	.+940    	; 0x214e <__udivmodsi4>
    1da2:	da 01       	movw	r26, r20
    1da4:	c9 01       	movw	r24, r18
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	a1 09       	sbc	r26, r1
    1daa:	b1 09       	sbc	r27, r1
    1dac:	b6 95       	lsr	r27
    1dae:	a7 95       	ror	r26
    1db0:	97 95       	ror	r25
    1db2:	87 95       	ror	r24
    1db4:	9c 01       	movw	r18, r24
    1db6:	30 93 cd 00 	sts	0x00CD, r19
    1dba:	20 93 cc 00 	sts	0x00CC, r18
    1dbe:	80 91 c9 00 	lds	r24, 0x00C9
    1dc2:	80 61       	ori	r24, 0x10	; 16
    1dc4:	80 93 c9 00 	sts	0x00C9, r24
    1dc8:	80 91 c9 00 	lds	r24, 0x00C9
    1dcc:	88 60       	ori	r24, 0x08	; 8
    1dce:	80 93 c9 00 	sts	0x00C9, r24
    1dd2:	80 91 c9 00 	lds	r24, 0x00C9
    1dd6:	80 68       	ori	r24, 0x80	; 128
    1dd8:	80 93 c9 00 	sts	0x00C9, r24
    1ddc:	80 91 c9 00 	lds	r24, 0x00C9
    1de0:	8f 7d       	andi	r24, 0xDF	; 223
    1de2:	80 93 c9 00 	sts	0x00C9, r24
    1de6:	78 94       	sei
    1de8:	ff 90       	pop	r15
    1dea:	ef 90       	pop	r14
    1dec:	df 90       	pop	r13
    1dee:	cf 90       	pop	r12
    1df0:	08 95       	ret

00001df2 <__vector_24>:
    1df2:	1f 92       	push	r1
    1df4:	0f 92       	push	r0
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	0f 92       	push	r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	2f 93       	push	r18
    1dfe:	3f 93       	push	r19
    1e00:	8f 93       	push	r24
    1e02:	9f 93       	push	r25
    1e04:	ef 93       	push	r30
    1e06:	ff 93       	push	r31
    1e08:	2f b7       	in	r18, 0x3f	; 63
    1e0a:	f8 94       	cli
    1e0c:	80 91 bb 02 	lds	r24, 0x02BB
    1e10:	90 91 bc 02 	lds	r25, 0x02BC
    1e14:	89 17       	cp	r24, r25
    1e16:	c1 f0       	breq	.+48     	; 0x1e48 <__vector_24+0x56>
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	e7 56       	subi	r30, 0x67	; 103
    1e1e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e20:	32 81       	ldd	r19, Z+2	; 0x02
    1e22:	01 96       	adiw	r24, 0x01	; 1
    1e24:	8f 71       	andi	r24, 0x1F	; 31
    1e26:	99 27       	eor	r25, r25
    1e28:	80 93 bb 02 	sts	0x02BB, r24
    1e2c:	2f bf       	out	0x3f, r18	; 63
    1e2e:	30 93 ce 00 	sts	0x00CE, r19
    1e32:	ff 91       	pop	r31
    1e34:	ef 91       	pop	r30
    1e36:	9f 91       	pop	r25
    1e38:	8f 91       	pop	r24
    1e3a:	3f 91       	pop	r19
    1e3c:	2f 91       	pop	r18
    1e3e:	0f 90       	pop	r0
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	0f 90       	pop	r0
    1e44:	1f 90       	pop	r1
    1e46:	18 95       	reti
    1e48:	2f bf       	out	0x3f, r18	; 63
    1e4a:	80 91 c9 00 	lds	r24, 0x00C9
    1e4e:	8f 7d       	andi	r24, 0xDF	; 223
    1e50:	80 93 c9 00 	sts	0x00C9, r24
    1e54:	80 91 ff 02 	lds	r24, 0x02FF
    1e58:	8e 7f       	andi	r24, 0xFE	; 254
    1e5a:	80 93 ff 02 	sts	0x02FF, r24
    1e5e:	e9 cf       	rjmp	.-46     	; 0x1e32 <__vector_24+0x40>

00001e60 <__vector_23>:
    1e60:	1f 92       	push	r1
    1e62:	0f 92       	push	r0
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	0f 92       	push	r0
    1e68:	11 24       	eor	r1, r1
    1e6a:	2f 93       	push	r18
    1e6c:	3f 93       	push	r19
    1e6e:	4f 93       	push	r20
    1e70:	5f 93       	push	r21
    1e72:	6f 93       	push	r22
    1e74:	8f 93       	push	r24
    1e76:	9f 93       	push	r25
    1e78:	ef 93       	push	r30
    1e7a:	ff 93       	push	r31
    1e7c:	80 91 c8 00 	lds	r24, 0x00C8
    1e80:	82 fd       	sbrc	r24, 2
    1e82:	18 c0       	rjmp	.+48     	; 0x1eb4 <__vector_23+0x54>
    1e84:	60 91 ce 00 	lds	r22, 0x00CE
    1e88:	4f b7       	in	r20, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	80 91 fe 02 	lds	r24, 0x02FE
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	9c 01       	movw	r18, r24
    1e94:	2f 5f       	subi	r18, 0xFF	; 255
    1e96:	3f 4f       	sbci	r19, 0xFF	; 255
    1e98:	2f 73       	andi	r18, 0x3F	; 63
    1e9a:	33 27       	eor	r19, r19
    1e9c:	50 91 fd 02 	lds	r21, 0x02FD
    1ea0:	52 17       	cp	r21, r18
    1ea2:	c1 f0       	breq	.+48     	; 0x1ed4 <__vector_23+0x74>
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	e7 56       	subi	r30, 0x67	; 103
    1ea8:	fd 4f       	sbci	r31, 0xFD	; 253
    1eaa:	64 a3       	std	Z+36, r22	; 0x24
    1eac:	20 93 fe 02 	sts	0x02FE, r18
    1eb0:	4f bf       	out	0x3f, r20	; 63
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <__vector_23+0x58>
    1eb4:	80 91 ce 00 	lds	r24, 0x00CE
    1eb8:	ff 91       	pop	r31
    1eba:	ef 91       	pop	r30
    1ebc:	9f 91       	pop	r25
    1ebe:	8f 91       	pop	r24
    1ec0:	6f 91       	pop	r22
    1ec2:	5f 91       	pop	r21
    1ec4:	4f 91       	pop	r20
    1ec6:	3f 91       	pop	r19
    1ec8:	2f 91       	pop	r18
    1eca:	0f 90       	pop	r0
    1ecc:	0f be       	out	0x3f, r0	; 63
    1ece:	0f 90       	pop	r0
    1ed0:	1f 90       	pop	r1
    1ed2:	18 95       	reti
    1ed4:	4f bf       	out	0x3f, r20	; 63
    1ed6:	80 91 ff 02 	lds	r24, 0x02FF
    1eda:	82 60       	ori	r24, 0x02	; 2
    1edc:	80 93 ff 02 	sts	0x02FF, r24
    1ee0:	eb cf       	rjmp	.-42     	; 0x1eb8 <__vector_23+0x58>

00001ee2 <_GLOBAL__sub_I_Serial1>:
    1ee2:	e9 e9       	ldi	r30, 0x99	; 153
    1ee4:	f2 e0       	ldi	r31, 0x02	; 2
    1ee6:	13 a2       	std	Z+35, r1	; 0x23
    1ee8:	12 a2       	std	Z+34, r1	; 0x22
    1eea:	10 92 fe 02 	sts	0x02FE, r1
    1eee:	10 92 fd 02 	sts	0x02FD, r1
    1ef2:	8a e0       	ldi	r24, 0x0A	; 10
    1ef4:	91 e0       	ldi	r25, 0x01	; 1
    1ef6:	91 83       	std	Z+1, r25	; 0x01
    1ef8:	80 83       	st	Z, r24
    1efa:	ef ef       	ldi	r30, 0xFF	; 255
    1efc:	f2 e0       	ldi	r31, 0x02	; 2
    1efe:	80 81       	ld	r24, Z
    1f00:	8e 7f       	andi	r24, 0xFE	; 254
    1f02:	8d 7f       	andi	r24, 0xFD	; 253
    1f04:	80 83       	st	Z, r24
    1f06:	08 95       	ret

00001f08 <__vector_21>:
    1f08:	1f 92       	push	r1
    1f0a:	0f 92       	push	r0
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	0f 92       	push	r0
    1f10:	11 24       	eor	r1, r1
    1f12:	2f 93       	push	r18
    1f14:	3f 93       	push	r19
    1f16:	4f 93       	push	r20
    1f18:	5f 93       	push	r21
    1f1a:	6f 93       	push	r22
    1f1c:	7f 93       	push	r23
    1f1e:	8f 93       	push	r24
    1f20:	9f 93       	push	r25
    1f22:	af 93       	push	r26
    1f24:	bf 93       	push	r27
    1f26:	ef 93       	push	r30
    1f28:	ff 93       	push	r31
    1f2a:	80 91 01 03 	lds	r24, 0x0301
    1f2e:	90 91 02 03 	lds	r25, 0x0302
    1f32:	a0 91 03 03 	lds	r26, 0x0303
    1f36:	b0 91 04 03 	lds	r27, 0x0304
    1f3a:	30 91 00 03 	lds	r19, 0x0300
    1f3e:	23 e0       	ldi	r18, 0x03	; 3
    1f40:	23 0f       	add	r18, r19
    1f42:	2d 37       	cpi	r18, 0x7D	; 125
    1f44:	a0 f1       	brcs	.+104    	; 0x1fae <__vector_21+0xa6>
    1f46:	26 e8       	ldi	r18, 0x86	; 134
    1f48:	23 0f       	add	r18, r19
    1f4a:	02 96       	adiw	r24, 0x02	; 2
    1f4c:	a1 1d       	adc	r26, r1
    1f4e:	b1 1d       	adc	r27, r1
    1f50:	20 93 00 03 	sts	0x0300, r18
    1f54:	80 93 01 03 	sts	0x0301, r24
    1f58:	90 93 02 03 	sts	0x0302, r25
    1f5c:	a0 93 03 03 	sts	0x0303, r26
    1f60:	b0 93 04 03 	sts	0x0304, r27
    1f64:	80 91 05 03 	lds	r24, 0x0305
    1f68:	90 91 06 03 	lds	r25, 0x0306
    1f6c:	a0 91 07 03 	lds	r26, 0x0307
    1f70:	b0 91 08 03 	lds	r27, 0x0308
    1f74:	01 96       	adiw	r24, 0x01	; 1
    1f76:	a1 1d       	adc	r26, r1
    1f78:	b1 1d       	adc	r27, r1
    1f7a:	80 93 05 03 	sts	0x0305, r24
    1f7e:	90 93 06 03 	sts	0x0306, r25
    1f82:	a0 93 07 03 	sts	0x0307, r26
    1f86:	b0 93 08 03 	sts	0x0308, r27
    1f8a:	99 d0       	rcall	.+306    	; 0x20be <_Z10TrackStackv>
    1f8c:	ff 91       	pop	r31
    1f8e:	ef 91       	pop	r30
    1f90:	bf 91       	pop	r27
    1f92:	af 91       	pop	r26
    1f94:	9f 91       	pop	r25
    1f96:	8f 91       	pop	r24
    1f98:	7f 91       	pop	r23
    1f9a:	6f 91       	pop	r22
    1f9c:	5f 91       	pop	r21
    1f9e:	4f 91       	pop	r20
    1fa0:	3f 91       	pop	r19
    1fa2:	2f 91       	pop	r18
    1fa4:	0f 90       	pop	r0
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	0f 90       	pop	r0
    1faa:	1f 90       	pop	r1
    1fac:	18 95       	reti
    1fae:	01 96       	adiw	r24, 0x01	; 1
    1fb0:	a1 1d       	adc	r26, r1
    1fb2:	b1 1d       	adc	r27, r1
    1fb4:	cd cf       	rjmp	.-102    	; 0x1f50 <__vector_21+0x48>

00001fb6 <_Z6millisv>:
    1fb6:	2f b7       	in	r18, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	60 91 01 03 	lds	r22, 0x0301
    1fbe:	70 91 02 03 	lds	r23, 0x0302
    1fc2:	80 91 03 03 	lds	r24, 0x0303
    1fc6:	90 91 04 03 	lds	r25, 0x0304
    1fca:	2f bf       	out	0x3f, r18	; 63
    1fcc:	08 95       	ret

00001fce <_Z6microsv>:
    1fce:	3f b7       	in	r19, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	80 91 05 03 	lds	r24, 0x0305
    1fd6:	90 91 06 03 	lds	r25, 0x0306
    1fda:	a0 91 07 03 	lds	r26, 0x0307
    1fde:	b0 91 08 03 	lds	r27, 0x0308
    1fe2:	26 b5       	in	r18, 0x26	; 38
    1fe4:	a8 9b       	sbis	0x15, 0	; 21
    1fe6:	05 c0       	rjmp	.+10     	; 0x1ff2 <_Z6microsv+0x24>
    1fe8:	2f 3f       	cpi	r18, 0xFF	; 255
    1fea:	19 f0       	breq	.+6      	; 0x1ff2 <_Z6microsv+0x24>
    1fec:	01 96       	adiw	r24, 0x01	; 1
    1fee:	a1 1d       	adc	r26, r1
    1ff0:	b1 1d       	adc	r27, r1
    1ff2:	3f bf       	out	0x3f, r19	; 63
    1ff4:	ba 2f       	mov	r27, r26
    1ff6:	a9 2f       	mov	r26, r25
    1ff8:	98 2f       	mov	r25, r24
    1ffa:	88 27       	eor	r24, r24
    1ffc:	82 0f       	add	r24, r18
    1ffe:	91 1d       	adc	r25, r1
    2000:	a1 1d       	adc	r26, r1
    2002:	b1 1d       	adc	r27, r1
    2004:	bc 01       	movw	r22, r24
    2006:	cd 01       	movw	r24, r26
    2008:	66 0f       	add	r22, r22
    200a:	77 1f       	adc	r23, r23
    200c:	88 1f       	adc	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	66 0f       	add	r22, r22
    2012:	77 1f       	adc	r23, r23
    2014:	88 1f       	adc	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	08 95       	ret

0000201a <_Z5delaym>:
    201a:	cf 92       	push	r12
    201c:	df 92       	push	r13
    201e:	ef 92       	push	r14
    2020:	ff 92       	push	r15
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	6b 01       	movw	r12, r22
    2028:	7c 01       	movw	r14, r24
    202a:	d1 df       	rcall	.-94     	; 0x1fce <_Z6microsv>
    202c:	eb 01       	movw	r28, r22
    202e:	c1 14       	cp	r12, r1
    2030:	d1 04       	cpc	r13, r1
    2032:	e1 04       	cpc	r14, r1
    2034:	f1 04       	cpc	r15, r1
    2036:	91 f0       	breq	.+36     	; 0x205c <_Z5delaym+0x42>
    2038:	ca df       	rcall	.-108    	; 0x1fce <_Z6microsv>
    203a:	6c 1b       	sub	r22, r28
    203c:	7d 0b       	sbc	r23, r29
    203e:	68 3e       	cpi	r22, 0xE8	; 232
    2040:	73 40       	sbci	r23, 0x03	; 3
    2042:	d0 f3       	brcs	.-12     	; 0x2038 <_Z5delaym+0x1e>
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	c8 1a       	sub	r12, r24
    2048:	d1 08       	sbc	r13, r1
    204a:	e1 08       	sbc	r14, r1
    204c:	f1 08       	sbc	r15, r1
    204e:	c8 51       	subi	r28, 0x18	; 24
    2050:	dc 4f       	sbci	r29, 0xFC	; 252
    2052:	c1 14       	cp	r12, r1
    2054:	d1 04       	cpc	r13, r1
    2056:	e1 04       	cpc	r14, r1
    2058:	f1 04       	cpc	r15, r1
    205a:	71 f7       	brne	.-36     	; 0x2038 <_Z5delaym+0x1e>
    205c:	df 91       	pop	r29
    205e:	cf 91       	pop	r28
    2060:	ff 90       	pop	r15
    2062:	ef 90       	pop	r14
    2064:	df 90       	pop	r13
    2066:	cf 90       	pop	r12
    2068:	08 95       	ret

0000206a <_Z9initTimerv>:
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	80 e8       	ldi	r24, 0x80	; 128
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	f8 94       	cli
    2072:	80 93 61 00 	sts	0x0061, r24
    2076:	90 93 61 00 	sts	0x0061, r25
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	78 94       	sei
    207e:	84 b5       	in	r24, 0x24	; 36
    2080:	82 60       	ori	r24, 0x02	; 2
    2082:	84 bd       	out	0x24, r24	; 36
    2084:	84 b5       	in	r24, 0x24	; 36
    2086:	81 60       	ori	r24, 0x01	; 1
    2088:	84 bd       	out	0x24, r24	; 36
    208a:	85 b5       	in	r24, 0x25	; 37
    208c:	82 60       	ori	r24, 0x02	; 2
    208e:	85 bd       	out	0x25, r24	; 37
    2090:	85 b5       	in	r24, 0x25	; 37
    2092:	81 60       	ori	r24, 0x01	; 1
    2094:	85 bd       	out	0x25, r24	; 37
    2096:	ee e6       	ldi	r30, 0x6E	; 110
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	81 60       	ori	r24, 0x01	; 1
    209e:	80 83       	st	Z, r24
    20a0:	e1 e8       	ldi	r30, 0x81	; 129
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	10 82       	st	Z, r1
    20a6:	80 81       	ld	r24, Z
    20a8:	82 60       	ori	r24, 0x02	; 2
    20aa:	80 83       	st	Z, r24
    20ac:	80 81       	ld	r24, Z
    20ae:	81 60       	ori	r24, 0x01	; 1
    20b0:	80 83       	st	Z, r24
    20b2:	e0 e8       	ldi	r30, 0x80	; 128
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	81 60       	ori	r24, 0x01	; 1
    20ba:	80 83       	st	Z, r24
    20bc:	08 95       	ret

000020be <_Z10TrackStackv>:
    20be:	2d b7       	in	r18, 0x3d	; 61
    20c0:	3e b7       	in	r19, 0x3e	; 62
    20c2:	80 91 04 01 	lds	r24, 0x0104
    20c6:	90 91 05 01 	lds	r25, 0x0105
    20ca:	28 17       	cp	r18, r24
    20cc:	39 07       	cpc	r19, r25
    20ce:	30 f4       	brcc	.+12     	; 0x20dc <_Z10TrackStackv+0x1e>
    20d0:	8d b7       	in	r24, 0x3d	; 61
    20d2:	9e b7       	in	r25, 0x3e	; 62
    20d4:	90 93 05 01 	sts	0x0105, r25
    20d8:	80 93 04 01 	sts	0x0104, r24
    20dc:	08 95       	ret

000020de <__mulhi3>:
    20de:	00 24       	eor	r0, r0
    20e0:	55 27       	eor	r21, r21
    20e2:	04 c0       	rjmp	.+8      	; 0x20ec <__mulhi3+0xe>
    20e4:	08 0e       	add	r0, r24
    20e6:	59 1f       	adc	r21, r25
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	29 f0       	breq	.+10     	; 0x20fa <__mulhi3+0x1c>
    20f0:	76 95       	lsr	r23
    20f2:	67 95       	ror	r22
    20f4:	b8 f3       	brcs	.-18     	; 0x20e4 <__mulhi3+0x6>
    20f6:	71 05       	cpc	r23, r1
    20f8:	b9 f7       	brne	.-18     	; 0x20e8 <__mulhi3+0xa>
    20fa:	80 2d       	mov	r24, r0
    20fc:	95 2f       	mov	r25, r21
    20fe:	08 95       	ret

00002100 <__udivmodhi4>:
    2100:	aa 1b       	sub	r26, r26
    2102:	bb 1b       	sub	r27, r27
    2104:	51 e1       	ldi	r21, 0x11	; 17
    2106:	07 c0       	rjmp	.+14     	; 0x2116 <__udivmodhi4_ep>

00002108 <__udivmodhi4_loop>:
    2108:	aa 1f       	adc	r26, r26
    210a:	bb 1f       	adc	r27, r27
    210c:	a6 17       	cp	r26, r22
    210e:	b7 07       	cpc	r27, r23
    2110:	10 f0       	brcs	.+4      	; 0x2116 <__udivmodhi4_ep>
    2112:	a6 1b       	sub	r26, r22
    2114:	b7 0b       	sbc	r27, r23

00002116 <__udivmodhi4_ep>:
    2116:	88 1f       	adc	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	5a 95       	dec	r21
    211c:	a9 f7       	brne	.-22     	; 0x2108 <__udivmodhi4_loop>
    211e:	80 95       	com	r24
    2120:	90 95       	com	r25
    2122:	bc 01       	movw	r22, r24
    2124:	cd 01       	movw	r24, r26
    2126:	08 95       	ret

00002128 <__divmodhi4>:
    2128:	97 fb       	bst	r25, 7
    212a:	07 2e       	mov	r0, r23
    212c:	16 f4       	brtc	.+4      	; 0x2132 <__divmodhi4+0xa>
    212e:	00 94       	com	r0
    2130:	06 d0       	rcall	.+12     	; 0x213e <__divmodhi4_neg1>
    2132:	77 fd       	sbrc	r23, 7
    2134:	08 d0       	rcall	.+16     	; 0x2146 <__divmodhi4_neg2>
    2136:	e4 df       	rcall	.-56     	; 0x2100 <__udivmodhi4>
    2138:	07 fc       	sbrc	r0, 7
    213a:	05 d0       	rcall	.+10     	; 0x2146 <__divmodhi4_neg2>
    213c:	3e f4       	brtc	.+14     	; 0x214c <__divmodhi4_exit>

0000213e <__divmodhi4_neg1>:
    213e:	90 95       	com	r25
    2140:	81 95       	neg	r24
    2142:	9f 4f       	sbci	r25, 0xFF	; 255
    2144:	08 95       	ret

00002146 <__divmodhi4_neg2>:
    2146:	70 95       	com	r23
    2148:	61 95       	neg	r22
    214a:	7f 4f       	sbci	r23, 0xFF	; 255

0000214c <__divmodhi4_exit>:
    214c:	08 95       	ret

0000214e <__udivmodsi4>:
    214e:	a1 e2       	ldi	r26, 0x21	; 33
    2150:	1a 2e       	mov	r1, r26
    2152:	aa 1b       	sub	r26, r26
    2154:	bb 1b       	sub	r27, r27
    2156:	fd 01       	movw	r30, r26
    2158:	0d c0       	rjmp	.+26     	; 0x2174 <__udivmodsi4_ep>

0000215a <__udivmodsi4_loop>:
    215a:	aa 1f       	adc	r26, r26
    215c:	bb 1f       	adc	r27, r27
    215e:	ee 1f       	adc	r30, r30
    2160:	ff 1f       	adc	r31, r31
    2162:	a2 17       	cp	r26, r18
    2164:	b3 07       	cpc	r27, r19
    2166:	e4 07       	cpc	r30, r20
    2168:	f5 07       	cpc	r31, r21
    216a:	20 f0       	brcs	.+8      	; 0x2174 <__udivmodsi4_ep>
    216c:	a2 1b       	sub	r26, r18
    216e:	b3 0b       	sbc	r27, r19
    2170:	e4 0b       	sbc	r30, r20
    2172:	f5 0b       	sbc	r31, r21

00002174 <__udivmodsi4_ep>:
    2174:	66 1f       	adc	r22, r22
    2176:	77 1f       	adc	r23, r23
    2178:	88 1f       	adc	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	1a 94       	dec	r1
    217e:	69 f7       	brne	.-38     	; 0x215a <__udivmodsi4_loop>
    2180:	60 95       	com	r22
    2182:	70 95       	com	r23
    2184:	80 95       	com	r24
    2186:	90 95       	com	r25
    2188:	9b 01       	movw	r18, r22
    218a:	ac 01       	movw	r20, r24
    218c:	bd 01       	movw	r22, r26
    218e:	cf 01       	movw	r24, r30
    2190:	08 95       	ret

00002192 <__divmodsi4>:
    2192:	05 2e       	mov	r0, r21
    2194:	97 fb       	bst	r25, 7
    2196:	16 f4       	brtc	.+4      	; 0x219c <__divmodsi4+0xa>
    2198:	00 94       	com	r0
    219a:	0f d0       	rcall	.+30     	; 0x21ba <__negsi2>
    219c:	57 fd       	sbrc	r21, 7
    219e:	05 d0       	rcall	.+10     	; 0x21aa <__divmodsi4_neg2>
    21a0:	d6 df       	rcall	.-84     	; 0x214e <__udivmodsi4>
    21a2:	07 fc       	sbrc	r0, 7
    21a4:	02 d0       	rcall	.+4      	; 0x21aa <__divmodsi4_neg2>
    21a6:	46 f4       	brtc	.+16     	; 0x21b8 <__divmodsi4_exit>
    21a8:	08 c0       	rjmp	.+16     	; 0x21ba <__negsi2>

000021aa <__divmodsi4_neg2>:
    21aa:	50 95       	com	r21
    21ac:	40 95       	com	r20
    21ae:	30 95       	com	r19
    21b0:	21 95       	neg	r18
    21b2:	3f 4f       	sbci	r19, 0xFF	; 255
    21b4:	4f 4f       	sbci	r20, 0xFF	; 255
    21b6:	5f 4f       	sbci	r21, 0xFF	; 255

000021b8 <__divmodsi4_exit>:
    21b8:	08 95       	ret

000021ba <__negsi2>:
    21ba:	90 95       	com	r25
    21bc:	80 95       	com	r24
    21be:	70 95       	com	r23
    21c0:	61 95       	neg	r22
    21c2:	7f 4f       	sbci	r23, 0xFF	; 255
    21c4:	8f 4f       	sbci	r24, 0xFF	; 255
    21c6:	9f 4f       	sbci	r25, 0xFF	; 255
    21c8:	08 95       	ret

000021ca <__mulsidi3>:
    21ca:	68 94       	set
    21cc:	00 13       	cpse	r16, r16

000021ce <__umulsidi3>:
    21ce:	e8 94       	clt
    21d0:	a0 e0       	ldi	r26, 0x00	; 0
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	ed ee       	ldi	r30, 0xED	; 237
    21d6:	f0 e1       	ldi	r31, 0x10	; 16
    21d8:	1d c0       	rjmp	.+58     	; 0x2214 <__prologue_saves__+0x10>
    21da:	ef ef       	ldi	r30, 0xFF	; 255
    21dc:	e7 f9       	bld	r30, 7
    21de:	59 01       	movw	r10, r18
    21e0:	6a 01       	movw	r12, r20
    21e2:	5e 23       	and	r21, r30
    21e4:	55 0f       	add	r21, r21
    21e6:	ee 08       	sbc	r14, r14
    21e8:	fe 2c       	mov	r15, r14
    21ea:	87 01       	movw	r16, r14
    21ec:	9b 01       	movw	r18, r22
    21ee:	ac 01       	movw	r20, r24
    21f0:	9e 23       	and	r25, r30
    21f2:	99 0f       	add	r25, r25
    21f4:	66 0b       	sbc	r22, r22
    21f6:	76 2f       	mov	r23, r22
    21f8:	cb 01       	movw	r24, r22
    21fa:	41 d0       	rcall	.+130    	; 0x227e <__muldi3>
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	ea e0       	ldi	r30, 0x0A	; 10
    2202:	24 c0       	rjmp	.+72     	; 0x224c <__epilogue_restores__+0x10>

00002204 <__prologue_saves__>:
    2204:	2f 92       	push	r2
    2206:	3f 92       	push	r3
    2208:	4f 92       	push	r4
    220a:	5f 92       	push	r5
    220c:	6f 92       	push	r6
    220e:	7f 92       	push	r7
    2210:	8f 92       	push	r8
    2212:	9f 92       	push	r9
    2214:	af 92       	push	r10
    2216:	bf 92       	push	r11
    2218:	cf 92       	push	r12
    221a:	df 92       	push	r13
    221c:	ef 92       	push	r14
    221e:	ff 92       	push	r15
    2220:	0f 93       	push	r16
    2222:	1f 93       	push	r17
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	ca 1b       	sub	r28, r26
    222e:	db 0b       	sbc	r29, r27
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	f8 94       	cli
    2234:	de bf       	out	0x3e, r29	; 62
    2236:	0f be       	out	0x3f, r0	; 63
    2238:	cd bf       	out	0x3d, r28	; 61
    223a:	09 94       	ijmp

0000223c <__epilogue_restores__>:
    223c:	2a 88       	ldd	r2, Y+18	; 0x12
    223e:	39 88       	ldd	r3, Y+17	; 0x11
    2240:	48 88       	ldd	r4, Y+16	; 0x10
    2242:	5f 84       	ldd	r5, Y+15	; 0x0f
    2244:	6e 84       	ldd	r6, Y+14	; 0x0e
    2246:	7d 84       	ldd	r7, Y+13	; 0x0d
    2248:	8c 84       	ldd	r8, Y+12	; 0x0c
    224a:	9b 84       	ldd	r9, Y+11	; 0x0b
    224c:	aa 84       	ldd	r10, Y+10	; 0x0a
    224e:	b9 84       	ldd	r11, Y+9	; 0x09
    2250:	c8 84       	ldd	r12, Y+8	; 0x08
    2252:	df 80       	ldd	r13, Y+7	; 0x07
    2254:	ee 80       	ldd	r14, Y+6	; 0x06
    2256:	fd 80       	ldd	r15, Y+5	; 0x05
    2258:	0c 81       	ldd	r16, Y+4	; 0x04
    225a:	1b 81       	ldd	r17, Y+3	; 0x03
    225c:	aa 81       	ldd	r26, Y+2	; 0x02
    225e:	b9 81       	ldd	r27, Y+1	; 0x01
    2260:	ce 0f       	add	r28, r30
    2262:	d1 1d       	adc	r29, r1
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	de bf       	out	0x3e, r29	; 62
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	cd bf       	out	0x3d, r28	; 61
    226e:	ed 01       	movw	r28, r26
    2270:	08 95       	ret

00002272 <__tablejump2__>:
    2272:	ee 0f       	add	r30, r30
    2274:	ff 1f       	adc	r31, r31
    2276:	05 90       	lpm	r0, Z+
    2278:	f4 91       	lpm	r31, Z
    227a:	e0 2d       	mov	r30, r0
    227c:	09 94       	ijmp

0000227e <__muldi3>:
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	9f 92       	push	r9
    2284:	a0 e4       	ldi	r26, 0x40	; 64
    2286:	9a 2e       	mov	r9, r26
    2288:	00 24       	eor	r0, r0
    228a:	d0 01       	movw	r26, r0
    228c:	e0 01       	movw	r28, r0
    228e:	f0 01       	movw	r30, r0
    2290:	16 95       	lsr	r17
    2292:	07 95       	ror	r16
    2294:	f7 94       	ror	r15
    2296:	e7 94       	ror	r14
    2298:	d7 94       	ror	r13
    229a:	c7 94       	ror	r12
    229c:	b7 94       	ror	r11
    229e:	a7 94       	ror	r10
    22a0:	48 f4       	brcc	.+18     	; 0x22b4 <__muldi3+0x36>
    22a2:	10 68       	ori	r17, 0x80	; 128
    22a4:	a2 0f       	add	r26, r18
    22a6:	b3 1f       	adc	r27, r19
    22a8:	c4 1f       	adc	r28, r20
    22aa:	d5 1f       	adc	r29, r21
    22ac:	e6 1f       	adc	r30, r22
    22ae:	f7 1f       	adc	r31, r23
    22b0:	08 1e       	adc	r0, r24
    22b2:	19 1e       	adc	r1, r25
    22b4:	22 0f       	add	r18, r18
    22b6:	33 1f       	adc	r19, r19
    22b8:	44 1f       	adc	r20, r20
    22ba:	55 1f       	adc	r21, r21
    22bc:	66 1f       	adc	r22, r22
    22be:	77 1f       	adc	r23, r23
    22c0:	88 1f       	adc	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	9a 94       	dec	r9
    22c6:	21 f7       	brne	.-56     	; 0x2290 <__muldi3+0x12>
    22c8:	9d 01       	movw	r18, r26
    22ca:	ae 01       	movw	r20, r28
    22cc:	bf 01       	movw	r22, r30
    22ce:	c0 01       	movw	r24, r0
    22d0:	11 24       	eor	r1, r1
    22d2:	9f 90       	pop	r9
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <do_random>:
    22da:	a0 e0       	ldi	r26, 0x00	; 0
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e2 e7       	ldi	r30, 0x72	; 114
    22e0:	f1 e1       	ldi	r31, 0x11	; 17
    22e2:	96 cf       	rjmp	.-212    	; 0x2210 <__prologue_saves__+0xc>
    22e4:	ec 01       	movw	r28, r24
    22e6:	68 81       	ld	r22, Y
    22e8:	79 81       	ldd	r23, Y+1	; 0x01
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	9b 81       	ldd	r25, Y+3	; 0x03
    22ee:	61 15       	cp	r22, r1
    22f0:	71 05       	cpc	r23, r1
    22f2:	81 05       	cpc	r24, r1
    22f4:	91 05       	cpc	r25, r1
    22f6:	21 f4       	brne	.+8      	; 0x2300 <do_random+0x26>
    22f8:	64 e2       	ldi	r22, 0x24	; 36
    22fa:	79 ed       	ldi	r23, 0xD9	; 217
    22fc:	8b e5       	ldi	r24, 0x5B	; 91
    22fe:	97 e0       	ldi	r25, 0x07	; 7
    2300:	2d e1       	ldi	r18, 0x1D	; 29
    2302:	33 ef       	ldi	r19, 0xF3	; 243
    2304:	41 e0       	ldi	r20, 0x01	; 1
    2306:	50 e0       	ldi	r21, 0x00	; 0
    2308:	44 df       	rcall	.-376    	; 0x2192 <__divmodsi4>
    230a:	49 01       	movw	r8, r18
    230c:	5a 01       	movw	r10, r20
    230e:	27 ea       	ldi	r18, 0xA7	; 167
    2310:	31 e4       	ldi	r19, 0x41	; 65
    2312:	40 e0       	ldi	r20, 0x00	; 0
    2314:	50 e0       	ldi	r21, 0x00	; 0
    2316:	59 df       	rcall	.-334    	; 0x21ca <__mulsidi3>
    2318:	69 01       	movw	r12, r18
    231a:	7a 01       	movw	r14, r20
    231c:	c5 01       	movw	r24, r10
    231e:	b4 01       	movw	r22, r8
    2320:	2c ee       	ldi	r18, 0xEC	; 236
    2322:	34 ef       	ldi	r19, 0xF4	; 244
    2324:	4f ef       	ldi	r20, 0xFF	; 255
    2326:	5f ef       	ldi	r21, 0xFF	; 255
    2328:	50 df       	rcall	.-352    	; 0x21ca <__mulsidi3>
    232a:	02 2f       	mov	r16, r18
    232c:	13 2f       	mov	r17, r19
    232e:	9a 01       	movw	r18, r20
    2330:	d7 01       	movw	r26, r14
    2332:	c6 01       	movw	r24, r12
    2334:	80 0f       	add	r24, r16
    2336:	91 1f       	adc	r25, r17
    2338:	a2 1f       	adc	r26, r18
    233a:	b3 1f       	adc	r27, r19
    233c:	b7 ff       	sbrs	r27, 7
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <do_random+0x6c>
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	a1 09       	sbc	r26, r1
    2344:	b0 48       	sbci	r27, 0x80	; 128
    2346:	88 83       	st	Y, r24
    2348:	99 83       	std	Y+1, r25	; 0x01
    234a:	aa 83       	std	Y+2, r26	; 0x02
    234c:	bb 83       	std	Y+3, r27	; 0x03
    234e:	bc 01       	movw	r22, r24
    2350:	cd 01       	movw	r24, r26
    2352:	9f 77       	andi	r25, 0x7F	; 127
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	ec e0       	ldi	r30, 0x0C	; 12
    235a:	76 cf       	rjmp	.-276    	; 0x2248 <__epilogue_restores__+0xc>

0000235c <random_r>:
    235c:	be cf       	rjmp	.-132    	; 0x22da <do_random>

0000235e <random>:
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	91 e0       	ldi	r25, 0x01	; 1
    2362:	bb cf       	rjmp	.-138    	; 0x22da <do_random>

00002364 <srandom>:
    2364:	60 93 00 01 	sts	0x0100, r22
    2368:	70 93 01 01 	sts	0x0101, r23
    236c:	80 93 02 01 	sts	0x0102, r24
    2370:	90 93 03 01 	sts	0x0103, r25
    2374:	08 95       	ret

00002376 <atoi>:
    2376:	fc 01       	movw	r30, r24
    2378:	88 27       	eor	r24, r24
    237a:	99 27       	eor	r25, r25
    237c:	e8 94       	clt
    237e:	21 91       	ld	r18, Z+
    2380:	20 32       	cpi	r18, 0x20	; 32
    2382:	e9 f3       	breq	.-6      	; 0x237e <atoi+0x8>
    2384:	29 30       	cpi	r18, 0x09	; 9
    2386:	10 f0       	brcs	.+4      	; 0x238c <atoi+0x16>
    2388:	2e 30       	cpi	r18, 0x0E	; 14
    238a:	c8 f3       	brcs	.-14     	; 0x237e <atoi+0x8>
    238c:	2b 32       	cpi	r18, 0x2B	; 43
    238e:	39 f0       	breq	.+14     	; 0x239e <atoi+0x28>
    2390:	2d 32       	cpi	r18, 0x2D	; 45
    2392:	31 f4       	brne	.+12     	; 0x23a0 <atoi+0x2a>
    2394:	68 94       	set
    2396:	03 c0       	rjmp	.+6      	; 0x239e <atoi+0x28>
    2398:	59 d0       	rcall	.+178    	; 0x244c <__mulhi_const_10>
    239a:	82 0f       	add	r24, r18
    239c:	91 1d       	adc	r25, r1
    239e:	21 91       	ld	r18, Z+
    23a0:	20 53       	subi	r18, 0x30	; 48
    23a2:	2a 30       	cpi	r18, 0x0A	; 10
    23a4:	c8 f3       	brcs	.-14     	; 0x2398 <atoi+0x22>
    23a6:	1e f4       	brtc	.+6      	; 0x23ae <atoi+0x38>
    23a8:	90 95       	com	r25
    23aa:	81 95       	neg	r24
    23ac:	9f 4f       	sbci	r25, 0xFF	; 255
    23ae:	08 95       	ret

000023b0 <isgraph>:
    23b0:	80 32       	cpi	r24, 0x20	; 32
    23b2:	09 f0       	breq	.+2      	; 0x23b6 <isprint+0x2>

000023b4 <isprint>:
    23b4:	91 11       	cpse	r25, r1
    23b6:	54 c0       	rjmp	.+168    	; 0x2460 <__ctype_isfalse>
    23b8:	80 52       	subi	r24, 0x20	; 32
    23ba:	8f 55       	subi	r24, 0x5F	; 95
    23bc:	e0 f7       	brcc	.-8      	; 0x23b6 <isprint+0x2>
    23be:	08 95       	ret

000023c0 <isspace>:
    23c0:	91 11       	cpse	r25, r1
    23c2:	4e c0       	rjmp	.+156    	; 0x2460 <__ctype_isfalse>
    23c4:	80 32       	cpi	r24, 0x20	; 32
    23c6:	19 f0       	breq	.+6      	; 0x23ce <isspace+0xe>
    23c8:	89 50       	subi	r24, 0x09	; 9
    23ca:	85 50       	subi	r24, 0x05	; 5
    23cc:	d0 f7       	brcc	.-12     	; 0x23c2 <isspace+0x2>
    23ce:	08 95       	ret

000023d0 <strcmp_P>:
    23d0:	fb 01       	movw	r30, r22
    23d2:	dc 01       	movw	r26, r24
    23d4:	8d 91       	ld	r24, X+
    23d6:	05 90       	lpm	r0, Z+
    23d8:	80 19       	sub	r24, r0
    23da:	01 10       	cpse	r0, r1
    23dc:	d9 f3       	breq	.-10     	; 0x23d4 <strcmp_P+0x4>
    23de:	99 0b       	sbc	r25, r25
    23e0:	08 95       	ret

000023e2 <strstr_P>:
    23e2:	fb 01       	movw	r30, r22
    23e4:	55 91       	lpm	r21, Z+
    23e6:	55 23       	and	r21, r21
    23e8:	a9 f0       	breq	.+42     	; 0x2414 <strstr_P+0x32>
    23ea:	bf 01       	movw	r22, r30
    23ec:	dc 01       	movw	r26, r24
    23ee:	4d 91       	ld	r20, X+
    23f0:	45 17       	cp	r20, r21
    23f2:	41 11       	cpse	r20, r1
    23f4:	e1 f7       	brne	.-8      	; 0x23ee <strstr_P+0xc>
    23f6:	59 f4       	brne	.+22     	; 0x240e <strstr_P+0x2c>
    23f8:	cd 01       	movw	r24, r26
    23fa:	05 90       	lpm	r0, Z+
    23fc:	00 20       	and	r0, r0
    23fe:	49 f0       	breq	.+18     	; 0x2412 <strstr_P+0x30>
    2400:	4d 91       	ld	r20, X+
    2402:	40 15       	cp	r20, r0
    2404:	41 11       	cpse	r20, r1
    2406:	c9 f3       	breq	.-14     	; 0x23fa <strstr_P+0x18>
    2408:	fb 01       	movw	r30, r22
    240a:	41 11       	cpse	r20, r1
    240c:	ef cf       	rjmp	.-34     	; 0x23ec <strstr_P+0xa>
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	08 95       	ret

00002416 <memcpy>:
    2416:	fb 01       	movw	r30, r22
    2418:	dc 01       	movw	r26, r24
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <memcpy+0xa>
    241c:	01 90       	ld	r0, Z+
    241e:	0d 92       	st	X+, r0
    2420:	41 50       	subi	r20, 0x01	; 1
    2422:	50 40       	sbci	r21, 0x00	; 0
    2424:	d8 f7       	brcc	.-10     	; 0x241c <memcpy+0x6>
    2426:	08 95       	ret

00002428 <memset>:
    2428:	dc 01       	movw	r26, r24
    242a:	01 c0       	rjmp	.+2      	; 0x242e <memset+0x6>
    242c:	6d 93       	st	X+, r22
    242e:	41 50       	subi	r20, 0x01	; 1
    2430:	50 40       	sbci	r21, 0x00	; 0
    2432:	e0 f7       	brcc	.-8      	; 0x242c <memset+0x4>
    2434:	08 95       	ret

00002436 <strchr>:
    2436:	fc 01       	movw	r30, r24
    2438:	81 91       	ld	r24, Z+
    243a:	86 17       	cp	r24, r22
    243c:	21 f0       	breq	.+8      	; 0x2446 <strchr+0x10>
    243e:	88 23       	and	r24, r24
    2440:	d9 f7       	brne	.-10     	; 0x2438 <strchr+0x2>
    2442:	99 27       	eor	r25, r25
    2444:	08 95       	ret
    2446:	31 97       	sbiw	r30, 0x01	; 1
    2448:	cf 01       	movw	r24, r30
    244a:	08 95       	ret

0000244c <__mulhi_const_10>:
    244c:	bc 01       	movw	r22, r24
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	86 0f       	add	r24, r22
    2458:	97 1f       	adc	r25, r23
    245a:	88 0f       	add	r24, r24
    245c:	99 1f       	adc	r25, r25
    245e:	08 95       	ret

00002460 <__ctype_isfalse>:
    2460:	99 27       	eor	r25, r25
    2462:	88 27       	eor	r24, r24

00002464 <__ctype_istrue>:
    2464:	08 95       	ret

00002466 <_exit>:
    2466:	f8 94       	cli

00002468 <__stop_program>:
    2468:	ff cf       	rjmp	.-2      	; 0x2468 <__stop_program>
