
OffChipMqtt_ATMEGA32U2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00002646  000026da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002646  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000273  00800114  00800114  000026ee  2**0
                  ALLOC
  3 .noinit       00000002  00800387  00800387  000026ee  2**0
                  ALLOC
  4 .stab         00011afc  00000000  00000000  000026f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000126fc  00000000  00000000  000141ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000030  00000000  00000000  000268e8  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00026918  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	9e c0       	rjmp	.+316    	; 0x13e <__ctors_end>
       2:	00 00       	nop
       4:	c4 c0       	rjmp	.+392    	; 0x18e <__bad_interrupt>
       6:	00 00       	nop
       8:	c2 c0       	rjmp	.+388    	; 0x18e <__bad_interrupt>
       a:	00 00       	nop
       c:	c0 c0       	rjmp	.+384    	; 0x18e <__bad_interrupt>
       e:	00 00       	nop
      10:	be c0       	rjmp	.+380    	; 0x18e <__bad_interrupt>
      12:	00 00       	nop
      14:	bc c0       	rjmp	.+376    	; 0x18e <__bad_interrupt>
      16:	00 00       	nop
      18:	ba c0       	rjmp	.+372    	; 0x18e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b8 c0       	rjmp	.+368    	; 0x18e <__bad_interrupt>
      1e:	00 00       	nop
      20:	b6 c0       	rjmp	.+364    	; 0x18e <__bad_interrupt>
      22:	00 00       	nop
      24:	b4 c0       	rjmp	.+360    	; 0x18e <__bad_interrupt>
      26:	00 00       	nop
      28:	b2 c0       	rjmp	.+356    	; 0x18e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b0 c0       	rjmp	.+352    	; 0x18e <__bad_interrupt>
      2e:	00 00       	nop
      30:	ae c0       	rjmp	.+348    	; 0x18e <__bad_interrupt>
      32:	00 00       	nop
      34:	ac c0       	rjmp	.+344    	; 0x18e <__bad_interrupt>
      36:	00 00       	nop
      38:	aa c0       	rjmp	.+340    	; 0x18e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a8 c0       	rjmp	.+336    	; 0x18e <__bad_interrupt>
      3e:	00 00       	nop
      40:	a6 c0       	rjmp	.+332    	; 0x18e <__bad_interrupt>
      42:	00 00       	nop
      44:	a4 c0       	rjmp	.+328    	; 0x18e <__bad_interrupt>
      46:	00 00       	nop
      48:	a2 c0       	rjmp	.+324    	; 0x18e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a0 c0       	rjmp	.+320    	; 0x18e <__bad_interrupt>
      4e:	00 00       	nop
      50:	9e c0       	rjmp	.+316    	; 0x18e <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__vector_21>
      58:	9a c0       	rjmp	.+308    	; 0x18e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__vector_23>
      60:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__vector_24>
      64:	94 c0       	rjmp	.+296    	; 0x18e <__bad_interrupt>
      66:	00 00       	nop
      68:	92 c0       	rjmp	.+292    	; 0x18e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	90 c0       	rjmp	.+288    	; 0x18e <__bad_interrupt>
      6e:	00 00       	nop
      70:	8e c0       	rjmp	.+284    	; 0x18e <__bad_interrupt>
	...

00000074 <__trampolines_end>:
      74:	70 61       	ori	r23, 0x10	; 16
      76:	74 74       	andi	r23, 0x44	; 68
      78:	65 72       	andi	r22, 0x25	; 37
      7a:	6e 00       	.word	0x006e	; ????

0000007c <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_8>:
      7c:	70 69 78 65 6c 73 00                                pixels.

00000083 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_7>:
      83:	6f 66 66 00                                         off.

00000087 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_6>:
      87:	64 65 63 61 79 00                                   decay.

0000008d <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_5>:
      8d:	73 75 73 74 61 69 6e 00                             sustain.

00000095 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_4>:
      95:	61 74 74 61 63 6b 00                                attack.

0000009c <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_3>:
      9c:	64 65 6e 73 69 74 79 00                             density.

000000a4 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_2>:
      a4:	73 6d 6f 64 65 00                                   smode.

000000aa <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_1>:
      aa:	65 66 66 65 63 74 00                                effect.

000000b1 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_0>:
      b1:	63 6d 6f 64 65 00                                   cmode.

000000b7 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c>:
      b7:	6f 72 64 65 72 00                                   order.

000000bd <_ZZN6MyMqtt9MqttTasksEvE3__c_8>:
      bd:	22 00                                               ".

000000bf <_ZZN6MyMqtt9MqttTasksEvE3__c_7>:
      bf:	22 00                                               ".

000000c1 <_ZZN6MyMqtt9MqttTasksEvE3__c_6>:
      c1:	2b 41 54 2b 54 4f 50 49 43 3d 22 00                 +AT+TOPIC=".

000000cd <_ZZN6MyMqtt9MqttTasksEvE3__c_5>:
      cd:	45 72 72 6f 72 00                                   Error.

000000d3 <_ZZN6MyMqtt9MqttTasksEvE3__c_4>:
      d3:	4f 4b 00                                            OK.

000000d6 <_ZZN6MyMqtt9MqttTasksEvE3__c_3>:
      d6:	2b 57 49 46 49 20 44 69 73 63 6f 6e 6e 65 63 74     +WIFI Disconnect
      e6:	65 64 00                                            ed.

000000e9 <_ZZN6MyMqtt9MqttTasksEvE3__c_2>:
      e9:	2b 57 49 46 49 20 43 6f 6e 6e 65 63 74 65 64 00     +WIFI Connected.

000000f9 <_ZZN6MyMqtt9MqttTasksEvE3__c_1>:
      f9:	2b 4d 51 54 54 20 44 69 73 63 6f 6e 6e 65 63 74     +MQTT Disconnect
     109:	65 64 00                                            ed.

0000010c <_ZZN6MyMqtt9MqttTasksEvE3__c_0>:
     10c:	2b 4d 51 54 54 20 43 6f 6e 6e 65 63 74 65 64 00     +MQTT Connected.

0000011c <_ZZN6MyMqtt9MqttTasksEvE3__c>:
     11c:	0d 0a 00                                            ...

0000011f <_ZZN6MyMqtt5beginEvE3__c>:
     11f:	53 79 73 74 65 6d 20 69 6e 69 74 20 64 6f 6e 65     System init done
     12f:	2e 0d 0a 52 65 61 64 79 0d 0a 00                    ...Ready...

0000013a <__ctors_start>:
     13a:	eb 0e       	add	r14, r27
     13c:	5f 10       	cpse	r5, r15

0000013e <__ctors_end>:
     13e:	11 24       	eor	r1, r1
     140:	1f be       	out	0x3f, r1	; 63
     142:	cf ef       	ldi	r28, 0xFF	; 255
     144:	d4 e0       	ldi	r29, 0x04	; 4
     146:	de bf       	out	0x3e, r29	; 62
     148:	cd bf       	out	0x3d, r28	; 61

0000014a <__do_copy_data>:
     14a:	11 e0       	ldi	r17, 0x01	; 1
     14c:	a0 e0       	ldi	r26, 0x00	; 0
     14e:	b1 e0       	ldi	r27, 0x01	; 1
     150:	e6 e4       	ldi	r30, 0x46	; 70
     152:	f6 e2       	ldi	r31, 0x26	; 38
     154:	02 c0       	rjmp	.+4      	; 0x15a <__do_copy_data+0x10>
     156:	05 90       	lpm	r0, Z+
     158:	0d 92       	st	X+, r0
     15a:	a4 31       	cpi	r26, 0x14	; 20
     15c:	b1 07       	cpc	r27, r17
     15e:	d9 f7       	brne	.-10     	; 0x156 <__do_copy_data+0xc>

00000160 <__do_clear_bss>:
     160:	23 e0       	ldi	r18, 0x03	; 3
     162:	a4 e1       	ldi	r26, 0x14	; 20
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
     168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
     16a:	a7 38       	cpi	r26, 0x87	; 135
     16c:	b2 07       	cpc	r27, r18
     16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>

00000170 <__do_global_ctors>:
     170:	10 e0       	ldi	r17, 0x00	; 0
     172:	cf e9       	ldi	r28, 0x9F	; 159
     174:	d0 e0       	ldi	r29, 0x00	; 0
     176:	04 c0       	rjmp	.+8      	; 0x180 <__do_global_ctors+0x10>
     178:	21 97       	sbiw	r28, 0x01	; 1
     17a:	fe 01       	movw	r30, r28
     17c:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__tablejump2__>
     180:	cd 39       	cpi	r28, 0x9D	; 157
     182:	d1 07       	cpc	r29, r17
     184:	c9 f7       	brne	.-14     	; 0x178 <__do_global_ctors+0x8>
     186:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <main>
     18a:	0c 94 21 13 	jmp	0x2642	; 0x2642 <_exit>

0000018e <__bad_interrupt>:
     18e:	38 cf       	rjmp	.-400    	; 0x0 <__vectors>

00000190 <_ZN13NeoPixelColor6getRedEv>:

NeoColorOrder NeoPixelColor::m_color_order = GRB;

byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
     190:	20 91 04 01 	lds	r18, 0x0104
			{
		case GRB:
			return colors[1];
     194:	fc 01       	movw	r30, r24

NeoColorOrder NeoPixelColor::m_color_order = GRB;

byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
     196:	21 30       	cpi	r18, 0x01	; 1
     198:	11 f0       	breq	.+4      	; 0x19e <_ZN13NeoPixelColor6getRedEv+0xe>
		case GRB:
			return colors[1];
			break;
		case RGB:
		default:
			return colors[0];
     19a:	80 81       	ld	r24, Z
			}
	}
     19c:	08 95       	ret
byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
			{
		case GRB:
			return colors[1];
     19e:	81 81       	ldd	r24, Z+1	; 0x01
     1a0:	08 95       	ret

000001a2 <_ZN13NeoPixelColor8getGreenEv>:
			}
	}

byte NeoPixelColor::getGreen()
	{
		switch(m_color_order)
     1a2:	20 91 04 01 	lds	r18, 0x0104
			{
		case GRB:
			return colors[0];
     1a6:	fc 01       	movw	r30, r24
			}
	}

byte NeoPixelColor::getGreen()
	{
		switch(m_color_order)
     1a8:	21 30       	cpi	r18, 0x01	; 1
     1aa:	11 f0       	breq	.+4      	; 0x1b0 <_ZN13NeoPixelColor8getGreenEv+0xe>
		case GRB:
			return colors[0];
			break;
		case RGB:
		default:
			return colors[1];
     1ac:	81 81       	ldd	r24, Z+1	; 0x01
			}
	}
     1ae:	08 95       	ret
byte NeoPixelColor::getGreen()
	{
		switch(m_color_order)
			{
		case GRB:
			return colors[0];
     1b0:	80 81       	ld	r24, Z
     1b2:	08 95       	ret

000001b4 <_ZN13NeoPixelColor7getBlueEv>:


byte NeoPixelColor::getBlue()
	{
		return colors[2];
	}
     1b4:	fc 01       	movw	r30, r24
     1b6:	82 81       	ldd	r24, Z+2	; 0x02
     1b8:	08 95       	ret

000001ba <_ZN13NeoPixelColor6setRedEh>:



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     1ba:	20 91 04 01 	lds	r18, 0x0104
			{
		case GRB:
			colors[1] = v;
     1be:	fc 01       	movw	r30, r24



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     1c0:	21 30       	cpi	r18, 0x01	; 1
     1c2:	11 f0       	breq	.+4      	; 0x1c8 <_ZN13NeoPixelColor6setRedEh+0xe>
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     1c4:	60 83       	st	Z, r22
     1c6:	08 95       	ret
void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[1] = v;
     1c8:	61 83       	std	Z+1, r22	; 0x01
			break;
     1ca:	08 95       	ret

000001cc <_ZN13NeoPixelColor8setGreenEh>:
			}
	}

void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
     1cc:	20 91 04 01 	lds	r18, 0x0104
			{
		case GRB:
			colors[0] = v;
     1d0:	fc 01       	movw	r30, r24
			}
	}

void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
     1d2:	21 30       	cpi	r18, 0x01	; 1
     1d4:	11 f0       	breq	.+4      	; 0x1da <_ZN13NeoPixelColor8setGreenEh+0xe>
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     1d6:	61 83       	std	Z+1, r22	; 0x01
     1d8:	08 95       	ret
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     1da:	60 83       	st	Z, r22
			break;
     1dc:	08 95       	ret

000001de <_ZN13NeoPixelColor7setBlueEh>:
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     1de:	fc 01       	movw	r30, r24
     1e0:	62 83       	std	Z+2, r22	; 0x02
     1e2:	08 95       	ret

000001e4 <_ZN13NeoPixelColorC1Ev>:
	}


NeoPixelColor::NeoPixelColor()
     1e4:	fc 01       	movw	r30, r24



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     1e6:	80 91 04 01 	lds	r24, 0x0104
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	21 f4       	brne	.+8      	; 0x1f6 <_ZN13NeoPixelColorC1Ev+0x12>
			{
		case GRB:
			colors[1] = v;
     1ee:	11 82       	std	Z+1, r1	; 0x01
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     1f0:	10 82       	st	Z, r1
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     1f2:	12 82       	std	Z+2, r1	; 0x02
     1f4:	08 95       	ret
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     1f6:	10 82       	st	Z, r1
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     1f8:	11 82       	std	Z+1, r1	; 0x01
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     1fa:	12 82       	std	Z+2, r1	; 0x02
     1fc:	08 95       	ret

000001fe <_ZN13NeoPixelColorC1Ehhh>:
		setRed(0);
		setGreen(0);
		setBlue(0);
	}

NeoPixelColor::NeoPixelColor(byte r, byte g, byte b)
     1fe:	fc 01       	movw	r30, r24



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     200:	80 91 04 01 	lds	r24, 0x0104
     204:	81 30       	cpi	r24, 0x01	; 1
     206:	21 f4       	brne	.+8      	; 0x210 <_ZN13NeoPixelColorC1Ehhh+0x12>
			{
		case GRB:
			colors[1] = v;
     208:	61 83       	std	Z+1, r22	; 0x01
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     20a:	40 83       	st	Z, r20
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     20c:	22 83       	std	Z+2, r18	; 0x02
     20e:	08 95       	ret
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     210:	60 83       	st	Z, r22
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     212:	41 83       	std	Z+1, r20	; 0x01
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     214:	22 83       	std	Z+2, r18	; 0x02
     216:	08 95       	ret

00000218 <_ZN13NeoPixelColorC1ERKS_>:
		setRed(r);
		setGreen(g);
		setBlue(b);
	}

NeoPixelColor::NeoPixelColor(const NeoPixelColor &r)
     218:	fc 01       	movw	r30, r24
     21a:	db 01       	movw	r26, r22

NeoColorOrder NeoPixelColor::m_color_order = GRB;

byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
     21c:	80 91 04 01 	lds	r24, 0x0104
     220:	81 30       	cpi	r24, 0x01	; 1
     222:	51 f4       	brne	.+20     	; 0x238 <_ZN13NeoPixelColorC1ERKS_+0x20>
			{
		case GRB:
			return colors[1];
     224:	11 96       	adiw	r26, 0x01	; 1
     226:	8c 91       	ld	r24, X
     228:	11 97       	sbiw	r26, 0x01	; 1
void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[1] = v;
     22a:	81 83       	std	Z+1, r24	; 0x01
byte NeoPixelColor::getGreen()
	{
		switch(m_color_order)
			{
		case GRB:
			return colors[0];
     22c:	8c 91       	ld	r24, X
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     22e:	80 83       	st	Z, r24
	}


byte NeoPixelColor::getBlue()
	{
		return colors[2];
     230:	12 96       	adiw	r26, 0x02	; 2
     232:	8c 91       	ld	r24, X
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     234:	82 83       	std	Z+2, r24	; 0x02
     236:	08 95       	ret
		case GRB:
			return colors[1];
			break;
		case RGB:
		default:
			return colors[0];
     238:	8c 91       	ld	r24, X
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     23a:	80 83       	st	Z, r24
		case GRB:
			return colors[0];
			break;
		case RGB:
		default:
			return colors[1];
     23c:	11 96       	adiw	r26, 0x01	; 1
     23e:	8c 91       	ld	r24, X
     240:	11 97       	sbiw	r26, 0x01	; 1
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     242:	81 83       	std	Z+1, r24	; 0x01
	}


byte NeoPixelColor::getBlue()
	{
		return colors[2];
     244:	12 96       	adiw	r26, 0x02	; 2
     246:	8c 91       	ld	r24, X
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     248:	82 83       	std	Z+2, r24	; 0x02
     24a:	08 95       	ret

0000024c <_ZN13NeoPixelColoraSERKS_>:
		setGreen(r.getGreen());
		setBlue(r.getBlue());
	}

NeoPixelColor & NeoPixelColor::operator=(const NeoPixelColor &r)
	{
     24c:	fb 01       	movw	r30, r22

NeoColorOrder NeoPixelColor::m_color_order = GRB;

byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
     24e:	20 91 04 01 	lds	r18, 0x0104
     252:	21 30       	cpi	r18, 0x01	; 1
     254:	59 f4       	brne	.+22     	; 0x26c <_ZN13NeoPixelColoraSERKS_+0x20>
			{
		case GRB:
			return colors[1];
     256:	21 81       	ldd	r18, Z+1	; 0x01
void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[1] = v;
     258:	dc 01       	movw	r26, r24
     25a:	11 96       	adiw	r26, 0x01	; 1
     25c:	2c 93       	st	X, r18
     25e:	11 97       	sbiw	r26, 0x01	; 1
byte NeoPixelColor::getGreen()
	{
		switch(m_color_order)
			{
		case GRB:
			return colors[0];
     260:	20 81       	ld	r18, Z
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     262:	2c 93       	st	X, r18
	}


byte NeoPixelColor::getBlue()
	{
		return colors[2];
     264:	22 81       	ldd	r18, Z+2	; 0x02
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     266:	fc 01       	movw	r30, r24
     268:	22 83       	std	Z+2, r18	; 0x02
	{
		setRed(r.getRed());
		setGreen(r.getGreen());
		setBlue(r.getBlue());
		return *this;
	}
     26a:	08 95       	ret
		case GRB:
			return colors[1];
			break;
		case RGB:
		default:
			return colors[0];
     26c:	20 81       	ld	r18, Z
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     26e:	dc 01       	movw	r26, r24
     270:	2c 93       	st	X, r18
		case GRB:
			return colors[0];
			break;
		case RGB:
		default:
			return colors[1];
     272:	21 81       	ldd	r18, Z+1	; 0x01
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     274:	11 96       	adiw	r26, 0x01	; 1
     276:	2c 93       	st	X, r18
	}


byte NeoPixelColor::getBlue()
	{
		return colors[2];
     278:	22 81       	ldd	r18, Z+2	; 0x02
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     27a:	fc 01       	movw	r30, r24
     27c:	22 83       	std	Z+2, r18	; 0x02
	{
		setRed(r.getRed());
		setGreen(r.getGreen());
		setBlue(r.getBlue());
		return *this;
	}
     27e:	08 95       	ret

00000280 <_ZN13NeoPixelColormlEh>:

NeoPixelColor NeoPixelColor::operator *(byte b)
	{
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	1f 92       	push	r1
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
     28e:	8c 01       	movw	r16, r24
		NeoPixelColor ret = *this;
     290:	49 83       	std	Y+1, r20	; 0x01
     292:	c2 df       	rcall	.-124    	; 0x218 <_ZN13NeoPixelColorC1ERKS_>
     294:	80 91 04 01 	lds	r24, 0x0104

NeoColorOrder NeoPixelColor::m_color_order = GRB;

byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
     298:	49 81       	ldd	r20, Y+1	; 0x01
     29a:	d8 01       	movw	r26, r16
	}

NeoPixelColor NeoPixelColor::operator *(byte b)
	{
		NeoPixelColor ret = *this;
		unsigned int x = ret.getRed();
     29c:	81 30       	cpi	r24, 0x01	; 1

NeoColorOrder NeoPixelColor::m_color_order = GRB;

byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
     29e:	81 f5       	brne	.+96     	; 0x300 <_ZN13NeoPixelColormlEh+0x80>
     2a0:	11 96       	adiw	r26, 0x01	; 1
	}

NeoPixelColor NeoPixelColor::operator *(byte b)
	{
		NeoPixelColor ret = *this;
		unsigned int x = ret.getRed();
     2a2:	6c 91       	ld	r22, X
     2a4:	70 e0       	ldi	r23, 0x00	; 0
     2a6:	24 2f       	mov	r18, r20
		x *= b;
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	c9 01       	movw	r24, r18
     2ac:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__mulhi3>
     2b0:	ef ef       	ldi	r30, 0xFF	; 255
		x /= 255;
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	bf 01       	movw	r22, r30
     2b6:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__udivmodhi4>
     2ba:	d8 01       	movw	r26, r16
void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[1] = v;
     2bc:	11 96       	adiw	r26, 0x01	; 1
     2be:	6c 93       	st	X, r22
     2c0:	11 97       	sbiw	r26, 0x01	; 1
     2c2:	4c 91       	ld	r20, X
		x /= 255;
		if(x > 255)
			x = 255;
		ret.setRed(x);

		x = ret.getGreen();
     2c4:	64 2f       	mov	r22, r20
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	c9 01       	movw	r24, r18
		x *= b;
     2ca:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__mulhi3>
     2ce:	bf 01       	movw	r22, r30
		x /= 255;
     2d0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__udivmodhi4>
     2d4:	f8 01       	movw	r30, r16
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     2d6:	60 83       	st	Z, r22
     2d8:	d8 01       	movw	r26, r16
		x /= 255;
		if(x > 255)
			x = 255;
		ret.setGreen(x);

		x = ret.getBlue();
     2da:	12 96       	adiw	r26, 0x02	; 2
     2dc:	6c 91       	ld	r22, X
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	c9 01       	movw	r24, r18
		x *= b;
     2e2:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__mulhi3>
     2e6:	6f ef       	ldi	r22, 0xFF	; 255
		x /= 255;
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__udivmodhi4>
     2ee:	f8 01       	movw	r30, r16
		if(x > 255)
			x = 255;
		ret.setBlue(x);
     2f0:	62 83       	std	Z+2, r22	; 0x02
     2f2:	c8 01       	movw	r24, r16

		return ret;
	}
     2f4:	0f 90       	pop	r0
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	08 95       	ret
     300:	6c 91       	ld	r22, X
	}

NeoPixelColor NeoPixelColor::operator *(byte b)
	{
		NeoPixelColor ret = *this;
		unsigned int x = ret.getRed();
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	24 2f       	mov	r18, r20
		x *= b;
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	c9 01       	movw	r24, r18
     30a:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__mulhi3>
     30e:	ef ef       	ldi	r30, 0xFF	; 255
		x /= 255;
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	bf 01       	movw	r22, r30
     314:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__udivmodhi4>
     318:	d8 01       	movw	r26, r16
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     31a:	6c 93       	st	X, r22
     31c:	11 96       	adiw	r26, 0x01	; 1
		x /= 255;
		if(x > 255)
			x = 255;
		ret.setRed(x);

		x = ret.getGreen();
     31e:	4c 91       	ld	r20, X
     320:	64 2f       	mov	r22, r20
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	c9 01       	movw	r24, r18
		x *= b;
     326:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__mulhi3>
     32a:	bf 01       	movw	r22, r30
		x /= 255;
     32c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__udivmodhi4>
     330:	f8 01       	movw	r30, r16
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     332:	61 83       	std	Z+1, r22	; 0x01
     334:	d1 cf       	rjmp	.-94     	; 0x2d8 <_ZN13NeoPixelColormlEh+0x58>

00000336 <_ZN9NeoPixels9initAllOnEv>:
#include "utilities.h"
#include "NeoPixels.h"
#include "USBStream.h"

void NeoPixels::initAllOn()
	{
     336:	ef 92       	push	r14
     338:	ff 92       	push	r15
     33a:	0f 93       	push	r16
     33c:	1f 93       	push	r17
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	8c 01       	movw	r16, r24
		memset(m_arry,0,sizeof(m_arry));
     344:	fc 01       	movw	r30, r24
     346:	e5 5b       	subi	r30, 0xB5	; 181
     348:	ff 4f       	sbci	r31, 0xFF	; 255
     34a:	86 e9       	ldi	r24, 0x96	; 150
     34c:	df 01       	movw	r26, r30
     34e:	1d 92       	st	X+, r1
     350:	8a 95       	dec	r24
     352:	e9 f7       	brne	.-6      	; 0x34e <_ZN9NeoPixels9initAllOnEv+0x18>
		for(uint16_t i=0;i<m_cfg.m_pixels;i++)
     354:	d8 01       	movw	r26, r16
     356:	8d 91       	ld	r24, X+
     358:	9c 91       	ld	r25, X
     35a:	89 2b       	or	r24, r25
     35c:	21 f1       	breq	.+72     	; 0x3a6 <_ZN9NeoPixels9initAllOnEv+0x70>
     35e:	7f 01       	movw	r14, r30
     360:	c0 e0       	ldi	r28, 0x00	; 0
     362:	d0 e0       	ldi	r29, 0x00	; 0
     364:	19 c0       	rjmp	.+50     	; 0x398 <_ZN9NeoPixels9initAllOnEv+0x62>
			{
				uint16_t x = m_cfg.m_pattern_size > 1 ? i % m_cfg.m_pattern_size : 0;
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	ce 01       	movw	r24, r28
     36a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__udivmodhi4>
				m_arry[i] = m_cfg.m_pattern[x];
     36e:	bc 01       	movw	r22, r24
     370:	66 0f       	add	r22, r22
     372:	77 1f       	adc	r23, r23
     374:	68 0f       	add	r22, r24
     376:	79 1f       	adc	r23, r25
     378:	61 5f       	subi	r22, 0xF1	; 241
     37a:	7f 4f       	sbci	r23, 0xFF	; 255
     37c:	60 0f       	add	r22, r16
     37e:	71 1f       	adc	r23, r17
     380:	c7 01       	movw	r24, r14
     382:	64 df       	rcall	.-312    	; 0x24c <_ZN13NeoPixelColoraSERKS_>
     384:	21 96       	adiw	r28, 0x01	; 1
#include "USBStream.h"

void NeoPixels::initAllOn()
	{
		memset(m_arry,0,sizeof(m_arry));
		for(uint16_t i=0;i<m_cfg.m_pixels;i++)
     386:	f3 e0       	ldi	r31, 0x03	; 3
     388:	ef 0e       	add	r14, r31
     38a:	f1 1c       	adc	r15, r1
     38c:	d8 01       	movw	r26, r16
     38e:	8d 91       	ld	r24, X+
     390:	9c 91       	ld	r25, X
     392:	c8 17       	cp	r28, r24
     394:	d9 07       	cpc	r29, r25
     396:	38 f4       	brcc	.+14     	; 0x3a6 <_ZN9NeoPixels9initAllOnEv+0x70>
     398:	f8 01       	movw	r30, r16
			{
				uint16_t x = m_cfg.m_pattern_size > 1 ? i % m_cfg.m_pattern_size : 0;
     39a:	66 85       	ldd	r22, Z+14	; 0x0e
     39c:	62 30       	cpi	r22, 0x02	; 2
     39e:	18 f7       	brcc	.-58     	; 0x366 <_ZN9NeoPixels9initAllOnEv+0x30>
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	e4 cf       	rjmp	.-56     	; 0x36e <_ZN9NeoPixels9initAllOnEv+0x38>
     3a6:	f8 01       	movw	r30, r16
				m_arry[i] = m_cfg.m_pattern[x];
			}
		m_tmrs[1] = 1;
     3a8:	e1 51       	subi	r30, 0x11	; 17
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	80 83       	st	Z, r24
     3b0:	df 91       	pop	r29

	}
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	ff 90       	pop	r15
     3ba:	ef 90       	pop	r14
     3bc:	08 95       	ret

000003be <_ZN9NeoPixels11AllOnEffectEv>:

void NeoPixels::AllOnEffect()
	{
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
		if(m_tmrs[1])
     3c2:	ec 01       	movw	r28, r24
     3c4:	c1 51       	subi	r28, 0x11	; 17
     3c6:	df 4f       	sbci	r29, 0xFF	; 255
     3c8:	28 81       	ld	r18, Y
     3ca:	22 23       	and	r18, r18
     3cc:	31 f0       	breq	.+12     	; 0x3da <_ZN9NeoPixels11AllOnEffectEv+0x1c>
			{
			sendPixels(m_arry,PIXELS);
     3ce:	62 e3       	ldi	r22, 0x32	; 50
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	85 5b       	subi	r24, 0xB5	; 181
     3d4:	9f 4f       	sbci	r25, 0xFF	; 255
     3d6:	95 d5       	rcall	.+2858   	; 0xf02 <_Z10sendPixelsP13NeoPixelColorj>
     3d8:	18 82       	st	Y, r1
			m_tmrs[1] = 0;
     3da:	df 91       	pop	r29
			}
	}
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <_ZN9NeoPixels10initCandleEv>:

#define CANDLE_FLICKER_RATE m_cfg.m_sustain
#define CANDLE_RESOLUTION 32

void NeoPixels::initCandle()
	{
     3e0:	fc 01       	movw	r30, r24
		memset(m_arry, 0, sizeof(m_arry));
     3e2:	85 5b       	subi	r24, 0xB5	; 181
     3e4:	9f 4f       	sbci	r25, 0xFF	; 255
     3e6:	26 e9       	ldi	r18, 0x96	; 150
     3e8:	dc 01       	movw	r26, r24
     3ea:	1d 92       	st	X+, r1
     3ec:	2a 95       	dec	r18
     3ee:	e9 f7       	brne	.-6      	; 0x3ea <_ZN9NeoPixels10initCandleEv+0xa>
		m_tmrs[0] = CANDLE_FLICKER_RATE;
     3f0:	df 01       	movw	r26, r30
     3f2:	a2 51       	subi	r26, 0x12	; 18
     3f4:	bf 4f       	sbci	r27, 0xFF	; 255
     3f6:	24 81       	ldd	r18, Z+4	; 0x04
     3f8:	2c 93       	st	X, r18
		sendPixels(m_arry,m_cfg.m_pixels);
     3fa:	60 81       	ld	r22, Z
     3fc:	71 81       	ldd	r23, Z+1	; 0x01
     3fe:	81 c5       	rjmp	.+2818   	; 0xf02 <_Z10sendPixelsP13NeoPixelColorj>

00000400 <_ZN9NeoPixels12CandleEffectEv>:
	}

void NeoPixels::CandleEffect()
	{
     400:	8f 92       	push	r8
     402:	9f 92       	push	r9
     404:	af 92       	push	r10
     406:	bf 92       	push	r11
     408:	cf 92       	push	r12
     40a:	df 92       	push	r13
     40c:	ef 92       	push	r14
     40e:	ff 92       	push	r15
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	00 d0       	rcall	.+0      	; 0x41a <_ZN9NeoPixels12CandleEffectEv+0x1a>
     41a:	1f 92       	push	r1
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	7c 01       	movw	r14, r24
		m_tmrs[0]--;
     422:	5c 01       	movw	r10, r24
     424:	8e ee       	ldi	r24, 0xEE	; 238
     426:	a8 0e       	add	r10, r24
     428:	b1 1c       	adc	r11, r1
     42a:	f5 01       	movw	r30, r10
     42c:	90 81       	ld	r25, Z
     42e:	91 50       	subi	r25, 0x01	; 1
     430:	90 83       	st	Z, r25
		if(m_tmrs[0] == 0)
     432:	91 11       	cpse	r25, r1
     434:	62 c0       	rjmp	.+196    	; 0x4fa <_ZN9NeoPixels12CandleEffectEv+0xfa>
			{
			for(size_t i=0;i<m_cfg.m_pixels;i++)
     436:	f7 01       	movw	r30, r14
     438:	60 81       	ld	r22, Z
     43a:	71 81       	ldd	r23, Z+1	; 0x01
     43c:	61 15       	cp	r22, r1
     43e:	71 05       	cpc	r23, r1
     440:	09 f4       	brne	.+2      	; 0x444 <_ZN9NeoPixels12CandleEffectEv+0x44>
     442:	51 c0       	rjmp	.+162    	; 0x4e6 <_ZN9NeoPixels12CandleEffectEv+0xe6>
     444:	47 01       	movw	r8, r14
     446:	9b e4       	ldi	r25, 0x4B	; 75
     448:	89 0e       	add	r8, r25
     44a:	91 1c       	adc	r9, r1
     44c:	64 01       	movw	r12, r8
     44e:	00 e0       	ldi	r16, 0x00	; 0
     450:	10 e0       	ldi	r17, 0x00	; 0
     452:	2f c0       	rjmp	.+94     	; 0x4b2 <_ZN9NeoPixels12CandleEffectEv+0xb2>
					unsigned int scale = random() % CANDLE_RESOLUTION;
					if(scale > (CANDLE_RESOLUTION/2))
						scale = 255;
					else
						{
							scale = scale * 256 / (CANDLE_RESOLUTION/2);
     454:	78 2f       	mov	r23, r24
     456:	66 27       	eor	r22, r22
     458:	72 95       	swap	r23
     45a:	62 95       	swap	r22
     45c:	6f 70       	andi	r22, 0x0F	; 15
     45e:	67 27       	eor	r22, r23
     460:	7f 70       	andi	r23, 0x0F	; 15
     462:	67 27       	eor	r22, r23
							if(scale > 255)
     464:	61 15       	cp	r22, r1
     466:	e1 e0       	ldi	r30, 0x01	; 1
     468:	7e 07       	cpc	r23, r30
     46a:	81 f1       	breq	.+96     	; 0x4cc <_ZN9NeoPixels12CandleEffectEv+0xcc>
     46c:	46 2f       	mov	r20, r22
								scale = 255;
						}
					m_arry[i] = m_cfg.m_pattern[i%m_cfg.m_pattern_size] * (byte)(scale);
     46e:	f7 01       	movw	r30, r14
     470:	66 85       	ldd	r22, Z+14	; 0x0e
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	c8 01       	movw	r24, r16
     476:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__udivmodhi4>
     47a:	bc 01       	movw	r22, r24
     47c:	66 0f       	add	r22, r22
     47e:	77 1f       	adc	r23, r23
     480:	68 0f       	add	r22, r24
     482:	79 1f       	adc	r23, r25
     484:	61 5f       	subi	r22, 0xF1	; 241
     486:	7f 4f       	sbci	r23, 0xFF	; 255
     488:	6e 0d       	add	r22, r14
     48a:	7f 1d       	adc	r23, r15
     48c:	ce 01       	movw	r24, r28
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	f7 de       	rcall	.-530    	; 0x280 <_ZN13NeoPixelColormlEh>
     492:	be 01       	movw	r22, r28
     494:	6f 5f       	subi	r22, 0xFF	; 255
     496:	7f 4f       	sbci	r23, 0xFF	; 255
     498:	c6 01       	movw	r24, r12
     49a:	d8 de       	rcall	.-592    	; 0x24c <_ZN13NeoPixelColoraSERKS_>
     49c:	0f 5f       	subi	r16, 0xFF	; 255
     49e:	1f 4f       	sbci	r17, 0xFF	; 255
void NeoPixels::CandleEffect()
	{
		m_tmrs[0]--;
		if(m_tmrs[0] == 0)
			{
			for(size_t i=0;i<m_cfg.m_pixels;i++)
     4a0:	f7 01       	movw	r30, r14
     4a2:	60 81       	ld	r22, Z
     4a4:	71 81       	ldd	r23, Z+1	; 0x01
     4a6:	f3 e0       	ldi	r31, 0x03	; 3
     4a8:	cf 0e       	add	r12, r31
     4aa:	d1 1c       	adc	r13, r1
     4ac:	06 17       	cp	r16, r22
     4ae:	17 07       	cpc	r17, r23
     4b0:	f0 f4       	brcc	.+60     	; 0x4ee <_ZN9NeoPixels12CandleEffectEv+0xee>
     4b2:	0e 94 1b 12 	call	0x2436	; 0x2436 <random>
				{
					unsigned int scale = random() % CANDLE_RESOLUTION;
     4b6:	dc 01       	movw	r26, r24
     4b8:	cb 01       	movw	r24, r22
     4ba:	8f 71       	andi	r24, 0x1F	; 31
     4bc:	99 27       	eor	r25, r25
     4be:	aa 27       	eor	r26, r26
     4c0:	b0 78       	andi	r27, 0x80	; 128
     4c2:	b7 fd       	sbrc	r27, 7
     4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <_ZN9NeoPixels12CandleEffectEv+0xd0>
     4c6:	81 31       	cpi	r24, 0x11	; 17
     4c8:	91 05       	cpc	r25, r1
					if(scale > (CANDLE_RESOLUTION/2))
     4ca:	20 f2       	brcs	.-120    	; 0x454 <_ZN9NeoPixels12CandleEffectEv+0x54>
     4cc:	4f ef       	ldi	r20, 0xFF	; 255
     4ce:	cf cf       	rjmp	.-98     	; 0x46e <_ZN9NeoPixels12CandleEffectEv+0x6e>
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	a1 09       	sbc	r26, r1
		m_tmrs[0]--;
		if(m_tmrs[0] == 0)
			{
			for(size_t i=0;i<m_cfg.m_pixels;i++)
				{
					unsigned int scale = random() % CANDLE_RESOLUTION;
     4d4:	b1 09       	sbc	r27, r1
     4d6:	80 6e       	ori	r24, 0xE0	; 224
     4d8:	9f 6f       	ori	r25, 0xFF	; 255
     4da:	af 6f       	ori	r26, 0xFF	; 255
     4dc:	bf 6f       	ori	r27, 0xFF	; 255
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	a1 1d       	adc	r26, r1
     4e2:	b1 1d       	adc	r27, r1
     4e4:	f0 cf       	rjmp	.-32     	; 0x4c6 <_ZN9NeoPixels12CandleEffectEv+0xc6>
     4e6:	c7 01       	movw	r24, r14
     4e8:	85 5b       	subi	r24, 0xB5	; 181
     4ea:	9f 4f       	sbci	r25, 0xFF	; 255
     4ec:	4c 01       	movw	r8, r24
     4ee:	c4 01       	movw	r24, r8
     4f0:	08 d5       	rcall	.+2576   	; 0xf02 <_Z10sendPixelsP13NeoPixelColorj>
							if(scale > 255)
								scale = 255;
						}
					m_arry[i] = m_cfg.m_pattern[i%m_cfg.m_pattern_size] * (byte)(scale);
				}
			sendPixels(m_arry,m_cfg.m_pixels);
     4f2:	f7 01       	movw	r30, r14
     4f4:	84 81       	ldd	r24, Z+4	; 0x04
     4f6:	f5 01       	movw	r30, r10
			m_tmrs[0] = CANDLE_FLICKER_RATE;
     4f8:	80 83       	st	Z, r24
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
			}
	}
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	ff 90       	pop	r15
     50a:	ef 90       	pop	r14
     50c:	df 90       	pop	r13
     50e:	cf 90       	pop	r12
     510:	bf 90       	pop	r11
     512:	af 90       	pop	r10
     514:	9f 90       	pop	r9
     516:	8f 90       	pop	r8
     518:	08 95       	ret

0000051a <_ZN9NeoConfigC1Ev>:
#include "utilities.h"
#include "NeoPixels.h"
#include "USBStream.h"

////////////////// NeoConfig Class //////////////////////
NeoConfig::NeoConfig()
     51a:	af 92       	push	r10
     51c:	bf 92       	push	r11
     51e:	cf 92       	push	r12
     520:	df 92       	push	r13
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	00 d0       	rcall	.+0      	; 0x530 <_ZN9NeoConfigC1Ev+0x16>
     530:	1f 92       	push	r1
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
     536:	6c 01       	movw	r12, r24
     538:	5c 01       	movw	r10, r24
     53a:	8f e0       	ldi	r24, 0x0F	; 15
     53c:	a8 0e       	add	r10, r24
     53e:	b1 1c       	adc	r11, r1
     540:	85 01       	movw	r16, r10
     542:	76 01       	movw	r14, r12
     544:	ef e3       	ldi	r30, 0x3F	; 63
     546:	ee 0e       	add	r14, r30
     548:	f1 1c       	adc	r15, r1
     54a:	c8 01       	movw	r24, r16
     54c:	4b de       	rcall	.-874    	; 0x1e4 <_ZN13NeoPixelColorC1Ev>
     54e:	0d 5f       	subi	r16, 0xFD	; 253
     550:	1f 4f       	sbci	r17, 0xFF	; 255
     552:	0e 15       	cp	r16, r14
     554:	1f 05       	cpc	r17, r15
     556:	c9 f7       	brne	.-14     	; 0x54a <_ZN9NeoConfigC1Ev+0x30>
     558:	82 e3       	ldi	r24, 0x32	; 50
	{
		m_pixels = PIXELS;
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	f6 01       	movw	r30, r12
     55e:	91 83       	std	Z+1, r25	; 0x01
     560:	80 83       	st	Z, r24
     562:	22 e0       	ldi	r18, 0x02	; 2
		m_effect = effectTwinkle;
     564:	22 87       	std	Z+10, r18	; 0x0a
     566:	13 86       	std	Z+11, r1	; 0x0b
		m_colormode = colorModeSingle;
     568:	14 86       	std	Z+12, r1	; 0x0c
		m_strandmode = Strand;
     56a:	24 e6       	ldi	r18, 0x64	; 100
		m_off = 100;
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	31 87       	std	Z+9, r19	; 0x09
     570:	20 87       	std	Z+8, r18	; 0x08
     572:	2a e0       	ldi	r18, 0x0A	; 10
		m_attack = 10;
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	33 83       	std	Z+3, r19	; 0x03
     578:	22 83       	std	Z+2, r18	; 0x02
     57a:	15 82       	std	Z+5, r1	; 0x05
		m_sustain = 0;
     57c:	14 82       	std	Z+4, r1	; 0x04
     57e:	97 83       	std	Z+7, r25	; 0x07
		m_decay = 50;
     580:	86 83       	std	Z+6, r24	; 0x06
     582:	81 e2       	ldi	r24, 0x21	; 33
		m_density = 33;
     584:	85 87       	std	Z+13, r24	; 0x0d
     586:	83 e0       	ldi	r24, 0x03	; 3
		m_pattern_size = 3;
     588:	86 87       	std	Z+14, r24	; 0x0e
     58a:	20 e0       	ldi	r18, 0x00	; 0
		m_pattern[0] = NeoPixelColor(255,0,0);
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	6f ef       	ldi	r22, 0xFF	; 255
     590:	ce 01       	movw	r24, r28
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	34 de       	rcall	.-920    	; 0x1fe <_ZN13NeoPixelColorC1Ehhh>
     596:	be 01       	movw	r22, r28
     598:	6f 5f       	subi	r22, 0xFF	; 255
     59a:	7f 4f       	sbci	r23, 0xFF	; 255
     59c:	c5 01       	movw	r24, r10
     59e:	56 de       	rcall	.-852    	; 0x24c <_ZN13NeoPixelColoraSERKS_>
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	4f ef       	ldi	r20, 0xFF	; 255
     5a4:	60 e0       	ldi	r22, 0x00	; 0
		m_pattern[1] = NeoPixelColor(0,255,0);
     5a6:	ce 01       	movw	r24, r28
     5a8:	01 96       	adiw	r24, 0x01	; 1
     5aa:	29 de       	rcall	.-942    	; 0x1fe <_ZN13NeoPixelColorC1Ehhh>
     5ac:	be 01       	movw	r22, r28
     5ae:	6f 5f       	subi	r22, 0xFF	; 255
     5b0:	7f 4f       	sbci	r23, 0xFF	; 255
     5b2:	c6 01       	movw	r24, r12
     5b4:	42 96       	adiw	r24, 0x12	; 18
     5b6:	4a de       	rcall	.-876    	; 0x24c <_ZN13NeoPixelColoraSERKS_>
     5b8:	2f ef       	ldi	r18, 0xFF	; 255
     5ba:	40 e0       	ldi	r20, 0x00	; 0
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	ce 01       	movw	r24, r28
     5c0:	01 96       	adiw	r24, 0x01	; 1
		m_pattern[2] = NeoPixelColor(0,0,255);
     5c2:	1d de       	rcall	.-966    	; 0x1fe <_ZN13NeoPixelColorC1Ehhh>
     5c4:	be 01       	movw	r22, r28
     5c6:	6f 5f       	subi	r22, 0xFF	; 255
     5c8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ca:	c6 01       	movw	r24, r12
     5cc:	45 96       	adiw	r24, 0x15	; 21
     5ce:	3e de       	rcall	.-900    	; 0x24c <_ZN13NeoPixelColoraSERKS_>
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
	}
     5de:	ff 90       	pop	r15
     5e0:	ef 90       	pop	r14
     5e2:	df 90       	pop	r13
     5e4:	cf 90       	pop	r12
     5e6:	bf 90       	pop	r11
     5e8:	af 90       	pop	r10
     5ea:	08 95       	ret

000005ec <_ZN9NeoPixels16initTheaterChaseEv>:
#include "utilities.h"
#include "NeoPixels.h"
#include "USBStream.h"

void NeoPixels::initTheaterChase()
	{
     5ec:	fc 01       	movw	r30, r24
		spacing = 100 / m_cfg.m_density;
     5ee:	65 85       	ldd	r22, Z+13	; 0x0d
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	84 e6       	ldi	r24, 0x64	; 100
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 82 11 	call	0x2304	; 0x2304 <__divmodhi4>
		if (spacing < 2)
     5fa:	62 30       	cpi	r22, 0x02	; 2
     5fc:	71 05       	cpc	r23, r1
     5fe:	a4 f0       	brlt	.+40     	; 0x628 <_ZN9NeoPixels16initTheaterChaseEv+0x3c>
#include "NeoPixels.h"
#include "USBStream.h"

void NeoPixels::initTheaterChase()
	{
		spacing = 100 / m_cfg.m_density;
     600:	df 01       	movw	r26, r30
     602:	a7 5b       	subi	r26, 0xB7	; 183
     604:	bf 4f       	sbci	r27, 0xFF	; 255
     606:	6d 93       	st	X+, r22
     608:	7c 93       	st	X, r23
		if (spacing < 2)
			spacing = 2;

		q = 0;
     60a:	df 01       	movw	r26, r30
     60c:	ab 5b       	subi	r26, 0xBB	; 187
     60e:	bf 4f       	sbci	r27, 0xFF	; 255
     610:	11 96       	adiw	r26, 0x01	; 1
     612:	1c 92       	st	X, r1
     614:	1e 92       	st	-X, r1
		step = 0;
     616:	12 96       	adiw	r26, 0x02	; 2
     618:	11 96       	adiw	r26, 0x01	; 1
     61a:	1c 92       	st	X, r1
     61c:	1e 92       	st	-X, r1
		m_tmrs[0] = m_cfg.m_sustain;
     61e:	a9 55       	subi	r26, 0x59	; 89
     620:	bf 4f       	sbci	r27, 0xFF	; 255
     622:	84 81       	ldd	r24, Z+4	; 0x04
     624:	8c 93       	st	X, r24
     626:	08 95       	ret

void NeoPixels::initTheaterChase()
	{
		spacing = 100 / m_cfg.m_density;
		if (spacing < 2)
			spacing = 2;
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	df 01       	movw	r26, r30
     62e:	a7 5b       	subi	r26, 0xB7	; 183
     630:	bf 4f       	sbci	r27, 0xFF	; 255
     632:	8d 93       	st	X+, r24
     634:	9c 93       	st	X, r25
     636:	e9 cf       	rjmp	.-46     	; 0x60a <_ZN9NeoPixels16initTheaterChaseEv+0x1e>

00000638 <_ZN9NeoPixels18TheaterChaseEffectEv>:
		m_tmrs[0] = m_cfg.m_sustain;

	}

void NeoPixels::TheaterChaseEffect()
	{
     638:	2f 92       	push	r2
     63a:	3f 92       	push	r3
     63c:	4f 92       	push	r4
     63e:	5f 92       	push	r5
     640:	6f 92       	push	r6
     642:	7f 92       	push	r7
     644:	8f 92       	push	r8
     646:	9f 92       	push	r9
     648:	af 92       	push	r10
     64a:	bf 92       	push	r11
     64c:	cf 92       	push	r12
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	00 d0       	rcall	.+0      	; 0x65e <_ZN9NeoPixels18TheaterChaseEffectEv+0x26>
     65e:	00 d0       	rcall	.+0      	; 0x660 <_ZN9NeoPixels18TheaterChaseEffectEv+0x28>
     660:	1f 92       	push	r1
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	8c 01       	movw	r16, r24
		if(m_tmrs[0] > 0)
     668:	1c 01       	movw	r2, r24
     66a:	8e ee       	ldi	r24, 0xEE	; 238
     66c:	28 0e       	add	r2, r24
     66e:	31 1c       	adc	r3, r1
     670:	f1 01       	movw	r30, r2
     672:	90 81       	ld	r25, Z
     674:	91 11       	cpse	r25, r1
     676:	d5 c0       	rjmp	.+426    	; 0x822 <_ZN9NeoPixels18TheaterChaseEffectEv+0x1ea>
			m_tmrs[0] --;
		else
			{
				switch(m_cfg.m_colormode)
     678:	f8 01       	movw	r30, r16
     67a:	83 85       	ldd	r24, Z+11	; 0x0b
     67c:	81 30       	cpi	r24, 0x01	; 1
     67e:	09 f4       	brne	.+2      	; 0x682 <_ZN9NeoPixels18TheaterChaseEffectEv+0x4a>
     680:	76 c0       	rjmp	.+236    	; 0x76e <_ZN9NeoPixels18TheaterChaseEffectEv+0x136>
					 *
					 * Each Pixel's intensity is therefore a function of the offset time and the period of attack/decay
					 * 		I = PT * offset * m_pattern[0] / AD
					 *
					 */
					for (size_t i = 0; i < m_cfg.m_pixels; i++)
     682:	f8 01       	movw	r30, r16
     684:	60 81       	ld	r22, Z
     686:	71 81       	ldd	r23, Z+1	; 0x01
     688:	61 15       	cp	r22, r1
     68a:	71 05       	cpc	r23, r1
     68c:	09 f4       	brne	.+2      	; 0x690 <_ZN9NeoPixels18TheaterChaseEffectEv+0x58>
     68e:	cc c0       	rjmp	.+408    	; 0x828 <_ZN9NeoPixels18TheaterChaseEffectEv+0x1f0>
     690:	38 01       	movw	r6, r16
     692:	fb e4       	ldi	r31, 0x4B	; 75
     694:	6f 0e       	add	r6, r31
     696:	71 1c       	adc	r7, r1
     698:	53 01       	movw	r10, r6
     69a:	c1 2c       	mov	r12, r1
     69c:	d1 2c       	mov	r13, r1
     69e:	c8 01       	movw	r24, r16
     6a0:	87 5b       	subi	r24, 0xB7	; 183
     6a2:	9f 4f       	sbci	r25, 0xFF	; 255
     6a4:	9d 83       	std	Y+5, r25	; 0x05
     6a6:	8c 83       	std	Y+4, r24	; 0x04
     6a8:	f8 01       	movw	r30, r16
     6aa:	eb 5b       	subi	r30, 0xBB	; 187
     6ac:	ff 4f       	sbci	r31, 0xFF	; 255
     6ae:	4f 01       	movw	r8, r30
     6b0:	02 97       	sbiw	r24, 0x02	; 2
     6b2:	7c 01       	movw	r14, r24
										{
											byte b = step - q;
											if(b < m_cfg.m_attack)
												{
													b = (255/(b));
													m_arry[i] = m_cfg.m_pattern[0] * b;
     6b4:	28 01       	movw	r4, r16
     6b6:	9f e0       	ldi	r25, 0x0F	; 15
     6b8:	49 0e       	add	r4, r25
     6ba:	51 1c       	adc	r5, r1
     6bc:	34 c0       	rjmp	.+104    	; 0x726 <_ZN9NeoPixels18TheaterChaseEffectEv+0xee>
								m_arry[i] = (m_cfg.m_pattern[0]);//NeoPixelColor(255,0,0);
							else
								{
									if(step < q)
										{
											byte b = q - step;
     6be:	68 1b       	sub	r22, r24
											if(b < m_cfg.m_decay)
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	f8 01       	movw	r30, r16
     6c4:	86 81       	ldd	r24, Z+6	; 0x06
     6c6:	97 81       	ldd	r25, Z+7	; 0x07
     6c8:	68 17       	cp	r22, r24
     6ca:	79 07       	cpc	r23, r25
     6cc:	08 f0       	brcs	.+2      	; 0x6d0 <_ZN9NeoPixels18TheaterChaseEffectEv+0x98>
     6ce:	43 c0       	rjmp	.+134    	; 0x756 <_ZN9NeoPixels18TheaterChaseEffectEv+0x11e>
									else
										{
											byte b = step - q;
											if(b < m_cfg.m_attack)
												{
													b = (255/(b));
     6d0:	8f ef       	ldi	r24, 0xFF	; 255
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 82 11 	call	0x2304	; 0x2304 <__divmodhi4>
     6d8:	46 2f       	mov	r20, r22
													m_arry[i] = m_cfg.m_pattern[0] * b;
     6da:	b2 01       	movw	r22, r4
     6dc:	ce 01       	movw	r24, r28
     6de:	01 96       	adiw	r24, 0x01	; 1
     6e0:	cf dd       	rcall	.-1122   	; 0x280 <_ZN13NeoPixelColormlEh>
     6e2:	be 01       	movw	r22, r28
     6e4:	6f 5f       	subi	r22, 0xFF	; 255
     6e6:	7f 4f       	sbci	r23, 0xFF	; 255
     6e8:	c5 01       	movw	r24, r10
     6ea:	b0 dd       	rcall	.-1184   	; 0x24c <_ZN13NeoPixelColoraSERKS_>
     6ec:	f7 01       	movw	r30, r14
     6ee:	80 81       	ld	r24, Z
												}
										}

								}

							step++;
     6f0:	91 81       	ldd	r25, Z+1	; 0x01
     6f2:	01 96       	adiw	r24, 0x01	; 1
     6f4:	91 83       	std	Z+1, r25	; 0x01
     6f6:	80 83       	st	Z, r24
     6f8:	ec 81       	ldd	r30, Y+4	; 0x04
     6fa:	fd 81       	ldd	r31, Y+5	; 0x05
							if (step >= spacing)
     6fc:	20 81       	ld	r18, Z
     6fe:	31 81       	ldd	r19, Z+1	; 0x01
     700:	82 17       	cp	r24, r18
     702:	93 07       	cpc	r25, r19
     704:	18 f0       	brcs	.+6      	; 0x70c <_ZN9NeoPixels18TheaterChaseEffectEv+0xd4>
     706:	f7 01       	movw	r30, r14
     708:	11 82       	std	Z+1, r1	; 0x01
								step = 0;
     70a:	10 82       	st	Z, r1
     70c:	ff ef       	ldi	r31, 0xFF	; 255
     70e:	cf 1a       	sub	r12, r31
					 *
					 * Each Pixel's intensity is therefore a function of the offset time and the period of attack/decay
					 * 		I = PT * offset * m_pattern[0] / AD
					 *
					 */
					for (size_t i = 0; i < m_cfg.m_pixels; i++)
     710:	df 0a       	sbc	r13, r31
     712:	83 e0       	ldi	r24, 0x03	; 3
     714:	a8 0e       	add	r10, r24
     716:	b1 1c       	adc	r11, r1
     718:	f8 01       	movw	r30, r16
     71a:	60 81       	ld	r22, Z
     71c:	71 81       	ldd	r23, Z+1	; 0x01
     71e:	c6 16       	cp	r12, r22
     720:	d7 06       	cpc	r13, r23
     722:	08 f0       	brcs	.+2      	; 0x726 <_ZN9NeoPixels18TheaterChaseEffectEv+0xee>
     724:	8b c0       	rjmp	.+278    	; 0x83c <_ZN9NeoPixels18TheaterChaseEffectEv+0x204>
     726:	f7 01       	movw	r30, r14
     728:	80 81       	ld	r24, Z
						{
							if (step == q)
     72a:	91 81       	ldd	r25, Z+1	; 0x01
     72c:	f4 01       	movw	r30, r8
     72e:	60 81       	ld	r22, Z
     730:	71 81       	ldd	r23, Z+1	; 0x01
     732:	86 17       	cp	r24, r22
     734:	97 07       	cpc	r25, r23
     736:	09 f4       	brne	.+2      	; 0x73a <_ZN9NeoPixels18TheaterChaseEffectEv+0x102>
     738:	70 c0       	rjmp	.+224    	; 0x81a <_ZN9NeoPixels18TheaterChaseEffectEv+0x1e2>
     73a:	86 17       	cp	r24, r22
     73c:	97 07       	cpc	r25, r23
								m_arry[i] = (m_cfg.m_pattern[0]);//NeoPixelColor(255,0,0);
							else
								{
									if(step < q)
     73e:	08 f4       	brcc	.+2      	; 0x742 <_ZN9NeoPixels18TheaterChaseEffectEv+0x10a>
     740:	be cf       	rjmp	.-132    	; 0x6be <_ZN9NeoPixels18TheaterChaseEffectEv+0x86>
     742:	86 1b       	sub	r24, r22
     744:	68 2f       	mov	r22, r24
													m_arry[i] = NeoPixelColor(0, 0, 0);
												}
										}
									else
										{
											byte b = step - q;
     746:	70 e0       	ldi	r23, 0x00	; 0
											if(b < m_cfg.m_attack)
     748:	f8 01       	movw	r30, r16
     74a:	82 81       	ldd	r24, Z+2	; 0x02
     74c:	93 81       	ldd	r25, Z+3	; 0x03
     74e:	68 17       	cp	r22, r24
     750:	79 07       	cpc	r23, r25
     752:	08 f4       	brcc	.+2      	; 0x756 <_ZN9NeoPixels18TheaterChaseEffectEv+0x11e>
     754:	bd cf       	rjmp	.-134    	; 0x6d0 <_ZN9NeoPixels18TheaterChaseEffectEv+0x98>
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	40 e0       	ldi	r20, 0x00	; 0
													b = (255/(b));
													m_arry[i] = m_cfg.m_pattern[0] * b;
												}
											else
												{
													m_arry[i] = NeoPixelColor(0, 0, 0);
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	ce 01       	movw	r24, r28
     75e:	01 96       	adiw	r24, 0x01	; 1
     760:	4e dd       	rcall	.-1380   	; 0x1fe <_ZN13NeoPixelColorC1Ehhh>
     762:	be 01       	movw	r22, r28
     764:	6f 5f       	subi	r22, 0xFF	; 255
     766:	7f 4f       	sbci	r23, 0xFF	; 255
     768:	c5 01       	movw	r24, r10
     76a:	70 dd       	rcall	.-1312   	; 0x24c <_ZN13NeoPixelColoraSERKS_>
     76c:	bf cf       	rjmp	.-130    	; 0x6ec <_ZN9NeoPixels18TheaterChaseEffectEv+0xb4>
     76e:	60 81       	ld	r22, Z
     770:	71 81       	ldd	r23, Z+1	; 0x01
     772:	61 15       	cp	r22, r1
     774:	71 05       	cpc	r23, r1
		else
			{
				switch(m_cfg.m_colormode)
					{
				case colorModePattern:
					for(size_t i=0;i<m_cfg.m_pixels;i++)
     776:	09 f4       	brne	.+2      	; 0x77a <_ZN9NeoPixels18TheaterChaseEffectEv+0x142>
     778:	6d c0       	rjmp	.+218    	; 0x854 <_ZN9NeoPixels18TheaterChaseEffectEv+0x21c>
     77a:	38 01       	movw	r6, r16
     77c:	fb e4       	ldi	r31, 0x4B	; 75
     77e:	6f 0e       	add	r6, r31
     780:	71 1c       	adc	r7, r1
     782:	63 01       	movw	r12, r6
     784:	e1 2c       	mov	r14, r1
     786:	f1 2c       	mov	r15, r1
     788:	c8 01       	movw	r24, r16
     78a:	8b 5b       	subi	r24, 0xBB	; 187
     78c:	9f 4f       	sbci	r25, 0xFF	; 255
     78e:	4c 01       	movw	r8, r24
     790:	f4 01       	movw	r30, r8
     792:	80 81       	ld	r24, Z
     794:	91 81       	ldd	r25, Z+1	; 0x01
     796:	8e 0d       	add	r24, r14
						{
							m_arry[i] = m_cfg.m_pattern[(i+q) % m_cfg.m_pattern_size];
     798:	9f 1d       	adc	r25, r15
     79a:	f8 01       	movw	r30, r16
     79c:	66 85       	ldd	r22, Z+14	; 0x0e
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__udivmodhi4>
     7a4:	bc 01       	movw	r22, r24
     7a6:	66 0f       	add	r22, r22
     7a8:	77 1f       	adc	r23, r23
     7aa:	68 0f       	add	r22, r24
     7ac:	79 1f       	adc	r23, r25
     7ae:	61 5f       	subi	r22, 0xF1	; 241
     7b0:	7f 4f       	sbci	r23, 0xFF	; 255
     7b2:	60 0f       	add	r22, r16
     7b4:	71 1f       	adc	r23, r17
     7b6:	c6 01       	movw	r24, r12
     7b8:	49 dd       	rcall	.-1390   	; 0x24c <_ZN13NeoPixelColoraSERKS_>
     7ba:	ff ef       	ldi	r31, 0xFF	; 255
     7bc:	ef 1a       	sub	r14, r31
     7be:	ff 0a       	sbc	r15, r31
     7c0:	f8 01       	movw	r30, r16
     7c2:	60 81       	ld	r22, Z
		else
			{
				switch(m_cfg.m_colormode)
					{
				case colorModePattern:
					for(size_t i=0;i<m_cfg.m_pixels;i++)
     7c4:	71 81       	ldd	r23, Z+1	; 0x01
     7c6:	f3 e0       	ldi	r31, 0x03	; 3
     7c8:	cf 0e       	add	r12, r31
     7ca:	d1 1c       	adc	r13, r1
     7cc:	e6 16       	cp	r14, r22
     7ce:	f7 06       	cpc	r15, r23
     7d0:	f8 f2       	brcs	.-66     	; 0x790 <_ZN9NeoPixels18TheaterChaseEffectEv+0x158>
     7d2:	f4 01       	movw	r30, r8
     7d4:	80 81       	ld	r24, Z
     7d6:	91 81       	ldd	r25, Z+1	; 0x01
     7d8:	01 96       	adiw	r24, 0x01	; 1
     7da:	91 83       	std	Z+1, r25	; 0x01
						{
							m_arry[i] = m_cfg.m_pattern[(i+q) % m_cfg.m_pattern_size];
						}
					q++;
     7dc:	80 83       	st	Z, r24
     7de:	c3 01       	movw	r24, r6
     7e0:	90 d3       	rcall	.+1824   	; 0xf02 <_Z10sendPixelsP13NeoPixelColorj>
     7e2:	f8 01       	movw	r30, r16
     7e4:	84 81       	ldd	r24, Z+4	; 0x04
     7e6:	f1 01       	movw	r30, r2
					q++;
					if (q >= spacing)
						q = 0;
					}

				sendPixels(m_arry,m_cfg.m_pixels);
     7e8:	80 83       	st	Z, r24
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
				m_tmrs[0] = m_cfg.m_sustain;
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	df 91       	pop	r29
			}

	}
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	df 90       	pop	r13
     802:	cf 90       	pop	r12
     804:	bf 90       	pop	r11
     806:	af 90       	pop	r10
     808:	9f 90       	pop	r9
     80a:	8f 90       	pop	r8
     80c:	7f 90       	pop	r7
     80e:	6f 90       	pop	r6
     810:	5f 90       	pop	r5
     812:	4f 90       	pop	r4
     814:	3f 90       	pop	r3
     816:	2f 90       	pop	r2
     818:	08 95       	ret
     81a:	b2 01       	movw	r22, r4
     81c:	c5 01       	movw	r24, r10
     81e:	16 dd       	rcall	.-1492   	; 0x24c <_ZN13NeoPixelColoraSERKS_>
     820:	65 cf       	rjmp	.-310    	; 0x6ec <_ZN9NeoPixels18TheaterChaseEffectEv+0xb4>
     822:	91 50       	subi	r25, 0x01	; 1
     824:	90 83       	st	Z, r25
					 *
					 */
					for (size_t i = 0; i < m_cfg.m_pixels; i++)
						{
							if (step == q)
								m_arry[i] = (m_cfg.m_pattern[0]);//NeoPixelColor(255,0,0);
     826:	e1 cf       	rjmp	.-62     	; 0x7ea <_ZN9NeoPixels18TheaterChaseEffectEv+0x1b2>
     828:	e7 5b       	subi	r30, 0xB7	; 183
     82a:	ff 4f       	sbci	r31, 0xFF	; 255
     82c:	20 81       	ld	r18, Z
     82e:	31 81       	ldd	r19, Z+1	; 0x01
	}

void NeoPixels::TheaterChaseEffect()
	{
		if(m_tmrs[0] > 0)
			m_tmrs[0] --;
     830:	c8 01       	movw	r24, r16
     832:	85 5b       	subi	r24, 0xB5	; 181
     834:	9f 4f       	sbci	r25, 0xFF	; 255
     836:	3c 01       	movw	r6, r24
     838:	34 97       	sbiw	r30, 0x04	; 4
     83a:	4f 01       	movw	r8, r30
     83c:	f4 01       	movw	r30, r8
     83e:	80 81       	ld	r24, Z
     840:	91 81       	ldd	r25, Z+1	; 0x01
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	91 83       	std	Z+1, r25	; 0x01
     846:	80 83       	st	Z, r24
     848:	82 17       	cp	r24, r18
							step++;
							if (step >= spacing)
								step = 0;
						}

					q++;
     84a:	93 07       	cpc	r25, r19
     84c:	40 f2       	brcs	.-112    	; 0x7de <_ZN9NeoPixels18TheaterChaseEffectEv+0x1a6>
     84e:	11 82       	std	Z+1, r1	; 0x01
     850:	10 82       	st	Z, r1
     852:	c5 cf       	rjmp	.-118    	; 0x7de <_ZN9NeoPixels18TheaterChaseEffectEv+0x1a6>
     854:	c8 01       	movw	r24, r16
					if (q >= spacing)
     856:	85 5b       	subi	r24, 0xB5	; 181
     858:	9f 4f       	sbci	r25, 0xFF	; 255
     85a:	3c 01       	movw	r6, r24
						q = 0;
     85c:	eb 5b       	subi	r30, 0xBB	; 187
     85e:	ff 4f       	sbci	r31, 0xFF	; 255
     860:	4f 01       	movw	r8, r30
     862:	b7 cf       	rjmp	.-146    	; 0x7d2 <_ZN9NeoPixels18TheaterChaseEffectEv+0x19a>

00000864 <_Z12RandomOffsetj>:
#include "NeoPixels.h"
#include "USBStream.h"

#define RANDOMNESS 50
byte RandomOffset(uint16_t v)
	{
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	ec 01       	movw	r28, r24
     86a:	8e 3c       	cpi	r24, 0xCE	; 206
     86c:	91 05       	cpc	r25, r1
     86e:	10 f0       	brcs	.+4      	; 0x874 <_Z12RandomOffsetj+0x10>
     870:	cd ec       	ldi	r28, 0xCD	; 205
     872:	d0 e0       	ldi	r29, 0x00	; 0
		if(v > (255 - RANDOMNESS))
			v = 255 - RANDOMNESS;

		uint16_t x = random() % (2 * RANDOMNESS);
     874:	0e 94 1b 12 	call	0x2436	; 0x2436 <random>
     878:	24 e6       	ldi	r18, 0x64	; 100
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	0e 94 b7 11 	call	0x236e	; 0x236e <__divmodsi4>
     884:	9b 01       	movw	r18, r22
		if(x == 0)
     886:	61 15       	cp	r22, r1
     888:	71 05       	cpc	r23, r1
     88a:	51 f0       	breq	.+20     	; 0x8a0 <_Z12RandomOffsetj+0x3c>
			x++;

		if(x > RANDOMNESS)
     88c:	63 33       	cpi	r22, 0x33	; 51
     88e:	71 05       	cpc	r23, r1
     890:	48 f0       	brcs	.+18     	; 0x8a4 <_Z12RandomOffsetj+0x40>
     892:	e2 96       	adiw	r28, 0x32	; 50
			v -= x - RANDOMNESS;
     894:	ce 01       	movw	r24, r28
     896:	86 1b       	sub	r24, r22
     898:	97 0b       	sbc	r25, r23
		else
			v += x;
		return (byte)v;
	}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret
		if(v > (255 - RANDOMNESS))
			v = 255 - RANDOMNESS;

		uint16_t x = random() % (2 * RANDOMNESS);
		if(x == 0)
			x++;
     8a0:	21 e0       	ldi	r18, 0x01	; 1
     8a2:	30 e0       	ldi	r19, 0x00	; 0

		if(x > RANDOMNESS)
			v -= x - RANDOMNESS;
		else
			v += x;
     8a4:	c9 01       	movw	r24, r18
     8a6:	8c 0f       	add	r24, r28
     8a8:	9d 1f       	adc	r25, r29
		return (byte)v;
	}
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <_ZN9NeoPixels11initTwinkleEv>:

		return val;
	}

void NeoPixels::initTwinkle()
	{
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	ec 01       	movw	r28, r24
		memset(m_arry,0,sizeof(m_arry));
     8c2:	6c 01       	movw	r12, r24
     8c4:	8b e4       	ldi	r24, 0x4B	; 75
     8c6:	c8 0e       	add	r12, r24
     8c8:	d1 1c       	adc	r13, r1
     8ca:	86 e9       	ldi	r24, 0x96	; 150
     8cc:	d6 01       	movw	r26, r12
     8ce:	1d 92       	st	X+, r1
     8d0:	8a 95       	dec	r24
     8d2:	e9 f7       	brne	.-6      	; 0x8ce <_ZN9NeoPixels11initTwinkleEv+0x1e>
		memset(m_status_bits,0,sizeof(m_status_bits));
     8d4:	fe 01       	movw	r30, r28
     8d6:	ef 51       	subi	r30, 0x1F	; 31
     8d8:	ff 4f       	sbci	r31, 0xFF	; 255
     8da:	8d e0       	ldi	r24, 0x0D	; 13
     8dc:	df 01       	movw	r26, r30
     8de:	1d 92       	st	X+, r1
     8e0:	8a 95       	dec	r24
     8e2:	e9 f7       	brne	.-6      	; 0x8de <_ZN9NeoPixels11initTwinkleEv+0x2e>
		memset(m_palette,0,sizeof(m_palette));
     8e4:	ff 96       	adiw	r30, 0x3f	; 63
     8e6:	89 e1       	ldi	r24, 0x19	; 25
     8e8:	df 01       	movw	r26, r30
     8ea:	1d 92       	st	X+, r1
     8ec:	8a 95       	dec	r24
     8ee:	e9 f7       	brne	.-6      	; 0x8ea <_ZN9NeoPixels11initTwinkleEv+0x3a>

		for(size_t i=0;i<m_cfg.m_pixels;i++)
     8f0:	88 81       	ld	r24, Y
     8f2:	99 81       	ldd	r25, Y+1	; 0x01
     8f4:	89 2b       	or	r24, r25
     8f6:	09 f4       	brne	.+2      	; 0x8fa <_ZN9NeoPixels11initTwinkleEv+0x4a>
     8f8:	88 c0       	rjmp	.+272    	; 0xa0a <_ZN9NeoPixels11initTwinkleEv+0x15a>
     8fa:	7e 01       	movw	r14, r28
     8fc:	fe ee       	ldi	r31, 0xEE	; 238
     8fe:	ef 0e       	add	r14, r31
     900:	f1 1c       	adc	r15, r1
     902:	00 e0       	ldi	r16, 0x00	; 0
     904:	10 e0       	ldi	r17, 0x00	; 0
			m_tmrs[i] = RandomOffset(m_cfg.m_off);
     906:	88 85       	ldd	r24, Y+8	; 0x08
     908:	99 85       	ldd	r25, Y+9	; 0x09
     90a:	ac df       	rcall	.-168    	; 0x864 <_Z12RandomOffsetj>
     90c:	d7 01       	movw	r26, r14
     90e:	8d 93       	st	X+, r24
     910:	7d 01       	movw	r14, r26
     912:	0f 5f       	subi	r16, 0xFF	; 255
	{
		memset(m_arry,0,sizeof(m_arry));
		memset(m_status_bits,0,sizeof(m_status_bits));
		memset(m_palette,0,sizeof(m_palette));

		for(size_t i=0;i<m_cfg.m_pixels;i++)
     914:	1f 4f       	sbci	r17, 0xFF	; 255
     916:	28 81       	ld	r18, Y
     918:	39 81       	ldd	r19, Y+1	; 0x01
     91a:	02 17       	cp	r16, r18
     91c:	13 07       	cpc	r17, r19
     91e:	98 f3       	brcs	.-26     	; 0x906 <_ZN9NeoPixels11initTwinkleEv+0x56>
     920:	21 15       	cp	r18, r1
			m_tmrs[i] = RandomOffset(m_cfg.m_off);
		for(size_t i=0;i<m_cfg.m_pixels;i++)
     922:	31 05       	cpc	r19, r1
     924:	09 f4       	brne	.+2      	; 0x928 <_ZN9NeoPixels11initTwinkleEv+0x78>
     926:	65 c0       	rjmp	.+202    	; 0x9f2 <_ZN9NeoPixels11initTwinkleEv+0x142>
     928:	fe 84       	ldd	r15, Y+14	; 0x0e
     92a:	e0 e0       	ldi	r30, 0x00	; 0
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	0f 2d       	mov	r16, r15
			{
				byte idx = m_cfg.m_pattern_size > 1 ? i % m_cfg.m_pattern_size : 0;
     930:	10 e0       	ldi	r17, 0x00	; 0
     932:	0d c0       	rjmp	.+26     	; 0x94e <_ZN9NeoPixels11initTwinkleEv+0x9e>
     934:	92 95       	swap	r25
void NeoPixels::SetPalette(size_t idx,byte v)
	{
		// for now, let's not get crazy - 4 bits per pixel
		byte curp = m_palette[idx / 2];	// 2 entries per byte
		byte mask = idx % 2 > 0 ? 0xf0 : 0x0f;
		byte val = idx % 2 > 0 ? (v << 4) & mask : v & mask;
     936:	90 7f       	andi	r25, 0xF0	; 240
     938:	6f e0       	ldi	r22, 0x0F	; 15
     93a:	86 23       	and	r24, r22

		curp &= ~mask;
     93c:	da 01       	movw	r26, r20
		curp |= val;
		m_palette[idx/2] = curp;
     93e:	a0 5e       	subi	r26, 0xE0	; 224
     940:	be 4f       	sbci	r27, 0xFE	; 254
     942:	98 2b       	or	r25, r24
		byte curp = m_palette[idx / 2];	// 2 entries per byte
		byte mask = idx % 2 > 0 ? 0xf0 : 0x0f;
		byte val = idx % 2 > 0 ? (v << 4) & mask : v & mask;

		curp &= ~mask;
		curp |= val;
     944:	9c 93       	st	X, r25
		m_palette[idx/2] = curp;
     946:	31 96       	adiw	r30, 0x01	; 1
		memset(m_status_bits,0,sizeof(m_status_bits));
		memset(m_palette,0,sizeof(m_palette));

		for(size_t i=0;i<m_cfg.m_pixels;i++)
			m_tmrs[i] = RandomOffset(m_cfg.m_off);
		for(size_t i=0;i<m_cfg.m_pixels;i++)
     948:	e2 17       	cp	r30, r18
     94a:	f3 07       	cpc	r31, r19
     94c:	c1 f0       	breq	.+48     	; 0x97e <_ZN9NeoPixels11initTwinkleEv+0xce>
     94e:	b1 e0       	ldi	r27, 0x01	; 1
			{
				byte idx = m_cfg.m_pattern_size > 1 ? i % m_cfg.m_pattern_size : 0;
     950:	bf 15       	cp	r27, r15
     952:	98 f4       	brcc	.+38     	; 0x97a <_ZN9NeoPixels11initTwinkleEv+0xca>
     954:	cf 01       	movw	r24, r30
     956:	b8 01       	movw	r22, r16
     958:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__udivmodhi4>
     95c:	98 2f       	mov	r25, r24
     95e:	af 01       	movw	r20, r30


void NeoPixels::SetPalette(size_t idx,byte v)
	{
		// for now, let's not get crazy - 4 bits per pixel
		byte curp = m_palette[idx / 2];	// 2 entries per byte
     960:	56 95       	lsr	r21
     962:	47 95       	ror	r20
     964:	4c 0f       	add	r20, r28
     966:	5d 1f       	adc	r21, r29
     968:	da 01       	movw	r26, r20
     96a:	a0 5e       	subi	r26, 0xE0	; 224
     96c:	be 4f       	sbci	r27, 0xFE	; 254
     96e:	8c 91       	ld	r24, X
     970:	e0 fd       	sbrc	r30, 0
		byte mask = idx % 2 > 0 ? 0xf0 : 0x0f;
     972:	e0 cf       	rjmp	.-64     	; 0x934 <_ZN9NeoPixels11initTwinkleEv+0x84>
     974:	9f 70       	andi	r25, 0x0F	; 15
		byte val = idx % 2 > 0 ? (v << 4) & mask : v & mask;
     976:	60 ef       	ldi	r22, 0xF0	; 240
     978:	e0 cf       	rjmp	.-64     	; 0x93a <_ZN9NeoPixels11initTwinkleEv+0x8a>
     97a:	90 e0       	ldi	r25, 0x00	; 0

		for(size_t i=0;i<m_cfg.m_pixels;i++)
			m_tmrs[i] = RandomOffset(m_cfg.m_off);
		for(size_t i=0;i<m_cfg.m_pixels;i++)
			{
				byte idx = m_cfg.m_pattern_size > 1 ? i % m_cfg.m_pattern_size : 0;
     97c:	f0 cf       	rjmp	.-32     	; 0x95e <_ZN9NeoPixels11initTwinkleEv+0xae>
     97e:	6d 85       	ldd	r22, Y+13	; 0x0d
				SetPalette(i,idx);
			}

		m_lit = m_cfg.m_pixels * m_cfg.m_density / 100;
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	cf 01       	movw	r24, r30
     984:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__mulhi3>
     988:	64 e6       	ldi	r22, 0x64	; 100
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__udivmodhi4>
     990:	7e 01       	movw	r14, r28
     992:	e7 ec       	ldi	r30, 0xC7	; 199
     994:	ee 1a       	sub	r14, r30
     996:	ee ef       	ldi	r30, 0xFE	; 254
     998:	fe 0a       	sbc	r15, r30
     99a:	d7 01       	movw	r26, r14
     99c:	6d 93       	st	X+, r22
     99e:	7c 93       	st	X, r23
     9a0:	61 15       	cp	r22, r1
		if(m_lit == 0)
     9a2:	71 05       	cpc	r23, r1
     9a4:	51 f1       	breq	.+84     	; 0x9fa <_ZN9NeoPixels11initTwinkleEv+0x14a>
     9a6:	8b 01       	movw	r16, r22
     9a8:	0e 94 1b 12 	call	0x2436	; 0x2436 <random>
			m_lit++;
		size_t x = m_lit;
		while(x > 0)
			{
				size_t idx = random() % m_cfg.m_pixels;
     9ac:	28 81       	ld	r18, Y
     9ae:	39 81       	ldd	r19, Y+1	; 0x01
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	0e 94 b7 11 	call	0x236e	; 0x236e <__divmodsi4>
     9b8:	6c 0f       	add	r22, r28
				if(m_tmrs[idx] != 0)
     9ba:	7d 1f       	adc	r23, r29
     9bc:	fb 01       	movw	r30, r22
     9be:	e2 51       	subi	r30, 0x12	; 18
     9c0:	ff 4f       	sbci	r31, 0xFF	; 255
     9c2:	80 81       	ld	r24, Z
     9c4:	88 23       	and	r24, r24
     9c6:	81 f3       	breq	.-32     	; 0x9a8 <_ZN9NeoPixels11initTwinkleEv+0xf8>
     9c8:	10 82       	st	Z, r1
					{
						m_tmrs[idx] = 0;
     9ca:	01 50       	subi	r16, 0x01	; 1
						x--;
     9cc:	11 09       	sbc	r17, r1
     9ce:	61 f7       	brne	.-40     	; 0x9a8 <_ZN9NeoPixels11initTwinkleEv+0xf8>

		m_lit = m_cfg.m_pixels * m_cfg.m_density / 100;
		if(m_lit == 0)
			m_lit++;
		size_t x = m_lit;
		while(x > 0)
     9d0:	f7 01       	movw	r30, r14
					{
						m_tmrs[idx] = 0;
						x--;
					}
			}
		StartRandomPixel(m_lit);
     9d2:	60 81       	ld	r22, Z
     9d4:	71 81       	ldd	r23, Z+1	; 0x01
     9d6:	ce 01       	movw	r24, r28
     9d8:	e8 d3       	rcall	.+2000   	; 0x11aa <_ZN9NeoPixels16StartRandomPixelEj>
     9da:	62 e3       	ldi	r22, 0x32	; 50
     9dc:	70 e0       	ldi	r23, 0x00	; 0
		sendPixels(m_arry,PIXELS);
     9de:	c6 01       	movw	r24, r12
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
	}
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	ff 90       	pop	r15
     9ea:	ef 90       	pop	r14
     9ec:	df 90       	pop	r13
     9ee:	cf 90       	pop	r12
     9f0:	88 c2       	rjmp	.+1296   	; 0xf02 <_Z10sendPixelsP13NeoPixelColorj>
     9f2:	fe 01       	movw	r30, r28
						m_tmrs[idx] = 0;
						x--;
					}
			}
		StartRandomPixel(m_lit);
		sendPixels(m_arry,PIXELS);
     9f4:	e7 5c       	subi	r30, 0xC7	; 199
     9f6:	fe 4f       	sbci	r31, 0xFE	; 254
     9f8:	7f 01       	movw	r14, r30
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	d7 01       	movw	r26, r14
				SetPalette(i,idx);
			}

		m_lit = m_cfg.m_pixels * m_cfg.m_density / 100;
		if(m_lit == 0)
			m_lit++;
     a00:	8d 93       	st	X+, r24
     a02:	9c 93       	st	X, r25
     a04:	01 e0       	ldi	r16, 0x01	; 1
     a06:	10 e0       	ldi	r17, 0x00	; 0
     a08:	cf cf       	rjmp	.-98     	; 0x9a8 <_ZN9NeoPixels11initTwinkleEv+0xf8>
     a0a:	79 96       	adiw	r30, 0x19	; 25
     a0c:	7f 01       	movw	r14, r30
     a0e:	f5 cf       	rjmp	.-22     	; 0x9fa <_ZN9NeoPixels11initTwinkleEv+0x14a>

00000a10 <_ZN9NeoPixels13TwinkleEffectEv>:
		StartRandomPixel(m_lit);
		sendPixels(m_arry,PIXELS);
	}

void NeoPixels::TwinkleEffect()
	{
     a10:	2f 92       	push	r2
     a12:	3f 92       	push	r3
     a14:	4f 92       	push	r4
     a16:	5f 92       	push	r5
     a18:	6f 92       	push	r6
     a1a:	7f 92       	push	r7
     a1c:	8f 92       	push	r8
     a1e:	9f 92       	push	r9
     a20:	af 92       	push	r10
     a22:	bf 92       	push	r11
     a24:	cf 92       	push	r12
     a26:	df 92       	push	r13
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	00 d0       	rcall	.+0      	; 0xa36 <_ZN9NeoPixels13TwinkleEffectEv+0x26>
     a36:	1f 92       	push	r1
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
     a3c:	6c 01       	movw	r12, r24
		size_t idx;
		m_active = 0;
     a3e:	3c 01       	movw	r6, r24
     a40:	25 ec       	ldi	r18, 0xC5	; 197
     a42:	62 1a       	sub	r6, r18
     a44:	2e ef       	ldi	r18, 0xFE	; 254
     a46:	72 0a       	sbc	r7, r18
     a48:	f3 01       	movw	r30, r6
     a4a:	11 82       	std	Z+1, r1	; 0x01
     a4c:	10 82       	st	Z, r1
		for(idx = 0;idx < m_cfg.m_pixels;idx++)
     a4e:	fc 01       	movw	r30, r24
     a50:	60 81       	ld	r22, Z
     a52:	71 81       	ldd	r23, Z+1	; 0x01
     a54:	cb 01       	movw	r24, r22
     a56:	61 15       	cp	r22, r1
     a58:	71 05       	cpc	r23, r1
     a5a:	09 f4       	brne	.+2      	; 0xa5e <_ZN9NeoPixels13TwinkleEffectEv+0x4e>
     a5c:	1c c1       	rjmp	.+568    	; 0xc96 <_ZN9NeoPixels13TwinkleEffectEv+0x286>
     a5e:	56 01       	movw	r10, r12
     a60:	3e ee       	ldi	r19, 0xEE	; 238
     a62:	a3 0e       	add	r10, r19
     a64:	b1 1c       	adc	r11, r1
     a66:	16 01       	movw	r2, r12
     a68:	8b e4       	ldi	r24, 0x4B	; 75
     a6a:	28 0e       	add	r2, r24
     a6c:	31 1c       	adc	r3, r1
     a6e:	41 01       	movw	r8, r2
     a70:	00 e0       	ldi	r16, 0x00	; 0
     a72:	10 e0       	ldi	r17, 0x00	; 0
							m_arry[idx] = m_cfg.m_pattern[pidx];
							break;
						case Decaying:
							if(m_cfg.m_decay > 0)
								{
								x = 256 / m_cfg.m_decay;
     a74:	41 2c       	mov	r4, r1
     a76:	55 24       	eor	r5, r5
     a78:	53 94       	inc	r5
     a7a:	57 c0       	rjmp	.+174    	; 0xb2a <_ZN9NeoPixels13TwinkleEffectEv+0x11a>

byte NeoPixels::GetPalette(size_t idx)
	{
		// for now, let's not get crazy - 4 bits per pixel
		byte curp = m_palette[idx / 2];	// 2 entries per byte
		byte val = idx % 2 > 0 ? (curp >> 4) & 0x0f : curp & 0x0f;
     a7c:	62 95       	swap	r22
     a7e:	6f 70       	andi	r22, 0x0F	; 15
	{
		size_t idx;
		m_active = 0;
		for(idx = 0;idx < m_cfg.m_pixels;idx++)
			{
				size_t pidx = GetPalette(idx);
     a80:	e6 2e       	mov	r14, r22
     a82:	f1 2c       	mov	r15, r1

				NeoPixelState ps = GetPixelState(idx);
     a84:	b8 01       	movw	r22, r16
     a86:	c6 01       	movw	r24, r12
     a88:	62 d4       	rcall	.+2244   	; 0x134e <_ZN9NeoPixels13GetPixelStateEj>
     a8a:	88 23       	and	r24, r24
				if(ps != TurnedOff)
     a8c:	09 f4       	brne	.+2      	; 0xa90 <_ZN9NeoPixels13TwinkleEffectEv+0x80>
     a8e:	5f c0       	rjmp	.+190    	; 0xb4e <_ZN9NeoPixels13TwinkleEffectEv+0x13e>
     a90:	f3 01       	movw	r30, r6
					m_active++;
     a92:	20 81       	ld	r18, Z
     a94:	31 81       	ldd	r19, Z+1	; 0x01
     a96:	2f 5f       	subi	r18, 0xFF	; 255
     a98:	3f 4f       	sbci	r19, 0xFF	; 255
     a9a:	31 83       	std	Z+1, r19	; 0x01
     a9c:	20 83       	st	Z, r18
     a9e:	f5 01       	movw	r30, r10

				if(m_tmrs[idx] == 0)
     aa0:	40 81       	ld	r20, Z
     aa2:	44 23       	and	r20, r20
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <_ZN9NeoPixels13TwinkleEffectEv+0x98>
     aa6:	5a c0       	rjmp	.+180    	; 0xb5c <_ZN9NeoPixels13TwinkleEffectEv+0x14c>
     aa8:	41 50       	subi	r20, 0x01	; 1
							break;
							}
					}
				else
					{
						m_tmrs[idx]--;
     aaa:	f5 01       	movw	r30, r10
     aac:	40 83       	st	Z, r20
     aae:	82 30       	cpi	r24, 0x02	; 2
						size_t x;
						switch(ps)
     ab0:	09 f4       	brne	.+2      	; 0xab4 <_ZN9NeoPixels13TwinkleEffectEv+0xa4>
     ab2:	6f c0       	rjmp	.+222    	; 0xb92 <_ZN9NeoPixels13TwinkleEffectEv+0x182>
     ab4:	83 30       	cpi	r24, 0x03	; 3
     ab6:	09 f4       	brne	.+2      	; 0xaba <_ZN9NeoPixels13TwinkleEffectEv+0xaa>
     ab8:	a0 c0       	rjmp	.+320    	; 0xbfa <_ZN9NeoPixels13TwinkleEffectEv+0x1ea>
     aba:	81 30       	cpi	r24, 0x01	; 1
     abc:	39 f5       	brne	.+78     	; 0xb0c <_ZN9NeoPixels13TwinkleEffectEv+0xfc>
     abe:	f6 01       	movw	r30, r12
							{
						case TurnedOff:
							break;
						case Attacking:
							if(m_cfg.m_attack > 0)
     ac0:	22 81       	ldd	r18, Z+2	; 0x02
     ac2:	33 81       	ldd	r19, Z+3	; 0x03
     ac4:	21 15       	cp	r18, r1
     ac6:	31 05       	cpc	r19, r1
     ac8:	09 f1       	breq	.+66     	; 0xb0c <_ZN9NeoPixels13TwinkleEffectEv+0xfc>
     aca:	c2 01       	movw	r24, r4
								{
								x = 256 / m_cfg.m_attack;
     acc:	b9 01       	movw	r22, r18
     ace:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__udivmodhi4>
     ad2:	c9 01       	movw	r24, r18
								x *= m_cfg.m_attack - m_tmrs[idx];
     ad4:	84 1b       	sub	r24, r20
     ad6:	91 09       	sbc	r25, r1
     ad8:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__mulhi3>
     adc:	8f 3f       	cpi	r24, 0xFF	; 255
     ade:	91 05       	cpc	r25, r1
     ae0:	19 f0       	breq	.+6      	; 0xae8 <_ZN9NeoPixels13TwinkleEffectEv+0xd8>
     ae2:	10 f0       	brcs	.+4      	; 0xae8 <_ZN9NeoPixels13TwinkleEffectEv+0xd8>
     ae4:	8f ef       	ldi	r24, 0xFF	; 255
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	b7 01       	movw	r22, r14
								if(x > 255)
									x = 255;
								//m_arry[idx] = NeoPixelColor(255,0,0) * (byte)(x);
								m_arry[idx] = m_cfg.m_pattern[pidx] * (byte)(x);
     aea:	66 0f       	add	r22, r22
     aec:	77 1f       	adc	r23, r23
     aee:	6e 0d       	add	r22, r14
     af0:	7f 1d       	adc	r23, r15
     af2:	61 5f       	subi	r22, 0xF1	; 241
     af4:	7f 4f       	sbci	r23, 0xFF	; 255
     af6:	6c 0d       	add	r22, r12
     af8:	7d 1d       	adc	r23, r13
     afa:	48 2f       	mov	r20, r24
     afc:	ce 01       	movw	r24, r28
								x *= m_cfg.m_decay - m_tmrs[idx];
								x = 256 - x;
								if(x > 255)
									x = 255;
								//m_arry[idx] = NeoPixelColor(0,255,0) * (byte)(x);
								m_arry[idx] = m_cfg.m_pattern[pidx] * (byte)(x);
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	bf db       	rcall	.-2178   	; 0x280 <_ZN13NeoPixelColormlEh>
     b02:	be 01       	movw	r22, r28
     b04:	6f 5f       	subi	r22, 0xFF	; 255
     b06:	7f 4f       	sbci	r23, 0xFF	; 255
     b08:	c4 01       	movw	r24, r8
     b0a:	a0 db       	rcall	.-2240   	; 0x24c <_ZN13NeoPixelColoraSERKS_>
     b0c:	0f 5f       	subi	r16, 0xFF	; 255
     b0e:	1f 4f       	sbci	r17, 0xFF	; 255
     b10:	ff ef       	ldi	r31, 0xFF	; 255

void NeoPixels::TwinkleEffect()
	{
		size_t idx;
		m_active = 0;
		for(idx = 0;idx < m_cfg.m_pixels;idx++)
     b12:	af 1a       	sub	r10, r31
     b14:	bf 0a       	sbc	r11, r31
     b16:	23 e0       	ldi	r18, 0x03	; 3
     b18:	82 0e       	add	r8, r18
     b1a:	91 1c       	adc	r9, r1
     b1c:	f6 01       	movw	r30, r12
     b1e:	60 81       	ld	r22, Z
     b20:	71 81       	ldd	r23, Z+1	; 0x01
     b22:	06 17       	cp	r16, r22
     b24:	17 07       	cpc	r17, r23
     b26:	08 f0       	brcs	.+2      	; 0xb2a <_ZN9NeoPixels13TwinkleEffectEv+0x11a>
     b28:	8b c0       	rjmp	.+278    	; 0xc40 <_ZN9NeoPixels13TwinkleEffectEv+0x230>
     b2a:	f8 01       	movw	r30, r16
     b2c:	f6 95       	lsr	r31
     b2e:	e7 95       	ror	r30
	}

byte NeoPixels::GetPalette(size_t idx)
	{
		// for now, let's not get crazy - 4 bits per pixel
		byte curp = m_palette[idx / 2];	// 2 entries per byte
     b30:	ec 0d       	add	r30, r12
     b32:	fd 1d       	adc	r31, r13
     b34:	e0 5e       	subi	r30, 0xE0	; 224
     b36:	fe 4f       	sbci	r31, 0xFE	; 254
     b38:	60 81       	ld	r22, Z
     b3a:	00 fd       	sbrc	r16, 0
     b3c:	9f cf       	rjmp	.-194    	; 0xa7c <_ZN9NeoPixels13TwinkleEffectEv+0x6c>
     b3e:	6f 70       	andi	r22, 0x0F	; 15
		byte val = idx % 2 > 0 ? (curp >> 4) & 0x0f : curp & 0x0f;
     b40:	e6 2e       	mov	r14, r22
     b42:	f1 2c       	mov	r15, r1
     b44:	b8 01       	movw	r22, r16
	{
		size_t idx;
		m_active = 0;
		for(idx = 0;idx < m_cfg.m_pixels;idx++)
			{
				size_t pidx = GetPalette(idx);
     b46:	c6 01       	movw	r24, r12
     b48:	02 d4       	rcall	.+2052   	; 0x134e <_ZN9NeoPixels13GetPixelStateEj>

				NeoPixelState ps = GetPixelState(idx);
     b4a:	81 11       	cpse	r24, r1
     b4c:	a1 cf       	rjmp	.-190    	; 0xa90 <_ZN9NeoPixels13TwinkleEffectEv+0x80>
     b4e:	f5 01       	movw	r30, r10
     b50:	80 81       	ld	r24, Z
				if(ps != TurnedOff)
     b52:	88 23       	and	r24, r24
     b54:	d9 f2       	breq	.-74     	; 0xb0c <_ZN9NeoPixels13TwinkleEffectEv+0xfc>
					m_active++;

				if(m_tmrs[idx] == 0)
     b56:	81 50       	subi	r24, 0x01	; 1
     b58:	80 83       	st	Z, r24
     b5a:	d8 cf       	rjmp	.-80     	; 0xb0c <_ZN9NeoPixels13TwinkleEffectEv+0xfc>
     b5c:	82 30       	cpi	r24, 0x02	; 2
							break;
							}
					}
				else
					{
						m_tmrs[idx]--;
     b5e:	09 f4       	brne	.+2      	; 0xb62 <_ZN9NeoPixels13TwinkleEffectEv+0x152>
     b60:	43 c0       	rjmp	.+134    	; 0xbe8 <_ZN9NeoPixels13TwinkleEffectEv+0x1d8>
     b62:	83 30       	cpi	r24, 0x03	; 3
				if(ps != TurnedOff)
					m_active++;

				if(m_tmrs[idx] == 0)
					{
						switch(ps)
     b64:	11 f1       	breq	.+68     	; 0xbaa <_ZN9NeoPixels13TwinkleEffectEv+0x19a>
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	89 f6       	brne	.-94     	; 0xb0c <_ZN9NeoPixels13TwinkleEffectEv+0xfc>
     b6a:	b7 01       	movw	r22, r14
     b6c:	66 0f       	add	r22, r22
     b6e:	77 1f       	adc	r23, r23
     b70:	6e 0d       	add	r22, r14
							{
						case TurnedOff:
							break;
						case Attacking:
							m_arry[idx] = m_cfg.m_pattern[pidx];
     b72:	7f 1d       	adc	r23, r15
     b74:	61 5f       	subi	r22, 0xF1	; 241
     b76:	7f 4f       	sbci	r23, 0xFF	; 255
     b78:	6c 0d       	add	r22, r12
     b7a:	7d 1d       	adc	r23, r13
     b7c:	c4 01       	movw	r24, r8
     b7e:	66 db       	rcall	.-2356   	; 0x24c <_ZN13NeoPixelColoraSERKS_>
     b80:	42 e0       	ldi	r20, 0x02	; 2
     b82:	b8 01       	movw	r22, r16
     b84:	c6 01       	movw	r24, r12
     b86:	c3 d3       	rcall	.+1926   	; 0x130e <_ZN9NeoPixels13SetPixelStateEj13NeoPixelState>
     b88:	f6 01       	movw	r30, r12
							SetPixelState(idx,Sustaining);
     b8a:	84 81       	ldd	r24, Z+4	; 0x04
     b8c:	f5 01       	movw	r30, r10
     b8e:	80 83       	st	Z, r24
     b90:	bd cf       	rjmp	.-134    	; 0xb0c <_ZN9NeoPixels13TwinkleEffectEv+0xfc>
     b92:	b7 01       	movw	r22, r14
							//m_tmrs[idx] = RandomOffset(m_sustain);
							m_tmrs[idx] = (byte) m_cfg.m_sustain > 255 ? 255 : m_cfg.m_sustain;
     b94:	66 0f       	add	r22, r22
     b96:	77 1f       	adc	r23, r23
     b98:	6e 0d       	add	r22, r14
     b9a:	7f 1d       	adc	r23, r15
							break;
     b9c:	61 5f       	subi	r22, 0xF1	; 241
								//m_arry[idx] = NeoPixelColor(255,0,0) * (byte)(x);
								m_arry[idx] = m_cfg.m_pattern[pidx] * (byte)(x);
								}
							break;
						case Sustaining:
							m_arry[idx] = m_cfg.m_pattern[pidx];
     b9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ba0:	6c 0d       	add	r22, r12
     ba2:	7d 1d       	adc	r23, r13
     ba4:	c4 01       	movw	r24, r8
     ba6:	52 db       	rcall	.-2396   	; 0x24c <_ZN13NeoPixelColoraSERKS_>
     ba8:	b1 cf       	rjmp	.-158    	; 0xb0c <_ZN9NeoPixels13TwinkleEffectEv+0xfc>
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	b8 01       	movw	r22, r16
     bae:	c6 01       	movw	r24, r12
     bb0:	ae d3       	rcall	.+1884   	; 0x130e <_ZN9NeoPixels13SetPixelStateEj13NeoPixelState>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	40 e0       	ldi	r20, 0x00	; 0
							break;
     bb6:	60 e0       	ldi	r22, 0x00	; 0
						case Sustaining:
							SetPixelState(idx,Decaying);
							m_tmrs[idx] = (byte) m_cfg.m_decay > 255 ? 255 : m_cfg.m_decay;
							break;
						case Decaying:
							SetPixelState(idx,TurnedOff);
     bb8:	ce 01       	movw	r24, r28
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	20 db       	rcall	.-2496   	; 0x1fe <_ZN13NeoPixelColorC1Ehhh>
     bbe:	be 01       	movw	r22, r28
     bc0:	6f 5f       	subi	r22, 0xFF	; 255
							m_arry[idx] = NeoPixelColor(0,0,0);
     bc2:	7f 4f       	sbci	r23, 0xFF	; 255
     bc4:	c4 01       	movw	r24, r8
     bc6:	42 db       	rcall	.-2428   	; 0x24c <_ZN13NeoPixelColoraSERKS_>
     bc8:	f6 01       	movw	r30, r12
     bca:	80 85       	ldd	r24, Z+8	; 0x08
     bcc:	91 85       	ldd	r25, Z+9	; 0x09
     bce:	4a de       	rcall	.-876    	; 0x864 <_Z12RandomOffsetj>
     bd0:	f5 01       	movw	r30, r10
     bd2:	80 83       	st	Z, r24
     bd4:	f3 01       	movw	r30, r6
     bd6:	80 81       	ld	r24, Z
     bd8:	91 81       	ldd	r25, Z+1	; 0x01
     bda:	00 97       	sbiw	r24, 0x00	; 0
							m_tmrs[idx] = RandomOffset(m_cfg.m_off);//(byte) m_off > 255 ? 255 : m_off;
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <_ZN9NeoPixels13TwinkleEffectEv+0x1d0>
     bde:	96 cf       	rjmp	.-212    	; 0xb0c <_ZN9NeoPixels13TwinkleEffectEv+0xfc>
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	91 83       	std	Z+1, r25	; 0x01
     be4:	80 83       	st	Z, r24
     be6:	92 cf       	rjmp	.-220    	; 0xb0c <_ZN9NeoPixels13TwinkleEffectEv+0xfc>
     be8:	43 e0       	ldi	r20, 0x03	; 3
							if(m_active > 0)
     bea:	b8 01       	movw	r22, r16
     bec:	c6 01       	movw	r24, r12
     bee:	8f d3       	rcall	.+1822   	; 0x130e <_ZN9NeoPixels13SetPixelStateEj13NeoPixelState>
     bf0:	f6 01       	movw	r30, r12
     bf2:	86 81       	ldd	r24, Z+6	; 0x06
     bf4:	f5 01       	movw	r30, r10
								m_active--;
     bf6:	80 83       	st	Z, r24
     bf8:	89 cf       	rjmp	.-238    	; 0xb0c <_ZN9NeoPixels13TwinkleEffectEv+0xfc>
     bfa:	f6 01       	movw	r30, r12
     bfc:	26 81       	ldd	r18, Z+6	; 0x06
							SetPixelState(idx,Sustaining);
							//m_tmrs[idx] = RandomOffset(m_sustain);
							m_tmrs[idx] = (byte) m_cfg.m_sustain > 255 ? 255 : m_cfg.m_sustain;
							break;
						case Sustaining:
							SetPixelState(idx,Decaying);
     bfe:	37 81       	ldd	r19, Z+7	; 0x07
     c00:	21 15       	cp	r18, r1
     c02:	31 05       	cpc	r19, r1
     c04:	09 f4       	brne	.+2      	; 0xc08 <_ZN9NeoPixels13TwinkleEffectEv+0x1f8>
     c06:	82 cf       	rjmp	.-252    	; 0xb0c <_ZN9NeoPixels13TwinkleEffectEv+0xfc>
							m_tmrs[idx] = (byte) m_cfg.m_decay > 255 ? 255 : m_cfg.m_decay;
     c08:	c2 01       	movw	r24, r4
     c0a:	b9 01       	movw	r22, r18
     c0c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__udivmodhi4>
							break;
     c10:	c9 01       	movw	r24, r18
							break;
						case Sustaining:
							m_arry[idx] = m_cfg.m_pattern[pidx];
							break;
						case Decaying:
							if(m_cfg.m_decay > 0)
     c12:	84 1b       	sub	r24, r20
     c14:	91 09       	sbc	r25, r1
     c16:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__mulhi3>
     c1a:	a2 01       	movw	r20, r4
     c1c:	48 1b       	sub	r20, r24
     c1e:	59 0b       	sbc	r21, r25
								{
								x = 256 / m_cfg.m_decay;
     c20:	4f 3f       	cpi	r20, 0xFF	; 255
     c22:	51 05       	cpc	r21, r1
     c24:	19 f0       	breq	.+6      	; 0xc2c <_ZN9NeoPixels13TwinkleEffectEv+0x21c>
     c26:	10 f0       	brcs	.+4      	; 0xc2c <_ZN9NeoPixels13TwinkleEffectEv+0x21c>
								x *= m_cfg.m_decay - m_tmrs[idx];
     c28:	4f ef       	ldi	r20, 0xFF	; 255
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	b7 01       	movw	r22, r14
     c2e:	66 0f       	add	r22, r22
     c30:	77 1f       	adc	r23, r23
     c32:	6e 0d       	add	r22, r14
     c34:	7f 1d       	adc	r23, r15
     c36:	61 5f       	subi	r22, 0xF1	; 241
     c38:	7f 4f       	sbci	r23, 0xFF	; 255
     c3a:	6c 0d       	add	r22, r12
     c3c:	7d 1d       	adc	r23, r13
     c3e:	5e cf       	rjmp	.-324    	; 0xafc <_ZN9NeoPixels13TwinkleEffectEv+0xec>
     c40:	f3 01       	movw	r30, r6
     c42:	80 81       	ld	r24, Z
								x = 256 - x;
								if(x > 255)
									x = 255;
								//m_arry[idx] = NeoPixelColor(0,255,0) * (byte)(x);
								m_arry[idx] = m_cfg.m_pattern[pidx] * (byte)(x);
     c44:	91 81       	ldd	r25, Z+1	; 0x01
     c46:	f6 01       	movw	r30, r12
     c48:	e7 5c       	subi	r30, 0xC7	; 199
     c4a:	fe 4f       	sbci	r31, 0xFE	; 254
     c4c:	20 81       	ld	r18, Z
     c4e:	31 81       	ldd	r19, Z+1	; 0x01
     c50:	82 17       	cp	r24, r18
     c52:	93 07       	cpc	r25, r19
     c54:	40 f4       	brcc	.+16     	; 0xc66 <_ZN9NeoPixels13TwinkleEffectEv+0x256>
     c56:	b9 01       	movw	r22, r18
     c58:	68 1b       	sub	r22, r24
     c5a:	79 0b       	sbc	r23, r25
     c5c:	c6 01       	movw	r24, r12
								}
							break;
							}
					}
			}
		if(m_active < m_lit)
     c5e:	a5 d2       	rcall	.+1354   	; 0x11aa <_ZN9NeoPixels16StartRandomPixelEj>
     c60:	f6 01       	movw	r30, r12
     c62:	60 81       	ld	r22, Z
     c64:	71 81       	ldd	r23, Z+1	; 0x01
     c66:	c1 01       	movw	r24, r2
     c68:	4c d1       	rcall	.+664    	; 0xf02 <_Z10sendPixelsP13NeoPixelColorj>
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
			StartRandomPixel(m_lit - m_active);
     c6e:	0f 90       	pop	r0
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	ff 90       	pop	r15
     c7a:	ef 90       	pop	r14
     c7c:	df 90       	pop	r13
     c7e:	cf 90       	pop	r12
		sendPixels(m_arry,m_cfg.m_pixels);
     c80:	bf 90       	pop	r11
     c82:	af 90       	pop	r10
     c84:	9f 90       	pop	r9
	}
     c86:	8f 90       	pop	r8
     c88:	7f 90       	pop	r7
     c8a:	6f 90       	pop	r6
     c8c:	5f 90       	pop	r5
     c8e:	4f 90       	pop	r4
     c90:	3f 90       	pop	r3
     c92:	2f 90       	pop	r2
     c94:	08 95       	ret
     c96:	96 01       	movw	r18, r12
     c98:	25 5b       	subi	r18, 0xB5	; 181
     c9a:	3f 4f       	sbci	r19, 0xFF	; 255
     c9c:	19 01       	movw	r2, r18
     c9e:	d3 cf       	rjmp	.-90     	; 0xc46 <_ZN9NeoPixels13TwinkleEffectEv+0x236>

00000ca0 <_Z9sendPixelhhh>:

	}

//static __inline__
void sendPixel(unsigned char r, unsigned char g, unsigned char b)
	{
     ca0:	98 e0       	ldi	r25, 0x08	; 8
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	0b c0       	rjmp	.+22     	; 0xcbc <_Z9sendPixelhhh+0x1c>
     ca6:	28 9a       	sbi	0x05, 0	; 5
     ca8:	22 e0       	ldi	r18, 0x02	; 2
     caa:	2a 95       	dec	r18
     cac:	f1 f7       	brne	.-4      	; 0xcaa <_Z9sendPixelhhh+0xa>
     cae:	28 98       	cbi	0x05, 0	; 5
     cb0:	24 e0       	ldi	r18, 0x04	; 4
     cb2:	2a 95       	dec	r18
     cb4:	f1 f7       	brne	.-4      	; 0xcb2 <_Z9sendPixelhhh+0x12>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     cb6:	66 0f       	add	r22, r22
     cb8:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     cba:	71 f0       	breq	.+28     	; 0xcd8 <_Z9sendPixelhhh+0x38>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     cbc:	23 2f       	mov	r18, r19
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     cbe:	67 ff       	sbrs	r22, 7
     cc0:	f2 cf       	rjmp	.-28     	; 0xca6 <_Z9sendPixelhhh+0x6>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     cc2:	28 9a       	sbi	0x05, 0	; 5
     cc4:	24 e0       	ldi	r18, 0x04	; 4
     cc6:	2a 95       	dec	r18
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <_Z9sendPixelhhh+0x26>
     cca:	28 98       	cbi	0x05, 0	; 5
     ccc:	23 e0       	ldi	r18, 0x03	; 3
     cce:	2a 95       	dec	r18
     cd0:	f1 f7       	brne	.-4      	; 0xcce <_Z9sendPixelhhh+0x2e>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     cd2:	66 0f       	add	r22, r22
     cd4:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     cd6:	91 f7       	brne	.-28     	; 0xcbc <_Z9sendPixelhhh+0x1c>
//static __inline__
void sendPixel(unsigned char r, unsigned char g, unsigned char b)
	{

		sendByte(g);      // Neopixel wants colors in green then red then blue order
		if (tbi(UCSR1A,RXC1))
     cd8:	90 91 c8 00 	lds	r25, 0x00C8
     cdc:	97 fd       	sbrc	r25, 7
     cde:	3c c0       	rjmp	.+120    	; 0xd58 <_Z9sendPixelhhh+0xb8>
     ce0:	98 e0       	ldi	r25, 0x08	; 8
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	0b c0       	rjmp	.+22     	; 0xcfc <_Z9sendPixelhhh+0x5c>
     ce6:	28 9a       	sbi	0x05, 0	; 5
     ce8:	22 e0       	ldi	r18, 0x02	; 2
     cea:	2a 95       	dec	r18
     cec:	f1 f7       	brne	.-4      	; 0xcea <_Z9sendPixelhhh+0x4a>
     cee:	28 98       	cbi	0x05, 0	; 5
     cf0:	24 e0       	ldi	r18, 0x04	; 4
     cf2:	2a 95       	dec	r18
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <_Z9sendPixelhhh+0x52>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     cf6:	88 0f       	add	r24, r24
     cf8:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     cfa:	71 f0       	breq	.+28     	; 0xd18 <_Z9sendPixelhhh+0x78>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     cfc:	23 2f       	mov	r18, r19
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     cfe:	87 ff       	sbrs	r24, 7
     d00:	f2 cf       	rjmp	.-28     	; 0xce6 <_Z9sendPixelhhh+0x46>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     d02:	28 9a       	sbi	0x05, 0	; 5
     d04:	24 e0       	ldi	r18, 0x04	; 4
     d06:	2a 95       	dec	r18
     d08:	f1 f7       	brne	.-4      	; 0xd06 <_Z9sendPixelhhh+0x66>
     d0a:	28 98       	cbi	0x05, 0	; 5
     d0c:	23 e0       	ldi	r18, 0x03	; 3
     d0e:	2a 95       	dec	r18
     d10:	f1 f7       	brne	.-4      	; 0xd0e <_Z9sendPixelhhh+0x6e>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     d12:	88 0f       	add	r24, r24
     d14:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     d16:	91 f7       	brne	.-28     	; 0xcfc <_Z9sendPixelhhh+0x5c>

		sendByte(g);      // Neopixel wants colors in green then red then blue order
		if (tbi(UCSR1A,RXC1))
			return;
		sendByte(r);
		if (tbi(UCSR1A,RXC1))
     d18:	80 91 c8 00 	lds	r24, 0x00C8
     d1c:	87 fd       	sbrc	r24, 7
     d1e:	1c c0       	rjmp	.+56     	; 0xd58 <_Z9sendPixelhhh+0xb8>
     d20:	88 e0       	ldi	r24, 0x08	; 8
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	0b c0       	rjmp	.+22     	; 0xd3c <_Z9sendPixelhhh+0x9c>
     d26:	28 9a       	sbi	0x05, 0	; 5
     d28:	92 e0       	ldi	r25, 0x02	; 2
     d2a:	9a 95       	dec	r25
     d2c:	f1 f7       	brne	.-4      	; 0xd2a <_Z9sendPixelhhh+0x8a>
     d2e:	28 98       	cbi	0x05, 0	; 5
     d30:	94 e0       	ldi	r25, 0x04	; 4
     d32:	9a 95       	dec	r25
     d34:	f1 f7       	brne	.-4      	; 0xd32 <_Z9sendPixelhhh+0x92>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     d36:	44 0f       	add	r20, r20
     d38:	81 50       	subi	r24, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     d3a:	71 f0       	breq	.+28     	; 0xd58 <_Z9sendPixelhhh+0xb8>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     d3c:	92 2f       	mov	r25, r18
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     d3e:	47 ff       	sbrs	r20, 7
     d40:	f2 cf       	rjmp	.-28     	; 0xd26 <_Z9sendPixelhhh+0x86>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     d42:	28 9a       	sbi	0x05, 0	; 5
     d44:	94 e0       	ldi	r25, 0x04	; 4
     d46:	9a 95       	dec	r25
     d48:	f1 f7       	brne	.-4      	; 0xd46 <_Z9sendPixelhhh+0xa6>
     d4a:	28 98       	cbi	0x05, 0	; 5
     d4c:	93 e0       	ldi	r25, 0x03	; 3
     d4e:	9a 95       	dec	r25
     d50:	f1 f7       	brne	.-4      	; 0xd4e <_Z9sendPixelhhh+0xae>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     d52:	44 0f       	add	r20, r20
     d54:	81 50       	subi	r24, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     d56:	91 f7       	brne	.-28     	; 0xd3c <_Z9sendPixelhhh+0x9c>
     d58:	08 95       	ret

00000d5a <_Z12sendPixelRGBR13NeoPixelColor>:

	}

//static __inline__
void sendPixelRGB(NeoPixelColor &c)
	{
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	ec 01       	movw	r28, r24
		sendByte(c.getGreen()); // Neopixel wants colors in green then red then blue order
     d60:	20 da       	rcall	.-3008   	; 0x1a2 <_ZN13NeoPixelColor8getGreenEv>
     d62:	28 2f       	mov	r18, r24
     d64:	98 e0       	ldi	r25, 0x08	; 8
     d66:	80 e0       	ldi	r24, 0x00	; 0
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     d68:	0b c0       	rjmp	.+22     	; 0xd80 <_Z12sendPixelRGBR13NeoPixelColor+0x26>
     d6a:	28 9a       	sbi	0x05, 0	; 5
     d6c:	32 e0       	ldi	r19, 0x02	; 2
     d6e:	3a 95       	dec	r19
     d70:	f1 f7       	brne	.-4      	; 0xd6e <_Z12sendPixelRGBR13NeoPixelColor+0x14>
     d72:	28 98       	cbi	0x05, 0	; 5
     d74:	34 e0       	ldi	r19, 0x04	; 4
     d76:	3a 95       	dec	r19
     d78:	f1 f7       	brne	.-4      	; 0xd76 <_Z12sendPixelRGBR13NeoPixelColor+0x1c>
     d7a:	22 0f       	add	r18, r18
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     d7c:	91 50       	subi	r25, 0x01	; 1
     d7e:	71 f0       	breq	.+28     	; 0xd9c <_Z12sendPixelRGBR13NeoPixelColor+0x42>

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     d80:	38 2f       	mov	r19, r24
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     d82:	27 ff       	sbrs	r18, 7
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     d84:	f2 cf       	rjmp	.-28     	; 0xd6a <_Z12sendPixelRGBR13NeoPixelColor+0x10>
     d86:	28 9a       	sbi	0x05, 0	; 5
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     d88:	34 e0       	ldi	r19, 0x04	; 4
     d8a:	3a 95       	dec	r19
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <_Z12sendPixelRGBR13NeoPixelColor+0x30>
     d8e:	28 98       	cbi	0x05, 0	; 5
     d90:	33 e0       	ldi	r19, 0x03	; 3
     d92:	3a 95       	dec	r19
     d94:	f1 f7       	brne	.-4      	; 0xd92 <_Z12sendPixelRGBR13NeoPixelColor+0x38>
     d96:	22 0f       	add	r18, r18
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     d98:	91 50       	subi	r25, 0x01	; 1
     d9a:	91 f7       	brne	.-28     	; 0xd80 <_Z12sendPixelRGBR13NeoPixelColor+0x26>

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     d9c:	80 91 c8 00 	lds	r24, 0x00C8

//static __inline__
void sendPixelRGB(NeoPixelColor &c)
	{
		sendByte(c.getGreen()); // Neopixel wants colors in green then red then blue order
		if (tbi(UCSR1A,RXC1))
     da0:	87 fd       	sbrc	r24, 7
     da2:	42 c0       	rjmp	.+132    	; 0xe28 <_Z12sendPixelRGBR13NeoPixelColor+0xce>
     da4:	ce 01       	movw	r24, r28
			return;
		sendByte(c.getRed());
     da6:	f4 d9       	rcall	.-3096   	; 0x190 <_ZN13NeoPixelColor6getRedEv>
     da8:	28 2f       	mov	r18, r24
     daa:	98 e0       	ldi	r25, 0x08	; 8
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	0c c0       	rjmp	.+24     	; 0xdc8 <_Z12sendPixelRGBR13NeoPixelColor+0x6e>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     db0:	34 2f       	mov	r19, r20
     db2:	28 9a       	sbi	0x05, 0	; 5
     db4:	32 e0       	ldi	r19, 0x02	; 2
     db6:	3a 95       	dec	r19
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <_Z12sendPixelRGBR13NeoPixelColor+0x5c>
     dba:	28 98       	cbi	0x05, 0	; 5
     dbc:	34 e0       	ldi	r19, 0x04	; 4
     dbe:	3a 95       	dec	r19
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <_Z12sendPixelRGBR13NeoPixelColor+0x64>
     dc2:	22 0f       	add	r18, r18
     dc4:	91 50       	subi	r25, 0x01	; 1
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     dc6:	71 f0       	breq	.+28     	; 0xde4 <_Z12sendPixelRGBR13NeoPixelColor+0x8a>
     dc8:	27 ff       	sbrs	r18, 7

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     dca:	f2 cf       	rjmp	.-28     	; 0xdb0 <_Z12sendPixelRGBR13NeoPixelColor+0x56>
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     dcc:	84 2f       	mov	r24, r20
     dce:	28 9a       	sbi	0x05, 0	; 5
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     dd0:	84 e0       	ldi	r24, 0x04	; 4
     dd2:	8a 95       	dec	r24
     dd4:	f1 f7       	brne	.-4      	; 0xdd2 <_Z12sendPixelRGBR13NeoPixelColor+0x78>
     dd6:	28 98       	cbi	0x05, 0	; 5
     dd8:	83 e0       	ldi	r24, 0x03	; 3
     dda:	8a 95       	dec	r24
     ddc:	f1 f7       	brne	.-4      	; 0xdda <_Z12sendPixelRGBR13NeoPixelColor+0x80>
     dde:	22 0f       	add	r18, r18
     de0:	91 50       	subi	r25, 0x01	; 1
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     de2:	91 f7       	brne	.-28     	; 0xdc8 <_Z12sendPixelRGBR13NeoPixelColor+0x6e>
     de4:	80 91 c8 00 	lds	r24, 0x00C8
	{
		sendByte(c.getGreen()); // Neopixel wants colors in green then red then blue order
		if (tbi(UCSR1A,RXC1))
			return;
		sendByte(c.getRed());
		if (tbi(UCSR1A,RXC1))
     de8:	87 fd       	sbrc	r24, 7
     dea:	1e c0       	rjmp	.+60     	; 0xe28 <_Z12sendPixelRGBR13NeoPixelColor+0xce>
     dec:	ce 01       	movw	r24, r28
     dee:	e2 d9       	rcall	.-3132   	; 0x1b4 <_ZN13NeoPixelColor7getBlueEv>
			return;
		sendByte(c.getBlue());
     df0:	98 e0       	ldi	r25, 0x08	; 8
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	0b c0       	rjmp	.+22     	; 0xe0c <_Z12sendPixelRGBR13NeoPixelColor+0xb2>
     df6:	28 9a       	sbi	0x05, 0	; 5
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     df8:	22 e0       	ldi	r18, 0x02	; 2
     dfa:	2a 95       	dec	r18
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <_Z12sendPixelRGBR13NeoPixelColor+0xa0>
     dfe:	28 98       	cbi	0x05, 0	; 5
     e00:	24 e0       	ldi	r18, 0x04	; 4
     e02:	2a 95       	dec	r18
     e04:	f1 f7       	brne	.-4      	; 0xe02 <_Z12sendPixelRGBR13NeoPixelColor+0xa8>
     e06:	88 0f       	add	r24, r24
     e08:	91 50       	subi	r25, 0x01	; 1
     e0a:	71 f0       	breq	.+28     	; 0xe28 <_Z12sendPixelRGBR13NeoPixelColor+0xce>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     e0c:	23 2f       	mov	r18, r19
     e0e:	87 ff       	sbrs	r24, 7

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     e10:	f2 cf       	rjmp	.-28     	; 0xdf6 <_Z12sendPixelRGBR13NeoPixelColor+0x9c>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     e12:	28 9a       	sbi	0x05, 0	; 5
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     e14:	24 e0       	ldi	r18, 0x04	; 4
     e16:	2a 95       	dec	r18
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     e18:	f1 f7       	brne	.-4      	; 0xe16 <_Z12sendPixelRGBR13NeoPixelColor+0xbc>
     e1a:	28 98       	cbi	0x05, 0	; 5
     e1c:	23 e0       	ldi	r18, 0x03	; 3
     e1e:	2a 95       	dec	r18
     e20:	f1 f7       	brne	.-4      	; 0xe1e <_Z12sendPixelRGBR13NeoPixelColor+0xc4>
     e22:	88 0f       	add	r24, r24
     e24:	91 50       	subi	r25, 0x01	; 1
     e26:	91 f7       	brne	.-28     	; 0xe0c <_Z12sendPixelRGBR13NeoPixelColor+0xb2>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     e2c:	08 95       	ret

00000e2e <_Z12sendPixelGBRR13NeoPixelColor>:
		sendByte(c.getBlue());

	}

void sendPixelGBR(NeoPixelColor &c)
	{
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	ec 01       	movw	r28, r24
		sendByte(c.getRed());
     e34:	ad d9       	rcall	.-3238   	; 0x190 <_ZN13NeoPixelColor6getRedEv>
     e36:	28 2f       	mov	r18, r24
     e38:	98 e0       	ldi	r25, 0x08	; 8
     e3a:	80 e0       	ldi	r24, 0x00	; 0
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     e3c:	0b c0       	rjmp	.+22     	; 0xe54 <_Z12sendPixelGBRR13NeoPixelColor+0x26>
     e3e:	28 9a       	sbi	0x05, 0	; 5
     e40:	32 e0       	ldi	r19, 0x02	; 2
     e42:	3a 95       	dec	r19
     e44:	f1 f7       	brne	.-4      	; 0xe42 <_Z12sendPixelGBRR13NeoPixelColor+0x14>
     e46:	28 98       	cbi	0x05, 0	; 5
     e48:	34 e0       	ldi	r19, 0x04	; 4
     e4a:	3a 95       	dec	r19
     e4c:	f1 f7       	brne	.-4      	; 0xe4a <_Z12sendPixelGBRR13NeoPixelColor+0x1c>
     e4e:	22 0f       	add	r18, r18
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     e50:	91 50       	subi	r25, 0x01	; 1
     e52:	71 f0       	breq	.+28     	; 0xe70 <_Z12sendPixelGBRR13NeoPixelColor+0x42>

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     e54:	38 2f       	mov	r19, r24
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     e56:	27 ff       	sbrs	r18, 7
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     e58:	f2 cf       	rjmp	.-28     	; 0xe3e <_Z12sendPixelGBRR13NeoPixelColor+0x10>
     e5a:	28 9a       	sbi	0x05, 0	; 5
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     e5c:	34 e0       	ldi	r19, 0x04	; 4
     e5e:	3a 95       	dec	r19
     e60:	f1 f7       	brne	.-4      	; 0xe5e <_Z12sendPixelGBRR13NeoPixelColor+0x30>
     e62:	28 98       	cbi	0x05, 0	; 5
     e64:	33 e0       	ldi	r19, 0x03	; 3
     e66:	3a 95       	dec	r19
     e68:	f1 f7       	brne	.-4      	; 0xe66 <_Z12sendPixelGBRR13NeoPixelColor+0x38>
     e6a:	22 0f       	add	r18, r18
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     e6c:	91 50       	subi	r25, 0x01	; 1
     e6e:	91 f7       	brne	.-28     	; 0xe54 <_Z12sendPixelGBRR13NeoPixelColor+0x26>

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     e70:	80 91 c8 00 	lds	r24, 0x00C8
	}

void sendPixelGBR(NeoPixelColor &c)
	{
		sendByte(c.getRed());
		if (tbi(UCSR1A,RXC1))
     e74:	87 fd       	sbrc	r24, 7
     e76:	42 c0       	rjmp	.+132    	; 0xefc <_Z12sendPixelGBRR13NeoPixelColor+0xce>
     e78:	ce 01       	movw	r24, r28
			return;
		sendByte(c.getGreen()); // Neopixel wants colors in green then red then blue order
     e7a:	93 d9       	rcall	.-3290   	; 0x1a2 <_ZN13NeoPixelColor8getGreenEv>
     e7c:	28 2f       	mov	r18, r24
     e7e:	98 e0       	ldi	r25, 0x08	; 8
     e80:	40 e0       	ldi	r20, 0x00	; 0
     e82:	0c c0       	rjmp	.+24     	; 0xe9c <_Z12sendPixelGBRR13NeoPixelColor+0x6e>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     e84:	34 2f       	mov	r19, r20
     e86:	28 9a       	sbi	0x05, 0	; 5
     e88:	32 e0       	ldi	r19, 0x02	; 2
     e8a:	3a 95       	dec	r19
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <_Z12sendPixelGBRR13NeoPixelColor+0x5c>
     e8e:	28 98       	cbi	0x05, 0	; 5
     e90:	34 e0       	ldi	r19, 0x04	; 4
     e92:	3a 95       	dec	r19
     e94:	f1 f7       	brne	.-4      	; 0xe92 <_Z12sendPixelGBRR13NeoPixelColor+0x64>
     e96:	22 0f       	add	r18, r18
     e98:	91 50       	subi	r25, 0x01	; 1
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     e9a:	71 f0       	breq	.+28     	; 0xeb8 <_Z12sendPixelGBRR13NeoPixelColor+0x8a>
     e9c:	27 ff       	sbrs	r18, 7

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     e9e:	f2 cf       	rjmp	.-28     	; 0xe84 <_Z12sendPixelGBRR13NeoPixelColor+0x56>
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     ea0:	84 2f       	mov	r24, r20
     ea2:	28 9a       	sbi	0x05, 0	; 5
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     ea4:	84 e0       	ldi	r24, 0x04	; 4
     ea6:	8a 95       	dec	r24
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <_Z12sendPixelGBRR13NeoPixelColor+0x78>
     eaa:	28 98       	cbi	0x05, 0	; 5
     eac:	83 e0       	ldi	r24, 0x03	; 3
     eae:	8a 95       	dec	r24
     eb0:	f1 f7       	brne	.-4      	; 0xeae <_Z12sendPixelGBRR13NeoPixelColor+0x80>
     eb2:	22 0f       	add	r18, r18
     eb4:	91 50       	subi	r25, 0x01	; 1
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     eb6:	91 f7       	brne	.-28     	; 0xe9c <_Z12sendPixelGBRR13NeoPixelColor+0x6e>
     eb8:	80 91 c8 00 	lds	r24, 0x00C8
	{
		sendByte(c.getRed());
		if (tbi(UCSR1A,RXC1))
			return;
		sendByte(c.getGreen()); // Neopixel wants colors in green then red then blue order
		if (tbi(UCSR1A,RXC1))
     ebc:	87 fd       	sbrc	r24, 7
     ebe:	1e c0       	rjmp	.+60     	; 0xefc <_Z12sendPixelGBRR13NeoPixelColor+0xce>
     ec0:	ce 01       	movw	r24, r28
     ec2:	78 d9       	rcall	.-3344   	; 0x1b4 <_ZN13NeoPixelColor7getBlueEv>
			return;
		sendByte(c.getBlue());
     ec4:	98 e0       	ldi	r25, 0x08	; 8
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	0b c0       	rjmp	.+22     	; 0xee0 <_Z12sendPixelGBRR13NeoPixelColor+0xb2>
     eca:	28 9a       	sbi	0x05, 0	; 5
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     ecc:	22 e0       	ldi	r18, 0x02	; 2
     ece:	2a 95       	dec	r18
     ed0:	f1 f7       	brne	.-4      	; 0xece <_Z12sendPixelGBRR13NeoPixelColor+0xa0>
     ed2:	28 98       	cbi	0x05, 0	; 5
     ed4:	24 e0       	ldi	r18, 0x04	; 4
     ed6:	2a 95       	dec	r18
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <_Z12sendPixelGBRR13NeoPixelColor+0xa8>
     eda:	88 0f       	add	r24, r24
     edc:	91 50       	subi	r25, 0x01	; 1
     ede:	71 f0       	breq	.+28     	; 0xefc <_Z12sendPixelGBRR13NeoPixelColor+0xce>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     ee0:	23 2f       	mov	r18, r19
     ee2:	87 ff       	sbrs	r24, 7

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     ee4:	f2 cf       	rjmp	.-28     	; 0xeca <_Z12sendPixelGBRR13NeoPixelColor+0x9c>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     ee6:	28 9a       	sbi	0x05, 0	; 5
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     ee8:	24 e0       	ldi	r18, 0x04	; 4
     eea:	2a 95       	dec	r18
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     eec:	f1 f7       	brne	.-4      	; 0xeea <_Z12sendPixelGBRR13NeoPixelColor+0xbc>
     eee:	28 98       	cbi	0x05, 0	; 5
     ef0:	23 e0       	ldi	r18, 0x03	; 3
     ef2:	2a 95       	dec	r18
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <_Z12sendPixelGBRR13NeoPixelColor+0xc4>
     ef6:	88 0f       	add	r24, r24
     ef8:	91 50       	subi	r25, 0x01	; 1
     efa:	91 f7       	brne	.-28     	; 0xee0 <_Z12sendPixelGBRR13NeoPixelColor+0xb2>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     f00:	08 95       	ret

00000f02 <_Z10sendPixelsP13NeoPixelColorj>:
		sendByte(c.getBlue());

	}

void sendPixels(NeoPixelColor *px,size_t len)
	{
     f02:	bf 92       	push	r11
     f04:	cf 92       	push	r12
     f06:	df 92       	push	r13
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	8c 01       	movw	r16, r24
     f16:	6b 01       	movw	r12, r22
		if(NeoPixelColor::m_color_order == RGB)
     f18:	80 91 04 01 	lds	r24, 0x0104
     f1c:	81 11       	cpse	r24, r1
     f1e:	26 c0       	rjmp	.+76     	; 0xf6c <_Z10sendPixelsP13NeoPixelColorj+0x6a>
    unsigned char sreg;

public:
    InterruptBlocker()
	{
	sreg = SREG;
     f20:	bf b6       	in	r11, 0x3f	; 63
	cli();
     f22:	f8 94       	cli
			{
			InterruptBlocker ib;
			for(size_t i = 0;i<len;i++)
     f24:	61 15       	cp	r22, r1
     f26:	71 05       	cpc	r23, r1
     f28:	f1 f0       	breq	.+60     	; 0xf66 <_Z10sendPixelsP13NeoPixelColorj+0x64>
     f2a:	e8 01       	movw	r28, r16
     f2c:	7b 01       	movw	r14, r22
     f2e:	ee 0c       	add	r14, r14
     f30:	ff 1c       	adc	r15, r15
     f32:	e6 0e       	add	r14, r22
     f34:	f7 1e       	adc	r15, r23
     f36:	e0 0e       	add	r14, r16
     f38:	f1 1e       	adc	r15, r17
     f3a:	04 c0       	rjmp	.+8      	; 0xf44 <_Z10sendPixelsP13NeoPixelColorj+0x42>
     f3c:	23 96       	adiw	r28, 0x03	; 3
     f3e:	ce 15       	cp	r28, r14
     f40:	df 05       	cpc	r29, r15
     f42:	89 f0       	breq	.+34     	; 0xf66 <_Z10sendPixelsP13NeoPixelColorj+0x64>
				{
					sendPixelRGB(px[i]);
     f44:	ce 01       	movw	r24, r28
     f46:	09 df       	rcall	.-494    	; 0xd5a <_Z12sendPixelRGBR13NeoPixelColor>
     f48:	80 91 c8 00 	lds	r24, 0x00C8
					if (tbi(UCSR1A,RXC1))
     f4c:	87 ff       	sbrs	r24, 7
     f4e:	f6 cf       	rjmp	.-20     	; 0xf3c <_Z10sendPixelsP13NeoPixelColorj+0x3a>
     f50:	bf be       	out	0x3f, r11	; 63
     f52:	df 91       	pop	r29
					sendPixelGBR(px[i]);
					if (tbi(UCSR1A,RXC1))
						return;
				}
			}
	}
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	df 90       	pop	r13
     f60:	cf 90       	pop	r12
     f62:	bf 90       	pop	r11
     f64:	08 95       	ret
     f66:	bf be       	out	0x3f, r11	; 63
	}
    ;

    ~InterruptBlocker()
	{
	SREG = sreg;
     f68:	80 91 04 01 	lds	r24, 0x0104
     f6c:	81 30       	cpi	r24, 0x01	; 1
					sendPixelRGB(px[i]);
					if (tbi(UCSR1A,RXC1))
						return;
				}
			}
		if(NeoPixelColor::m_color_order == GRB)
     f6e:	89 f7       	brne	.-30     	; 0xf52 <_Z10sendPixelsP13NeoPixelColorj+0x50>
     f70:	ff b6       	in	r15, 0x3f	; 63
    unsigned char sreg;

public:
    InterruptBlocker()
	{
	sreg = SREG;
     f72:	f8 94       	cli
     f74:	c1 14       	cp	r12, r1
			{
			InterruptBlocker ib;
			for(size_t i = 0;i<len;i++)
     f76:	d1 04       	cpc	r13, r1
     f78:	99 f0       	breq	.+38     	; 0xfa0 <_Z10sendPixelsP13NeoPixelColorj+0x9e>
     f7a:	e8 01       	movw	r28, r16
     f7c:	c6 01       	movw	r24, r12
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	c8 0e       	add	r12, r24
     f84:	d9 1e       	adc	r13, r25
     f86:	c0 0e       	add	r12, r16
     f88:	d1 1e       	adc	r13, r17
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <_Z10sendPixelsP13NeoPixelColorj+0x92>
     f8c:	23 96       	adiw	r28, 0x03	; 3
     f8e:	cc 15       	cp	r28, r12
     f90:	dd 05       	cpc	r29, r13
     f92:	31 f0       	breq	.+12     	; 0xfa0 <_Z10sendPixelsP13NeoPixelColorj+0x9e>
     f94:	ce 01       	movw	r24, r28
				{
					sendPixelGBR(px[i]);
     f96:	4b df       	rcall	.-362    	; 0xe2e <_Z12sendPixelGBRR13NeoPixelColor>
     f98:	80 91 c8 00 	lds	r24, 0x00C8
					if (tbi(UCSR1A,RXC1))
     f9c:	87 ff       	sbrs	r24, 7
     f9e:	f6 cf       	rjmp	.-20     	; 0xf8c <_Z10sendPixelsP13NeoPixelColorj+0x8a>
     fa0:	ff be       	out	0x3f, r15	; 63
     fa2:	d7 cf       	rjmp	.-82     	; 0xf52 <_Z10sendPixelsP13NeoPixelColorj+0x50>

00000fa4 <_Z5Wheelh>:
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	ec 01       	movw	r28, r24
     faa:	60 95       	com	r22
     fac:	65 35       	cpi	r22, 0x55	; 85
     fae:	20 f1       	brcs	.+72     	; 0xff8 <_Z5Wheelh+0x54>
     fb0:	6a 3a       	cpi	r22, 0xAA	; 170
     fb2:	88 f0       	brcs	.+34     	; 0xfd6 <_Z5Wheelh+0x32>
     fb4:	6a 5a       	subi	r22, 0xAA	; 170
     fb6:	86 2f       	mov	r24, r22
     fb8:	88 0f       	add	r24, r24
     fba:	88 0f       	add	r24, r24
     fbc:	46 2f       	mov	r20, r22
     fbe:	48 1b       	sub	r20, r24
     fc0:	41 50       	subi	r20, 0x01	; 1
     fc2:	86 2f       	mov	r24, r22
     fc4:	88 0f       	add	r24, r24
     fc6:	68 0f       	add	r22, r24
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	ce 01       	movw	r24, r28
     fcc:	18 d9       	rcall	.-3536   	; 0x1fe <_ZN13NeoPixelColorC1Ehhh>
     fce:	ce 01       	movw	r24, r28
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret
     fd6:	65 55       	subi	r22, 0x55	; 85
     fd8:	86 2f       	mov	r24, r22
     fda:	88 0f       	add	r24, r24
     fdc:	88 0f       	add	r24, r24
     fde:	26 2f       	mov	r18, r22
     fe0:	28 1b       	sub	r18, r24
     fe2:	21 50       	subi	r18, 0x01	; 1
     fe4:	46 2f       	mov	r20, r22
     fe6:	44 0f       	add	r20, r20
     fe8:	46 0f       	add	r20, r22
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	ce 01       	movw	r24, r28
     fee:	07 d9       	rcall	.-3570   	; 0x1fe <_ZN13NeoPixelColorC1Ehhh>
     ff0:	ce 01       	movw	r24, r28
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	08 95       	ret
     ff8:	26 2f       	mov	r18, r22
     ffa:	22 0f       	add	r18, r18
     ffc:	26 0f       	add	r18, r22
     ffe:	86 2f       	mov	r24, r22
    1000:	88 0f       	add	r24, r24
    1002:	88 0f       	add	r24, r24
    1004:	68 1b       	sub	r22, r24
    1006:	61 50       	subi	r22, 0x01	; 1
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	ce 01       	movw	r24, r28
    100c:	f8 d8       	rcall	.-3600   	; 0x1fe <_ZN13NeoPixelColorC1Ehhh>
    100e:	ce 01       	movw	r24, r28
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	08 95       	ret

00001016 <_ZN9NeoPixels13RainbowEffectEv.part.5>:
    1016:	8f 92       	push	r8
    1018:	9f 92       	push	r9
    101a:	af 92       	push	r10
    101c:	bf 92       	push	r11
    101e:	cf 92       	push	r12
    1020:	df 92       	push	r13
    1022:	ef 92       	push	r14
    1024:	ff 92       	push	r15
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	00 d0       	rcall	.+0      	; 0x1030 <_ZN9NeoPixels13RainbowEffectEv.part.5+0x1a>
    1030:	1f 92       	push	r1
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	6c 01       	movw	r12, r24
    1038:	dc 01       	movw	r26, r24
    103a:	6d 91       	ld	r22, X+
    103c:	7c 91       	ld	r23, X
    103e:	61 15       	cp	r22, r1
    1040:	71 05       	cpc	r23, r1
    1042:	09 f4       	brne	.+2      	; 0x1046 <_ZN9NeoPixels13RainbowEffectEv.part.5+0x30>
    1044:	3e c0       	rjmp	.+124    	; 0x10c2 <_ZN9NeoPixels13RainbowEffectEv.part.5+0xac>
    1046:	4c 01       	movw	r8, r24
    1048:	9b e4       	ldi	r25, 0x4B	; 75
    104a:	89 0e       	add	r8, r25
    104c:	91 1c       	adc	r9, r1
    104e:	74 01       	movw	r14, r8
    1050:	00 e0       	ldi	r16, 0x00	; 0
    1052:	10 e0       	ldi	r17, 0x00	; 0
    1054:	d6 01       	movw	r26, r12
    1056:	a1 51       	subi	r26, 0x11	; 17
    1058:	bf 4f       	sbci	r27, 0xFF	; 255
    105a:	5d 01       	movw	r10, r26
    105c:	f5 01       	movw	r30, r10
    105e:	60 81       	ld	r22, Z
    1060:	60 0f       	add	r22, r16
    1062:	ce 01       	movw	r24, r28
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	9e df       	rcall	.-196    	; 0xfa4 <_Z5Wheelh>
    1068:	be 01       	movw	r22, r28
    106a:	6f 5f       	subi	r22, 0xFF	; 255
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	c7 01       	movw	r24, r14
    1070:	ed d8       	rcall	.-3622   	; 0x24c <_ZN13NeoPixelColoraSERKS_>
    1072:	0f 5f       	subi	r16, 0xFF	; 255
    1074:	1f 4f       	sbci	r17, 0xFF	; 255
    1076:	d6 01       	movw	r26, r12
    1078:	6d 91       	ld	r22, X+
    107a:	7c 91       	ld	r23, X
    107c:	b3 e0       	ldi	r27, 0x03	; 3
    107e:	eb 0e       	add	r14, r27
    1080:	f1 1c       	adc	r15, r1
    1082:	06 17       	cp	r16, r22
    1084:	17 07       	cpc	r17, r23
    1086:	50 f3       	brcs	.-44     	; 0x105c <_ZN9NeoPixels13RainbowEffectEv.part.5+0x46>
    1088:	f5 01       	movw	r30, r10
    108a:	80 81       	ld	r24, Z
    108c:	8f 5f       	subi	r24, 0xFF	; 255
    108e:	80 83       	st	Z, r24
    1090:	f6 01       	movw	r30, r12
    1092:	e2 51       	subi	r30, 0x12	; 18
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	d6 01       	movw	r26, r12
    1098:	14 96       	adiw	r26, 0x04	; 4
    109a:	8c 91       	ld	r24, X
    109c:	80 83       	st	Z, r24
    109e:	c4 01       	movw	r24, r8
    10a0:	30 df       	rcall	.-416    	; 0xf02 <_Z10sendPixelsP13NeoPixelColorj>
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	df 90       	pop	r13
    10b6:	cf 90       	pop	r12
    10b8:	bf 90       	pop	r11
    10ba:	af 90       	pop	r10
    10bc:	9f 90       	pop	r9
    10be:	8f 90       	pop	r8
    10c0:	08 95       	ret
    10c2:	fc 01       	movw	r30, r24
    10c4:	e5 5b       	subi	r30, 0xB5	; 181
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	4f 01       	movw	r8, r30
    10ca:	81 51       	subi	r24, 0x11	; 17
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	5c 01       	movw	r10, r24
    10d0:	db cf       	rjmp	.-74     	; 0x1088 <_ZN9NeoPixels13RainbowEffectEv.part.5+0x72>

000010d2 <_ZN9NeoPixelsC1Ej>:
    10d2:	cf 92       	push	r12
    10d4:	df 92       	push	r13
    10d6:	ef 92       	push	r14
    10d8:	ff 92       	push	r15
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	7c 01       	movw	r14, r24
    10e4:	1a da       	rcall	.-3020   	; 0x51a <_ZN9NeoConfigC1Ev>
    10e6:	67 01       	movw	r12, r14
    10e8:	8b e4       	ldi	r24, 0x4B	; 75
    10ea:	c8 0e       	add	r12, r24
    10ec:	d1 1c       	adc	r13, r1
    10ee:	e6 01       	movw	r28, r12
    10f0:	87 01       	movw	r16, r14
    10f2:	0f 51       	subi	r16, 0x1F	; 31
    10f4:	1f 4f       	sbci	r17, 0xFF	; 255
    10f6:	ce 01       	movw	r24, r28
    10f8:	75 d8       	rcall	.-3862   	; 0x1e4 <_ZN13NeoPixelColorC1Ev>
    10fa:	23 96       	adiw	r28, 0x03	; 3
    10fc:	c0 17       	cp	r28, r16
    10fe:	d1 07       	cpc	r29, r17
    1100:	d1 f7       	brne	.-12     	; 0x10f6 <_ZN9NeoPixelsC1Ej+0x24>
    1102:	0e 94 c9 10 	call	0x2192	; 0x2192 <_Z6millisv>
    1106:	f7 01       	movw	r30, r14
    1108:	ff 96       	adiw	r30, 0x3f	; 63
    110a:	60 83       	st	Z, r22
    110c:	71 83       	std	Z+1, r23	; 0x01
    110e:	82 83       	std	Z+2, r24	; 0x02
    1110:	93 83       	std	Z+3, r25	; 0x03
    1112:	36 96       	adiw	r30, 0x06	; 6
    1114:	11 82       	std	Z+1, r1	; 0x01
    1116:	10 82       	st	Z, r1
    1118:	32 97       	sbiw	r30, 0x02	; 2
    111a:	11 82       	std	Z+1, r1	; 0x01
    111c:	10 82       	st	Z, r1
    111e:	34 96       	adiw	r30, 0x04	; 4
    1120:	82 e0       	ldi	r24, 0x02	; 2
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	91 83       	std	Z+1, r25	; 0x01
    1126:	80 83       	st	Z, r24
    1128:	32 96       	adiw	r30, 0x02	; 2
    112a:	91 83       	std	Z+1, r25	; 0x01
    112c:	80 83       	st	Z, r24
    112e:	86 e9       	ldi	r24, 0x96	; 150
    1130:	f6 01       	movw	r30, r12
    1132:	11 92       	st	Z+, r1
    1134:	8a 95       	dec	r24
    1136:	e9 f7       	brne	.-6      	; 0x1132 <_ZN9NeoPixelsC1Ej+0x60>
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	ff 90       	pop	r15
    1142:	ef 90       	pop	r14
    1144:	df 90       	pop	r13
    1146:	cf 90       	pop	r12
    1148:	08 95       	ret

0000114a <_ZN9NeoPixels4initEv>:
    114a:	dc 01       	movw	r26, r24
    114c:	1a 96       	adiw	r26, 0x0a	; 10
    114e:	2c 91       	ld	r18, X
    1150:	23 30       	cpi	r18, 0x03	; 3
    1152:	51 f1       	breq	.+84     	; 0x11a8 <_ZN9NeoPixels4initEv+0x5e>
    1154:	28 f4       	brcc	.+10     	; 0x1160 <_ZN9NeoPixels4initEv+0x16>
    1156:	21 30       	cpi	r18, 0x01	; 1
    1158:	31 f1       	breq	.+76     	; 0x11a6 <_ZN9NeoPixels4initEv+0x5c>
    115a:	22 30       	cpi	r18, 0x02	; 2
    115c:	31 f4       	brne	.+12     	; 0x116a <_ZN9NeoPixels4initEv+0x20>
    115e:	a8 cb       	rjmp	.-2224   	; 0x8b0 <_ZN9NeoPixels11initTwinkleEv>
    1160:	24 30       	cpi	r18, 0x04	; 4
    1162:	81 f0       	breq	.+32     	; 0x1184 <_ZN9NeoPixels4initEv+0x3a>
    1164:	25 30       	cpi	r18, 0x05	; 5
    1166:	09 f4       	brne	.+2      	; 0x116a <_ZN9NeoPixels4initEv+0x20>
    1168:	3b c9       	rjmp	.-3466   	; 0x3e0 <_ZN9NeoPixels10initCandleEv>
    116a:	fc 01       	movw	r30, r24
    116c:	e5 5b       	subi	r30, 0xB5	; 181
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	26 e9       	ldi	r18, 0x96	; 150
    1172:	df 01       	movw	r26, r30
    1174:	1d 92       	st	X+, r1
    1176:	2a 95       	dec	r18
    1178:	e9 f7       	brne	.-6      	; 0x1174 <_ZN9NeoPixels4initEv+0x2a>
    117a:	ec 55       	subi	r30, 0x5C	; 92
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	80 83       	st	Z, r24
    1182:	08 95       	ret
    1184:	fc 01       	movw	r30, r24
    1186:	e2 51       	subi	r30, 0x12	; 18
    1188:	ff 4f       	sbci	r31, 0xFF	; 255
    118a:	dc 01       	movw	r26, r24
    118c:	14 96       	adiw	r26, 0x04	; 4
    118e:	2c 91       	ld	r18, X
    1190:	20 83       	st	Z, r18
    1192:	31 96       	adiw	r30, 0x01	; 1
    1194:	10 82       	st	Z, r1
    1196:	e4 5a       	subi	r30, 0xA4	; 164
    1198:	f1 09       	sbc	r31, r1
    119a:	86 e9       	ldi	r24, 0x96	; 150
    119c:	df 01       	movw	r26, r30
    119e:	1d 92       	st	X+, r1
    11a0:	8a 95       	dec	r24
    11a2:	e9 f7       	brne	.-6      	; 0x119e <_ZN9NeoPixels4initEv+0x54>
    11a4:	08 95       	ret
    11a6:	c7 c8       	rjmp	.-3698   	; 0x336 <_ZN9NeoPixels9initAllOnEv>
    11a8:	21 ca       	rjmp	.-3006   	; 0x5ec <_ZN9NeoPixels16initTheaterChaseEv>

000011aa <_ZN9NeoPixels16StartRandomPixelEj>:
    11aa:	8f 92       	push	r8
    11ac:	9f 92       	push	r9
    11ae:	af 92       	push	r10
    11b0:	bf 92       	push	r11
    11b2:	cf 92       	push	r12
    11b4:	df 92       	push	r13
    11b6:	ef 92       	push	r14
    11b8:	ff 92       	push	r15
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	fc 01       	movw	r30, r24
    11c4:	c0 81       	ld	r28, Z
    11c6:	d1 81       	ldd	r29, Z+1	; 0x01
    11c8:	20 97       	sbiw	r28, 0x00	; 0
    11ca:	09 f4       	brne	.+2      	; 0x11ce <_ZN9NeoPixels16StartRandomPixelEj+0x24>
    11cc:	93 c0       	rjmp	.+294    	; 0x12f4 <_ZN9NeoPixels16StartRandomPixelEj+0x14a>
    11ce:	dc 01       	movw	r26, r24
    11d0:	a2 51       	subi	r26, 0x12	; 18
    11d2:	bf 4f       	sbci	r27, 0xFF	; 255
    11d4:	40 e0       	ldi	r20, 0x00	; 0
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	00 e0       	ldi	r16, 0x00	; 0
    11da:	10 e0       	ldi	r17, 0x00	; 0
    11dc:	fa 01       	movw	r30, r20
    11de:	f6 95       	lsr	r31
    11e0:	e7 95       	ror	r30
    11e2:	f6 95       	lsr	r31
    11e4:	e7 95       	ror	r30
    11e6:	e8 0f       	add	r30, r24
    11e8:	f9 1f       	adc	r31, r25
    11ea:	ef 51       	subi	r30, 0x1F	; 31
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	20 81       	ld	r18, Z
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	fa 01       	movw	r30, r20
    11f4:	e3 70       	andi	r30, 0x03	; 3
    11f6:	ff 27       	eor	r31, r31
    11f8:	ee 0f       	add	r30, r30
    11fa:	ff 1f       	adc	r31, r31
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <_ZN9NeoPixels16StartRandomPixelEj+0x58>
    11fe:	35 95       	asr	r19
    1200:	27 95       	ror	r18
    1202:	ea 95       	dec	r30
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <_ZN9NeoPixels16StartRandomPixelEj+0x54>
    1206:	23 70       	andi	r18, 0x03	; 3
    1208:	29 f4       	brne	.+10     	; 0x1214 <_ZN9NeoPixels16StartRandomPixelEj+0x6a>
    120a:	2c 91       	ld	r18, X
    120c:	21 11       	cpse	r18, r1
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <_ZN9NeoPixels16StartRandomPixelEj+0x6a>
    1210:	0f 5f       	subi	r16, 0xFF	; 255
    1212:	1f 4f       	sbci	r17, 0xFF	; 255
    1214:	4f 5f       	subi	r20, 0xFF	; 255
    1216:	5f 4f       	sbci	r21, 0xFF	; 255
    1218:	11 96       	adiw	r26, 0x01	; 1
    121a:	4c 17       	cp	r20, r28
    121c:	5d 07       	cpc	r21, r29
    121e:	f1 f6       	brne	.-68     	; 0x11dc <_ZN9NeoPixels16StartRandomPixelEj+0x32>
    1220:	61 15       	cp	r22, r1
    1222:	71 05       	cpc	r23, r1
    1224:	09 f4       	brne	.+2      	; 0x1228 <_ZN9NeoPixels16StartRandomPixelEj+0x7e>
    1226:	66 c0       	rjmp	.+204    	; 0x12f4 <_ZN9NeoPixels16StartRandomPixelEj+0x14a>
    1228:	01 15       	cp	r16, r1
    122a:	11 05       	cpc	r17, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <_ZN9NeoPixels16StartRandomPixelEj+0x86>
    122e:	62 c0       	rjmp	.+196    	; 0x12f4 <_ZN9NeoPixels16StartRandomPixelEj+0x14a>
    1230:	ec 01       	movw	r28, r24
    1232:	c8 01       	movw	r24, r16
    1234:	86 1b       	sub	r24, r22
    1236:	97 0b       	sbc	r25, r23
    1238:	9c 01       	movw	r18, r24
    123a:	2f 5f       	subi	r18, 0xFF	; 255
    123c:	3f 4f       	sbci	r19, 0xFF	; 255
    123e:	49 01       	movw	r8, r18
    1240:	ce 01       	movw	r24, r28
    1242:	85 5c       	subi	r24, 0xC5	; 197
    1244:	9e 4f       	sbci	r25, 0xFE	; 254
    1246:	5c 01       	movw	r10, r24
    1248:	23 e0       	ldi	r18, 0x03	; 3
    124a:	c2 2e       	mov	r12, r18
    124c:	d1 2c       	mov	r13, r1
    124e:	ee 24       	eor	r14, r14
    1250:	e3 94       	inc	r14
    1252:	f1 2c       	mov	r15, r1
    1254:	0e 94 1b 12 	call	0x2436	; 0x2436 <random>
    1258:	28 81       	ld	r18, Y
    125a:	39 81       	ldd	r19, Y+1	; 0x01
    125c:	40 e0       	ldi	r20, 0x00	; 0
    125e:	50 e0       	ldi	r21, 0x00	; 0
    1260:	0e 94 b7 11 	call	0x236e	; 0x236e <__divmodsi4>
    1264:	fb 01       	movw	r30, r22
    1266:	f6 95       	lsr	r31
    1268:	e7 95       	ror	r30
    126a:	f6 95       	lsr	r31
    126c:	e7 95       	ror	r30
    126e:	ec 0f       	add	r30, r28
    1270:	fd 1f       	adc	r31, r29
    1272:	ef 51       	subi	r30, 0x1F	; 31
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	40 81       	ld	r20, Z
    1278:	9b 01       	movw	r18, r22
    127a:	23 70       	andi	r18, 0x03	; 3
    127c:	33 27       	eor	r19, r19
    127e:	22 0f       	add	r18, r18
    1280:	33 1f       	adc	r19, r19
    1282:	84 2f       	mov	r24, r20
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <_ZN9NeoPixels16StartRandomPixelEj+0xe4>
    128a:	95 95       	asr	r25
    128c:	87 95       	ror	r24
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <_ZN9NeoPixels16StartRandomPixelEj+0xe0>
    1292:	83 70       	andi	r24, 0x03	; 3
    1294:	f9 f6       	brne	.-66     	; 0x1254 <_ZN9NeoPixels16StartRandomPixelEj+0xaa>
    1296:	6c 0f       	add	r22, r28
    1298:	7d 1f       	adc	r23, r29
    129a:	db 01       	movw	r26, r22
    129c:	a2 51       	subi	r26, 0x12	; 18
    129e:	bf 4f       	sbci	r27, 0xFF	; 255
    12a0:	8c 91       	ld	r24, X
    12a2:	81 11       	cpse	r24, r1
    12a4:	d7 cf       	rjmp	.-82     	; 0x1254 <_ZN9NeoPixels16StartRandomPixelEj+0xaa>
    12a6:	c6 01       	movw	r24, r12
    12a8:	02 2e       	mov	r0, r18
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <_ZN9NeoPixels16StartRandomPixelEj+0x104>
    12ac:	88 0f       	add	r24, r24
    12ae:	0a 94       	dec	r0
    12b0:	ea f7       	brpl	.-6      	; 0x12ac <_ZN9NeoPixels16StartRandomPixelEj+0x102>
    12b2:	80 95       	com	r24
    12b4:	48 23       	and	r20, r24
    12b6:	c7 01       	movw	r24, r14
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <_ZN9NeoPixels16StartRandomPixelEj+0x112>
    12ba:	88 0f       	add	r24, r24
    12bc:	2a 95       	dec	r18
    12be:	ea f7       	brpl	.-6      	; 0x12ba <_ZN9NeoPixels16StartRandomPixelEj+0x110>
    12c0:	48 2b       	or	r20, r24
    12c2:	40 83       	st	Z, r20
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	9b 81       	ldd	r25, Y+3	; 0x03
    12c8:	8f 3f       	cpi	r24, 0xFF	; 255
    12ca:	91 05       	cpc	r25, r1
    12cc:	11 f0       	breq	.+4      	; 0x12d2 <_ZN9NeoPixels16StartRandomPixelEj+0x128>
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <_ZN9NeoPixels16StartRandomPixelEj+0x128>
    12d0:	8f ef       	ldi	r24, 0xFF	; 255
    12d2:	fb 01       	movw	r30, r22
    12d4:	e2 51       	subi	r30, 0x12	; 18
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	80 83       	st	Z, r24
    12da:	f5 01       	movw	r30, r10
    12dc:	80 81       	ld	r24, Z
    12de:	91 81       	ldd	r25, Z+1	; 0x01
    12e0:	01 96       	adiw	r24, 0x01	; 1
    12e2:	91 83       	std	Z+1, r25	; 0x01
    12e4:	80 83       	st	Z, r24
    12e6:	08 15       	cp	r16, r8
    12e8:	19 05       	cpc	r17, r9
    12ea:	21 f0       	breq	.+8      	; 0x12f4 <_ZN9NeoPixels16StartRandomPixelEj+0x14a>
    12ec:	01 50       	subi	r16, 0x01	; 1
    12ee:	11 09       	sbc	r17, r1
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <_ZN9NeoPixels16StartRandomPixelEj+0x14a>
    12f2:	b0 cf       	rjmp	.-160    	; 0x1254 <_ZN9NeoPixels16StartRandomPixelEj+0xaa>
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	1f 91       	pop	r17
    12fa:	0f 91       	pop	r16
    12fc:	ff 90       	pop	r15
    12fe:	ef 90       	pop	r14
    1300:	df 90       	pop	r13
    1302:	cf 90       	pop	r12
    1304:	bf 90       	pop	r11
    1306:	af 90       	pop	r10
    1308:	9f 90       	pop	r9
    130a:	8f 90       	pop	r8
    130c:	08 95       	ret

0000130e <_ZN9NeoPixels13SetPixelStateEj13NeoPixelState>:
    130e:	fb 01       	movw	r30, r22
    1310:	e3 70       	andi	r30, 0x03	; 3
    1312:	ff 27       	eor	r31, r31
    1314:	ee 0f       	add	r30, r30
    1316:	ff 1f       	adc	r31, r31
    1318:	43 70       	andi	r20, 0x03	; 3
    131a:	0e 2e       	mov	r0, r30
    131c:	01 c0       	rjmp	.+2      	; 0x1320 <_ZN9NeoPixels13SetPixelStateEj13NeoPixelState+0x12>
    131e:	44 0f       	add	r20, r20
    1320:	0a 94       	dec	r0
    1322:	ea f7       	brpl	.-6      	; 0x131e <_ZN9NeoPixels13SetPixelStateEj13NeoPixelState+0x10>
    1324:	23 e0       	ldi	r18, 0x03	; 3
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	01 c0       	rjmp	.+2      	; 0x132c <_ZN9NeoPixels13SetPixelStateEj13NeoPixelState+0x1e>
    132a:	22 0f       	add	r18, r18
    132c:	ea 95       	dec	r30
    132e:	ea f7       	brpl	.-6      	; 0x132a <_ZN9NeoPixels13SetPixelStateEj13NeoPixelState+0x1c>
    1330:	76 95       	lsr	r23
    1332:	67 95       	ror	r22
    1334:	76 95       	lsr	r23
    1336:	67 95       	ror	r22
    1338:	20 95       	com	r18
    133a:	86 0f       	add	r24, r22
    133c:	97 1f       	adc	r25, r23
    133e:	fc 01       	movw	r30, r24
    1340:	ef 51       	subi	r30, 0x1F	; 31
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	80 81       	ld	r24, Z
    1346:	28 23       	and	r18, r24
    1348:	42 2b       	or	r20, r18
    134a:	40 83       	st	Z, r20
    134c:	08 95       	ret

0000134e <_ZN9NeoPixels13GetPixelStateEj>:
    134e:	9b 01       	movw	r18, r22
    1350:	36 95       	lsr	r19
    1352:	27 95       	ror	r18
    1354:	36 95       	lsr	r19
    1356:	27 95       	ror	r18
    1358:	82 0f       	add	r24, r18
    135a:	93 1f       	adc	r25, r19
    135c:	fc 01       	movw	r30, r24
    135e:	ef 51       	subi	r30, 0x1F	; 31
    1360:	ff 4f       	sbci	r31, 0xFF	; 255
    1362:	80 81       	ld	r24, Z
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	63 70       	andi	r22, 0x03	; 3
    1368:	77 27       	eor	r23, r23
    136a:	66 0f       	add	r22, r22
    136c:	77 1f       	adc	r23, r23
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <_ZN9NeoPixels13GetPixelStateEj+0x26>
    1370:	95 95       	asr	r25
    1372:	87 95       	ror	r24
    1374:	6a 95       	dec	r22
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <_ZN9NeoPixels13GetPixelStateEj+0x22>
    1378:	83 70       	andi	r24, 0x03	; 3
    137a:	08 95       	ret

0000137c <_ZN9NeoPixels6UpdateEv>:
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	ec 01       	movw	r28, r24
    1386:	8a 85       	ldd	r24, Y+10	; 0x0a
    1388:	83 30       	cpi	r24, 0x03	; 3
    138a:	09 f4       	brne	.+2      	; 0x138e <_ZN9NeoPixels6UpdateEv+0x12>
    138c:	43 c0       	rjmp	.+134    	; 0x1414 <_ZN9NeoPixels6UpdateEv+0x98>
    138e:	b8 f4       	brcc	.+46     	; 0x13be <_ZN9NeoPixels6UpdateEv+0x42>
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	09 f4       	brne	.+2      	; 0x1396 <_ZN9NeoPixels6UpdateEv+0x1a>
    1394:	3b c0       	rjmp	.+118    	; 0x140c <_ZN9NeoPixels6UpdateEv+0x90>
    1396:	82 30       	cpi	r24, 0x02	; 2
    1398:	c9 f4       	brne	.+50     	; 0x13cc <_ZN9NeoPixels6UpdateEv+0x50>
    139a:	ce 01       	movw	r24, r28
    139c:	39 db       	rcall	.-2446   	; 0xa10 <_ZN9NeoPixels13TwinkleEffectEv>
    139e:	f9 d6       	rcall	.+3570   	; 0x2192 <_Z6millisv>
    13a0:	ef 96       	adiw	r28, 0x3f	; 63
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	0a 96       	adiw	r24, 0x0a	; 10
    13a8:	a1 1d       	adc	r26, r1
    13aa:	b1 1d       	adc	r27, r1
    13ac:	88 83       	st	Y, r24
    13ae:	99 83       	std	Y+1, r25	; 0x01
    13b0:	aa 83       	std	Y+2, r26	; 0x02
    13b2:	bb 83       	std	Y+3, r27	; 0x03
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	08 95       	ret
    13be:	84 30       	cpi	r24, 0x04	; 4
    13c0:	d1 f0       	breq	.+52     	; 0x13f6 <_ZN9NeoPixels6UpdateEv+0x7a>
    13c2:	85 30       	cpi	r24, 0x05	; 5
    13c4:	19 f4       	brne	.+6      	; 0x13cc <_ZN9NeoPixels6UpdateEv+0x50>
    13c6:	ce 01       	movw	r24, r28
    13c8:	1b d8       	rcall	.-4042   	; 0x400 <_ZN9NeoPixels12CandleEffectEv>
    13ca:	e9 cf       	rjmp	.-46     	; 0x139e <_ZN9NeoPixels6UpdateEv+0x22>
    13cc:	8e 01       	movw	r16, r28
    13ce:	01 51       	subi	r16, 0x11	; 17
    13d0:	1f 4f       	sbci	r17, 0xFF	; 255
    13d2:	f8 01       	movw	r30, r16
    13d4:	80 81       	ld	r24, Z
    13d6:	88 23       	and	r24, r24
    13d8:	11 f3       	breq	.-60     	; 0x139e <_ZN9NeoPixels6UpdateEv+0x22>
    13da:	26 e9       	ldi	r18, 0x96	; 150
    13dc:	ce 01       	movw	r24, r28
    13de:	85 5b       	subi	r24, 0xB5	; 181
    13e0:	9f 4f       	sbci	r25, 0xFF	; 255
    13e2:	fc 01       	movw	r30, r24
    13e4:	11 92       	st	Z+, r1
    13e6:	2a 95       	dec	r18
    13e8:	e9 f7       	brne	.-6      	; 0x13e4 <_ZN9NeoPixels6UpdateEv+0x68>
    13ea:	62 e3       	ldi	r22, 0x32	; 50
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	89 dd       	rcall	.-1262   	; 0xf02 <_Z10sendPixelsP13NeoPixelColorj>
    13f0:	f8 01       	movw	r30, r16
    13f2:	10 82       	st	Z, r1
    13f4:	d4 cf       	rjmp	.-88     	; 0x139e <_ZN9NeoPixels6UpdateEv+0x22>
    13f6:	fe 01       	movw	r30, r28
    13f8:	e2 51       	subi	r30, 0x12	; 18
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	80 81       	ld	r24, Z
    13fe:	81 50       	subi	r24, 0x01	; 1
    1400:	80 83       	st	Z, r24
    1402:	81 11       	cpse	r24, r1
    1404:	cc cf       	rjmp	.-104    	; 0x139e <_ZN9NeoPixels6UpdateEv+0x22>
    1406:	ce 01       	movw	r24, r28
    1408:	06 de       	rcall	.-1012   	; 0x1016 <_ZN9NeoPixels13RainbowEffectEv.part.5>
    140a:	c9 cf       	rjmp	.-110    	; 0x139e <_ZN9NeoPixels6UpdateEv+0x22>
    140c:	ce 01       	movw	r24, r28
    140e:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN9NeoPixels11AllOnEffectEv>
    1412:	c5 cf       	rjmp	.-118    	; 0x139e <_ZN9NeoPixels6UpdateEv+0x22>
    1414:	ce 01       	movw	r24, r28
    1416:	10 d9       	rcall	.-3552   	; 0x638 <_ZN9NeoPixels18TheaterChaseEffectEv>
    1418:	c2 cf       	rjmp	.-124    	; 0x139e <_ZN9NeoPixels6UpdateEv+0x22>

0000141a <_ZN9NeoPixels5beginEv>:
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	ec 01       	movw	r28, r24
    1420:	b8 d6       	rcall	.+3440   	; 0x2192 <_Z6millisv>
    1422:	fe 01       	movw	r30, r28
    1424:	ff 96       	adiw	r30, 0x3f	; 63
    1426:	60 83       	st	Z, r22
    1428:	71 83       	std	Z+1, r23	; 0x01
    142a:	82 83       	std	Z+2, r24	; 0x02
    142c:	93 83       	std	Z+3, r25	; 0x03
    142e:	ce 01       	movw	r24, r28
    1430:	8c de       	rcall	.-744    	; 0x114a <_ZN9NeoPixels4initEv>
    1432:	ce 01       	movw	r24, r28
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	a1 cf       	rjmp	.-190    	; 0x137c <_ZN9NeoPixels6UpdateEv>

0000143a <_ZN9NeoPixels4TaskEv>:
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	ec 01       	movw	r28, r24
    1444:	a6 d6       	rcall	.+3404   	; 0x2192 <_Z6millisv>
    1446:	fe 01       	movw	r30, r28
    1448:	ff 96       	adiw	r30, 0x3f	; 63
    144a:	00 81       	ld	r16, Z
    144c:	11 81       	ldd	r17, Z+1	; 0x01
    144e:	22 81       	ldd	r18, Z+2	; 0x02
    1450:	33 81       	ldd	r19, Z+3	; 0x03
    1452:	06 17       	cp	r16, r22
    1454:	17 07       	cpc	r17, r23
    1456:	28 07       	cpc	r18, r24
    1458:	39 07       	cpc	r19, r25
    145a:	28 f0       	brcs	.+10     	; 0x1466 <_ZN9NeoPixels4TaskEv+0x2c>
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	08 95       	ret
    1466:	ce 01       	movw	r24, r28
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	1f 91       	pop	r17
    146e:	0f 91       	pop	r16
    1470:	85 cf       	rjmp	.-246    	; 0x137c <_ZN9NeoPixels6UpdateEv>

00001472 <_ZN9NeoPixels9SetConfigER9NeoConfig>:
    1472:	cf 92       	push	r12
    1474:	df 92       	push	r13
    1476:	ef 92       	push	r14
    1478:	ff 92       	push	r15
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	6c 01       	movw	r12, r24
    1484:	fb 01       	movw	r30, r22

	};

#define PALETTE_SIZE 16

class NeoConfig
    1486:	80 81       	ld	r24, Z
    1488:	91 81       	ldd	r25, Z+1	; 0x01
    148a:	d6 01       	movw	r26, r12
    148c:	11 96       	adiw	r26, 0x01	; 1
    148e:	9c 93       	st	X, r25
    1490:	8e 93       	st	-X, r24
    1492:	82 81       	ldd	r24, Z+2	; 0x02
    1494:	93 81       	ldd	r25, Z+3	; 0x03
    1496:	13 96       	adiw	r26, 0x03	; 3
    1498:	9c 93       	st	X, r25
    149a:	8e 93       	st	-X, r24
    149c:	12 97       	sbiw	r26, 0x02	; 2
    149e:	84 81       	ldd	r24, Z+4	; 0x04
    14a0:	95 81       	ldd	r25, Z+5	; 0x05
    14a2:	15 96       	adiw	r26, 0x05	; 5
    14a4:	9c 93       	st	X, r25
    14a6:	8e 93       	st	-X, r24
    14a8:	14 97       	sbiw	r26, 0x04	; 4
    14aa:	86 81       	ldd	r24, Z+6	; 0x06
    14ac:	97 81       	ldd	r25, Z+7	; 0x07
    14ae:	17 96       	adiw	r26, 0x07	; 7
    14b0:	9c 93       	st	X, r25
    14b2:	8e 93       	st	-X, r24
    14b4:	16 97       	sbiw	r26, 0x06	; 6
    14b6:	80 85       	ldd	r24, Z+8	; 0x08
    14b8:	91 85       	ldd	r25, Z+9	; 0x09
    14ba:	19 96       	adiw	r26, 0x09	; 9
    14bc:	9c 93       	st	X, r25
    14be:	8e 93       	st	-X, r24
    14c0:	18 97       	sbiw	r26, 0x08	; 8
    14c2:	82 85       	ldd	r24, Z+10	; 0x0a
    14c4:	1a 96       	adiw	r26, 0x0a	; 10
    14c6:	8c 93       	st	X, r24
    14c8:	1a 97       	sbiw	r26, 0x0a	; 10
    14ca:	83 85       	ldd	r24, Z+11	; 0x0b
    14cc:	1b 96       	adiw	r26, 0x0b	; 11
    14ce:	8c 93       	st	X, r24
    14d0:	1b 97       	sbiw	r26, 0x0b	; 11
    14d2:	84 85       	ldd	r24, Z+12	; 0x0c
    14d4:	1c 96       	adiw	r26, 0x0c	; 12
    14d6:	8c 93       	st	X, r24
    14d8:	1c 97       	sbiw	r26, 0x0c	; 12
    14da:	85 85       	ldd	r24, Z+13	; 0x0d
    14dc:	1d 96       	adiw	r26, 0x0d	; 13
    14de:	8c 93       	st	X, r24
    14e0:	1d 97       	sbiw	r26, 0x0d	; 13
    14e2:	86 85       	ldd	r24, Z+14	; 0x0e
    14e4:	1e 96       	adiw	r26, 0x0e	; 14
    14e6:	8c 93       	st	X, r24
    14e8:	e6 01       	movw	r28, r12
    14ea:	2f 96       	adiw	r28, 0x0f	; 15
    14ec:	8b 01       	movw	r16, r22
    14ee:	01 5f       	subi	r16, 0xF1	; 241
    14f0:	1f 4f       	sbci	r17, 0xFF	; 255
    14f2:	76 01       	movw	r14, r12
    14f4:	bf e3       	ldi	r27, 0x3F	; 63
    14f6:	eb 0e       	add	r14, r27
    14f8:	f1 1c       	adc	r15, r1
    14fa:	b8 01       	movw	r22, r16
    14fc:	ce 01       	movw	r24, r28
    14fe:	0e 94 26 01 	call	0x24c	; 0x24c <_ZN13NeoPixelColoraSERKS_>
    1502:	23 96       	adiw	r28, 0x03	; 3
    1504:	0d 5f       	subi	r16, 0xFD	; 253
    1506:	1f 4f       	sbci	r17, 0xFF	; 255
    1508:	ce 15       	cp	r28, r14
    150a:	df 05       	cpc	r29, r15
    150c:	b1 f7       	brne	.-20     	; 0x14fa <_ZN9NeoPixels9SetConfigER9NeoConfig+0x88>
	}

void NeoPixels::SetConfig(NeoConfig &cfg)
	{
		m_cfg = cfg;
		init();
    150e:	c6 01       	movw	r24, r12
	}
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	ff 90       	pop	r15
    151a:	ef 90       	pop	r14
    151c:	df 90       	pop	r13
    151e:	cf 90       	pop	r12
	}

void NeoPixels::SetConfig(NeoConfig &cfg)
	{
		m_cfg = cfg;
		init();
    1520:	14 ce       	rjmp	.-984    	; 0x114a <_ZN9NeoPixels4initEv>

00001522 <_ZN6MyMqttC1Ev>:
#define debug_P(x)
#define debug(x)
#define debug_char(x)
#endif

MyMqtt::MyMqtt()
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	ec 01       	movw	r28, r24
    1528:	0e 94 8d 02 	call	0x51a	; 0x51a <_ZN9NeoConfigC1Ev>
	{
		m_flags.reg = 0;
    152c:	1f ae       	std	Y+63, r1	; 0x3f
		cmdbuf = localbuf;
    152e:	fe 01       	movw	r30, r28
    1530:	e0 5c       	subi	r30, 0xC0	; 192
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	ce 01       	movw	r24, r28
    1536:	8c 5b       	subi	r24, 0xBC	; 188
    1538:	9f 4f       	sbci	r25, 0xFF	; 255
    153a:	91 83       	std	Z+1, r25	; 0x01
    153c:	80 83       	st	Z, r24
		cmdbuflen = sizeof(localbuf);
    153e:	32 96       	adiw	r30, 0x02	; 2
    1540:	80 e8       	ldi	r24, 0x80	; 128
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	91 83       	std	Z+1, r25	; 0x01
    1546:	80 83       	st	Z, r24
		cmd_idx = 0;
    1548:	cc 53       	subi	r28, 0x3C	; 60
    154a:	df 4f       	sbci	r29, 0xFF	; 255
    154c:	19 82       	std	Y+1, r1	; 0x01
    154e:	18 82       	st	Y, r1

	}
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	08 95       	ret

00001556 <_ZN6MyMqtt9SetBufferEPcj>:

void MyMqtt::SetBuffer(char *buf,size_t len)
	{
		if(buf == NULL)
			{
				cmdbuf = localbuf;
    1556:	fc 01       	movw	r30, r24
    1558:	e0 5c       	subi	r30, 0xC0	; 192
    155a:	ff 4f       	sbci	r31, 0xFF	; 255

	}

void MyMqtt::SetBuffer(char *buf,size_t len)
	{
		if(buf == NULL)
    155c:	61 15       	cp	r22, r1
    155e:	71 05       	cpc	r23, r1
    1560:	89 f0       	breq	.+34     	; 0x1584 <_ZN6MyMqtt9SetBufferEPcj+0x2e>
				cmdbuf = localbuf;
				cmdbuflen = sizeof(localbuf);
			}
		else
			{
				cmdbuf = buf;
    1562:	71 83       	std	Z+1, r23	; 0x01
    1564:	60 83       	st	Z, r22
				cmdbuflen = len;
    1566:	32 96       	adiw	r30, 0x02	; 2
    1568:	40 83       	st	Z, r20
    156a:	51 83       	std	Z+1, r21	; 0x01
    156c:	36 2f       	mov	r19, r22
    156e:	27 2f       	mov	r18, r23
			}
		cmd_idx = 0;
    1570:	fc 01       	movw	r30, r24
    1572:	ec 53       	subi	r30, 0x3C	; 60
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	11 82       	std	Z+1, r1	; 0x01
    1578:	10 82       	st	Z, r1
		memset(cmdbuf,0,cmdbuflen);
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	83 2f       	mov	r24, r19
    1580:	92 2f       	mov	r25, r18
    1582:	be c7       	rjmp	.+3964   	; 0x2500 <memset>
    1584:	ac 01       	movw	r20, r24

void MyMqtt::SetBuffer(char *buf,size_t len)
	{
		if(buf == NULL)
			{
				cmdbuf = localbuf;
    1586:	4c 5b       	subi	r20, 0xBC	; 188
    1588:	5f 4f       	sbci	r21, 0xFF	; 255
    158a:	51 83       	std	Z+1, r21	; 0x01
    158c:	40 83       	st	Z, r20
    158e:	20 e8       	ldi	r18, 0x80	; 128
				cmdbuflen = sizeof(localbuf);
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	32 96       	adiw	r30, 0x02	; 2
    1594:	31 83       	std	Z+1, r19	; 0x01
    1596:	20 83       	st	Z, r18
    1598:	34 2f       	mov	r19, r20
    159a:	25 2f       	mov	r18, r21
    159c:	40 e8       	ldi	r20, 0x80	; 128
    159e:	50 e0       	ldi	r21, 0x00	; 0
    15a0:	e7 cf       	rjmp	.-50     	; 0x1570 <_ZN6MyMqtt9SetBufferEPcj+0x1a>

000015a2 <_ZN6MyMqtt7OnTopicEPcS0_>:
//					}
//			}
//	}

void MyMqtt::OnTopic(char *topic, char *payload)
	{
    15a2:	6f 92       	push	r6
    15a4:	7f 92       	push	r7
    15a6:	8f 92       	push	r8
    15a8:	9f 92       	push	r9
    15aa:	af 92       	push	r10
    15ac:	bf 92       	push	r11
    15ae:	cf 92       	push	r12
    15b0:	df 92       	push	r13
    15b2:	ef 92       	push	r14
    15b4:	ff 92       	push	r15
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <_ZN6MyMqtt7OnTopicEPcS0_+0x1e>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <_ZN6MyMqtt7OnTopicEPcS0_+0x20>
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	5c 01       	movw	r10, r24
    15c8:	8b 01       	movw	r16, r22
    15ca:	7a 01       	movw	r14, r20
		USBSerial.SendStr_P(DarkYellow,PSTR("'\n"));
#endif
		byte r, g, b;
		uint16_t v;
		char *p = payload;
		m_flags.flags.update = 1;
    15cc:	fc 01       	movw	r30, r24
    15ce:	97 ad       	ldd	r25, Z+63	; 0x3f
    15d0:	90 62       	ori	r25, 0x20	; 32
    15d2:	97 af       	std	Z+63, r25	; 0x3f
		if (strstr_P((char *) topic, PSTR("order")) != NULL)
    15d4:	67 eb       	ldi	r22, 0xB7	; 183
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	c8 01       	movw	r24, r16
    15da:	6f d7       	rcall	.+3806   	; 0x24ba <strstr_P>
    15dc:	89 2b       	or	r24, r25
    15de:	09 f4       	brne	.+2      	; 0x15e2 <_ZN6MyMqtt7OnTopicEPcS0_+0x40>
    15e0:	4d c0       	rjmp	.+154    	; 0x167c <_ZN6MyMqtt7OnTopicEPcS0_+0xda>
    15e2:	c7 01       	movw	r24, r14
			{
				v = atoi(p);
    15e4:	34 d7       	rcall	.+3688   	; 0x244e <atoi>
    15e6:	98 2e       	mov	r9, r24
    15e8:	80 90 04 01 	lds	r8, 0x0104
				NeoColorOrder norder = (NeoColorOrder)v;
				NeoColorOrder oorder = NeoPixelColor::m_color_order;
    15ec:	88 15       	cp	r24, r8
    15ee:	89 f1       	breq	.+98     	; 0x1652 <_ZN6MyMqtt7OnTopicEPcS0_+0xb0>
				// since we are changing the RGB order, we have to convert current palette to new scheme
				if(norder != oorder)	// same, nothing to change
    15f0:	f5 01       	movw	r30, r10
    15f2:	86 85       	ldd	r24, Z+14	; 0x0e
					{
						for(size_t i=0;i<m_cfg.m_pattern_size;i++)
    15f4:	88 23       	and	r24, r24
    15f6:	69 f1       	breq	.+90     	; 0x1652 <_ZN6MyMqtt7OnTopicEPcS0_+0xb0>
    15f8:	85 01       	movw	r16, r10
    15fa:	01 5f       	subi	r16, 0xF1	; 241
    15fc:	1f 4f       	sbci	r17, 0xFF	; 255
    15fe:	e1 2c       	mov	r14, r1
    1600:	f1 2c       	mov	r15, r1
    1602:	c8 01       	movw	r24, r16
    1604:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN13NeoPixelColor6getRedEv>
							{
								r = m_cfg.m_pattern[i].getRed();
    1608:	68 2f       	mov	r22, r24
    160a:	c8 01       	movw	r24, r16
    160c:	6c 83       	std	Y+4, r22	; 0x04
								g = m_cfg.m_pattern[i].getGreen();
    160e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_ZN13NeoPixelColor8getGreenEv>
    1612:	c8 2e       	mov	r12, r24
    1614:	c8 01       	movw	r24, r16
    1616:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_ZN13NeoPixelColor7getBlueEv>
								b = m_cfg.m_pattern[i].getBlue();
    161a:	d8 2e       	mov	r13, r24
    161c:	90 92 04 01 	sts	0x0104, r9

								NeoPixelColor::m_color_order = norder;
    1620:	6c 81       	ldd	r22, Y+4	; 0x04
    1622:	c8 01       	movw	r24, r16
								m_cfg.m_pattern[i].setRed(r);
    1624:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_ZN13NeoPixelColor6setRedEh>
    1628:	6c 2d       	mov	r22, r12
    162a:	c8 01       	movw	r24, r16
								m_cfg.m_pattern[i].setGreen(g);
    162c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_ZN13NeoPixelColor8setGreenEh>
    1630:	6d 2d       	mov	r22, r13
    1632:	c8 01       	movw	r24, r16
								m_cfg.m_pattern[i].setBlue(b);
    1634:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN13NeoPixelColor7setBlueEh>
    1638:	80 92 04 01 	sts	0x0104, r8
								NeoPixelColor::m_color_order = oorder;
    163c:	ff ef       	ldi	r31, 0xFF	; 255
    163e:	ef 1a       	sub	r14, r31
				NeoColorOrder norder = (NeoColorOrder)v;
				NeoColorOrder oorder = NeoPixelColor::m_color_order;
				// since we are changing the RGB order, we have to convert current palette to new scheme
				if(norder != oorder)	// same, nothing to change
					{
						for(size_t i=0;i<m_cfg.m_pattern_size;i++)
    1640:	ff 0a       	sbc	r15, r31
    1642:	0d 5f       	subi	r16, 0xFD	; 253
    1644:	1f 4f       	sbci	r17, 0xFF	; 255
    1646:	f5 01       	movw	r30, r10
    1648:	26 85       	ldd	r18, Z+14	; 0x0e
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	e2 16       	cp	r14, r18
    164e:	f3 06       	cpc	r15, r19
    1650:	c0 f2       	brcs	.-80     	; 0x1602 <_ZN6MyMqtt7OnTopicEPcS0_+0x60>
    1652:	90 92 04 01 	sts	0x0104, r9
								m_cfg.m_pattern[i].setBlue(b);
								NeoPixelColor::m_color_order = oorder;
							}
					}

				NeoPixelColor::m_color_order = norder;
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
			}
		else
			{
			}

	}
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	ff 90       	pop	r15
    1668:	ef 90       	pop	r14
    166a:	df 90       	pop	r13
    166c:	cf 90       	pop	r12
    166e:	bf 90       	pop	r11
    1670:	af 90       	pop	r10
    1672:	9f 90       	pop	r9
    1674:	8f 90       	pop	r8
    1676:	7f 90       	pop	r7
    1678:	6f 90       	pop	r6
    167a:	08 95       	ret
    167c:	61 eb       	ldi	r22, 0xB1	; 177
    167e:	70 e0       	ldi	r23, 0x00	; 0
							}
					}

				NeoPixelColor::m_color_order = norder;
			}
		else if (strstr_P((char *) topic, PSTR("cmode")) != NULL)
    1680:	c8 01       	movw	r24, r16
    1682:	1b d7       	rcall	.+3638   	; 0x24ba <strstr_P>
    1684:	89 2b       	or	r24, r25
    1686:	29 f0       	breq	.+10     	; 0x1692 <_ZN6MyMqtt7OnTopicEPcS0_+0xf0>
    1688:	c7 01       	movw	r24, r14
    168a:	e1 d6       	rcall	.+3522   	; 0x244e <atoi>
    168c:	f5 01       	movw	r30, r10
			{
				v = atoi(p);
    168e:	83 87       	std	Z+11, r24	; 0x0b
    1690:	e2 cf       	rjmp	.-60     	; 0x1656 <_ZN6MyMqtt7OnTopicEPcS0_+0xb4>
    1692:	6a ea       	ldi	r22, 0xAA	; 170
				m_cfg.m_colormode = (NeoPixelColorMode) (v);
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	c8 01       	movw	r24, r16
    1698:	10 d7       	rcall	.+3616   	; 0x24ba <strstr_P>
			}
		else if (strstr_P((char *) topic, PSTR("effect")) != NULL)
    169a:	89 2b       	or	r24, r25
    169c:	29 f0       	breq	.+10     	; 0x16a8 <_ZN6MyMqtt7OnTopicEPcS0_+0x106>
    169e:	c7 01       	movw	r24, r14
    16a0:	d6 d6       	rcall	.+3500   	; 0x244e <atoi>
    16a2:	f5 01       	movw	r30, r10
    16a4:	82 87       	std	Z+10, r24	; 0x0a
    16a6:	d7 cf       	rjmp	.-82     	; 0x1656 <_ZN6MyMqtt7OnTopicEPcS0_+0xb4>
			{
				v = atoi(p);
    16a8:	64 ea       	ldi	r22, 0xA4	; 164
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	c8 01       	movw	r24, r16
				m_cfg.m_effect = (NeoPixelEffect) v;
    16ae:	05 d7       	rcall	.+3594   	; 0x24ba <strstr_P>
    16b0:	89 2b       	or	r24, r25
    16b2:	29 f0       	breq	.+10     	; 0x16be <_ZN6MyMqtt7OnTopicEPcS0_+0x11c>
			}
		else if (strstr_P((char *) topic, PSTR("smode")) != NULL)
    16b4:	c7 01       	movw	r24, r14
    16b6:	cb d6       	rcall	.+3478   	; 0x244e <atoi>
    16b8:	f5 01       	movw	r30, r10
    16ba:	84 87       	std	Z+12, r24	; 0x0c
    16bc:	cc cf       	rjmp	.-104    	; 0x1656 <_ZN6MyMqtt7OnTopicEPcS0_+0xb4>
    16be:	6c e9       	ldi	r22, 0x9C	; 156
    16c0:	70 e0       	ldi	r23, 0x00	; 0
			{
				v = atoi(p);
    16c2:	c8 01       	movw	r24, r16
    16c4:	fa d6       	rcall	.+3572   	; 0x24ba <strstr_P>
    16c6:	89 2b       	or	r24, r25
				m_cfg.m_strandmode = (NeoPixelStrandMode) (v);
    16c8:	29 f0       	breq	.+10     	; 0x16d4 <_ZN6MyMqtt7OnTopicEPcS0_+0x132>
    16ca:	c7 01       	movw	r24, r14
    16cc:	c0 d6       	rcall	.+3456   	; 0x244e <atoi>
			}
		else if (strstr_P((char *) topic, PSTR("density")) != NULL)
    16ce:	f5 01       	movw	r30, r10
    16d0:	85 87       	std	Z+13, r24	; 0x0d
    16d2:	c1 cf       	rjmp	.-126    	; 0x1656 <_ZN6MyMqtt7OnTopicEPcS0_+0xb4>
    16d4:	65 e9       	ldi	r22, 0x95	; 149
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	c8 01       	movw	r24, r16
    16da:	ef d6       	rcall	.+3550   	; 0x24ba <strstr_P>
			{
				v = atoi(p);
    16dc:	89 2b       	or	r24, r25
    16de:	31 f0       	breq	.+12     	; 0x16ec <_ZN6MyMqtt7OnTopicEPcS0_+0x14a>
    16e0:	c7 01       	movw	r24, r14
				m_cfg.m_density = v;
    16e2:	b5 d6       	rcall	.+3434   	; 0x244e <atoi>
    16e4:	f5 01       	movw	r30, r10
    16e6:	93 83       	std	Z+3, r25	; 0x03
			}
		else if (strstr_P((char *) topic, PSTR("attack")) != NULL)
    16e8:	82 83       	std	Z+2, r24	; 0x02
    16ea:	b5 cf       	rjmp	.-150    	; 0x1656 <_ZN6MyMqtt7OnTopicEPcS0_+0xb4>
    16ec:	6d e8       	ldi	r22, 0x8D	; 141
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	c8 01       	movw	r24, r16
    16f2:	e3 d6       	rcall	.+3526   	; 0x24ba <strstr_P>
    16f4:	89 2b       	or	r24, r25
			{
				v = atoi(p);
    16f6:	31 f0       	breq	.+12     	; 0x1704 <_ZN6MyMqtt7OnTopicEPcS0_+0x162>
    16f8:	c7 01       	movw	r24, r14
    16fa:	a9 d6       	rcall	.+3410   	; 0x244e <atoi>
				m_cfg.m_attack = v;
    16fc:	f5 01       	movw	r30, r10
    16fe:	95 83       	std	Z+5, r25	; 0x05
    1700:	84 83       	std	Z+4, r24	; 0x04
    1702:	a9 cf       	rjmp	.-174    	; 0x1656 <_ZN6MyMqtt7OnTopicEPcS0_+0xb4>
			}
		else if (strstr_P((char *) topic, PSTR("sustain")) != NULL)
    1704:	67 e8       	ldi	r22, 0x87	; 135
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	c8 01       	movw	r24, r16
    170a:	d7 d6       	rcall	.+3502   	; 0x24ba <strstr_P>
    170c:	89 2b       	or	r24, r25
    170e:	31 f0       	breq	.+12     	; 0x171c <_ZN6MyMqtt7OnTopicEPcS0_+0x17a>
    1710:	c7 01       	movw	r24, r14
			{
				v = atoi(p);
    1712:	9d d6       	rcall	.+3386   	; 0x244e <atoi>
    1714:	f5 01       	movw	r30, r10
    1716:	97 83       	std	Z+7, r25	; 0x07
				m_cfg.m_sustain = v;
    1718:	86 83       	std	Z+6, r24	; 0x06
    171a:	9d cf       	rjmp	.-198    	; 0x1656 <_ZN6MyMqtt7OnTopicEPcS0_+0xb4>
    171c:	63 e8       	ldi	r22, 0x83	; 131
    171e:	70 e0       	ldi	r23, 0x00	; 0
			}
		else if (strstr_P((char *) topic, PSTR("decay")) != NULL)
    1720:	c8 01       	movw	r24, r16
    1722:	cb d6       	rcall	.+3478   	; 0x24ba <strstr_P>
    1724:	89 2b       	or	r24, r25
    1726:	31 f0       	breq	.+12     	; 0x1734 <_ZN6MyMqtt7OnTopicEPcS0_+0x192>
    1728:	c7 01       	movw	r24, r14
    172a:	91 d6       	rcall	.+3362   	; 0x244e <atoi>
    172c:	f5 01       	movw	r30, r10
			{
				v = atoi(p);
    172e:	91 87       	std	Z+9, r25	; 0x09
    1730:	80 87       	std	Z+8, r24	; 0x08
    1732:	91 cf       	rjmp	.-222    	; 0x1656 <_ZN6MyMqtt7OnTopicEPcS0_+0xb4>
				m_cfg.m_decay = v;
    1734:	6c e7       	ldi	r22, 0x7C	; 124
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	c8 01       	movw	r24, r16
    173a:	bf d6       	rcall	.+3454   	; 0x24ba <strstr_P>
			}
		else if (strstr_P((char *) topic, PSTR("off")) != NULL)
    173c:	89 2b       	or	r24, r25
    173e:	31 f0       	breq	.+12     	; 0x174c <_ZN6MyMqtt7OnTopicEPcS0_+0x1aa>
    1740:	c7 01       	movw	r24, r14
    1742:	85 d6       	rcall	.+3338   	; 0x244e <atoi>
    1744:	f5 01       	movw	r30, r10
    1746:	91 83       	std	Z+1, r25	; 0x01
    1748:	80 83       	st	Z, r24
			{
				v = atoi(p);
    174a:	85 cf       	rjmp	.-246    	; 0x1656 <_ZN6MyMqtt7OnTopicEPcS0_+0xb4>
    174c:	64 e7       	ldi	r22, 0x74	; 116
    174e:	70 e0       	ldi	r23, 0x00	; 0
				m_cfg.m_off = v;
    1750:	c8 01       	movw	r24, r16
    1752:	b3 d6       	rcall	.+3430   	; 0x24ba <strstr_P>
    1754:	89 2b       	or	r24, r25
    1756:	09 f4       	brne	.+2      	; 0x175a <_ZN6MyMqtt7OnTopicEPcS0_+0x1b8>
			}
		else if (strstr_P((char *) topic, PSTR("pixels")) != NULL)
    1758:	7e cf       	rjmp	.-260    	; 0x1656 <_ZN6MyMqtt7OnTopicEPcS0_+0xb4>
    175a:	65 01       	movw	r12, r10
    175c:	ff e0       	ldi	r31, 0x0F	; 15
    175e:	cf 0e       	add	r12, r31
    1760:	d1 1c       	adc	r13, r1
    1762:	71 2c       	mov	r7, r1
    1764:	e1 14       	cp	r14, r1
			{
				v = atoi(p);
    1766:	f1 04       	cpc	r15, r1
    1768:	09 f4       	brne	.+2      	; 0x176c <_ZN6MyMqtt7OnTopicEPcS0_+0x1ca>
    176a:	39 c0       	rjmp	.+114    	; 0x17de <_ZN6MyMqtt7OnTopicEPcS0_+0x23c>
				m_cfg.m_pixels = v;
    176c:	c7 01       	movw	r24, r14
    176e:	6f d6       	rcall	.+3294   	; 0x244e <atoi>
    1770:	68 2e       	mov	r6, r24
    1772:	6c e2       	ldi	r22, 0x2C	; 44
			}
		else if (strstr_P((char *) topic, PSTR("pattern")) != NULL)
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	c7 01       	movw	r24, r14
    1778:	ca d6       	rcall	.+3476   	; 0x250e <strchr>
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	99 f1       	breq	.+102    	; 0x17e4 <_ZN6MyMqtt7OnTopicEPcS0_+0x242>
    177e:	8c 01       	movw	r16, r24
    1780:	0f 5f       	subi	r16, 0xFF	; 255
    1782:	1f 4f       	sbci	r17, 0xFF	; 255
    1784:	c8 01       	movw	r24, r16
    1786:	63 d6       	rcall	.+3270   	; 0x244e <atoi>
    1788:	98 2e       	mov	r9, r24
    178a:	6c e2       	ldi	r22, 0x2C	; 44
    178c:	70 e0       	ldi	r23, 0x00	; 0
			{
				byte idx = 0;
				while(idx < sizeof(m_cfg.m_pattern)/sizeof(m_cfg.m_pattern[0]) && p != NULL)
    178e:	c8 01       	movw	r24, r16
    1790:	be d6       	rcall	.+3452   	; 0x250e <strchr>
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	39 f1       	breq	.+78     	; 0x17e4 <_ZN6MyMqtt7OnTopicEPcS0_+0x242>
					{
					r = atoi(p) & 0xff;
    1796:	8c 01       	movw	r16, r24
    1798:	0f 5f       	subi	r16, 0xFF	; 255
    179a:	1f 4f       	sbci	r17, 0xFF	; 255
    179c:	c8 01       	movw	r24, r16
					p = strchr(p, ',');
    179e:	57 d6       	rcall	.+3246   	; 0x244e <atoi>
    17a0:	88 2e       	mov	r8, r24
    17a2:	6c e2       	ldi	r22, 0x2C	; 44
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	c8 01       	movw	r24, r16
					if(p != NULL)
    17a8:	b2 d6       	rcall	.+3428   	; 0x250e <strchr>
    17aa:	7c 01       	movw	r14, r24
						{
							p++;
    17ac:	89 2b       	or	r24, r25
    17ae:	19 f0       	breq	.+6      	; 0x17b6 <_ZN6MyMqtt7OnTopicEPcS0_+0x214>
    17b0:	8f ef       	ldi	r24, 0xFF	; 255
							g = atoi(p) & 0xff;
    17b2:	e8 1a       	sub	r14, r24
    17b4:	f8 0a       	sbc	r15, r24
    17b6:	28 2d       	mov	r18, r8
    17b8:	49 2d       	mov	r20, r9
							p = strchr(p, ',');
    17ba:	66 2d       	mov	r22, r6
    17bc:	ce 01       	movw	r24, r28
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <_ZN13NeoPixelColorC1Ehhh>
						}
					if(p != NULL)
    17c4:	be 01       	movw	r22, r28
    17c6:	6f 5f       	subi	r22, 0xFF	; 255
						{
							p++;
    17c8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ca:	c6 01       	movw	r24, r12
    17cc:	0e 94 26 01 	call	0x24c	; 0x24c <_ZN13NeoPixelColoraSERKS_>
							b = atoi(p) & 0xff;
    17d0:	73 94       	inc	r7
    17d2:	e3 e0       	ldi	r30, 0x03	; 3
    17d4:	ce 0e       	add	r12, r30
							p = strchr(p, ',');
    17d6:	d1 1c       	adc	r13, r1
    17d8:	f0 e1       	ldi	r31, 0x10	; 16
    17da:	7f 12       	cpse	r7, r31
    17dc:	c3 cf       	rjmp	.-122    	; 0x1764 <_ZN6MyMqtt7OnTopicEPcS0_+0x1c2>
    17de:	f5 01       	movw	r30, r10
    17e0:	76 86       	std	Z+14, r7	; 0x0e
						}
					if(p != NULL)
    17e2:	39 cf       	rjmp	.-398    	; 0x1656 <_ZN6MyMqtt7OnTopicEPcS0_+0xb4>
    17e4:	e1 2c       	mov	r14, r1
						{
							p++;
    17e6:	f1 2c       	mov	r15, r1
    17e8:	e6 cf       	rjmp	.-52     	; 0x17b6 <_ZN6MyMqtt7OnTopicEPcS0_+0x214>

000017ea <_ZN6MyMqtt11CheckUpdateEv>:
			}

	}

void MyMqtt::CheckUpdate()
	{
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
		if(m_flags.flags.update != 0)
    17ee:	fc 01       	movw	r30, r24
    17f0:	27 ad       	ldd	r18, Z+63	; 0x3f
    17f2:	25 ff       	sbrs	r18, 5
    17f4:	08 c0       	rjmp	.+16     	; 0x1806 <_ZN6MyMqtt11CheckUpdateEv+0x1c>
    17f6:	ec 01       	movw	r28, r24
			{
				neo.SetConfig(m_cfg);
    17f8:	bc 01       	movw	r22, r24
    17fa:	8a ed       	ldi	r24, 0xDA	; 218
    17fc:	91 e0       	ldi	r25, 0x01	; 1
    17fe:	39 de       	rcall	.-910    	; 0x1472 <_ZN9NeoPixels9SetConfigER9NeoConfig>
    1800:	8f ad       	ldd	r24, Y+63	; 0x3f
				m_flags.flags.update = 0;
    1802:	8f 7d       	andi	r24, 0xDF	; 223
    1804:	8f af       	std	Y+63, r24	; 0x3f
    1806:	df 91       	pop	r29
			}
	}
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <_ZN6MyMqtt5beginEv>:
		cmd_idx = 0;
		memset(cmdbuf,0,cmdbuflen);
	}

void MyMqtt::begin()
	{
    180c:	7f 92       	push	r7
    180e:	8f 92       	push	r8
    1810:	9f 92       	push	r9
    1812:	af 92       	push	r10
    1814:	bf 92       	push	r11
    1816:	cf 92       	push	r12
    1818:	df 92       	push	r13
    181a:	ef 92       	push	r14
    181c:	ff 92       	push	r15
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	8c 01       	movw	r16, r24
		sbi(E_RST_DDR, E_RST);
    1828:	50 9a       	sbi	0x0a, 0	; 10
		cbi(E_RST_PORT, E_RST);
    182a:	58 98       	cbi	0x0b, 0	; 11
		sbi(E_CH_PD_DDR, E_CH_PD);
    182c:	51 9a       	sbi	0x0a, 1	; 10
		cbi(E_CH_PD_PORT, E_CH_PD);
    182e:	59 98       	cbi	0x0b, 1	; 11
		sbi(E_RX_DDR, E_RX);
    1830:	52 9a       	sbi	0x0a, 2	; 10
		sbi(E_RX_PORT, E_RX);
    1832:	5a 9a       	sbi	0x0b, 2	; 11
		sbi(E_TX_DDR, E_TX);
    1834:	53 9a       	sbi	0x0a, 3	; 10
		sbi(E_TX_PORT, E_TX);
    1836:	5b 9a       	sbi	0x0b, 3	; 11
		delay(1000);
    1838:	68 ee       	ldi	r22, 0xE8	; 232
    183a:	73 e0       	ldi	r23, 0x03	; 3
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	da d4       	rcall	.+2484   	; 0x21f6 <_Z5delaym>
    1842:	52 98       	cbi	0x0a, 2	; 10
		cbi(E_RX_DDR, E_RX);
    1844:	53 98       	cbi	0x0a, 3	; 10
		cbi(E_TX_DDR, E_TX);
    1846:	40 e0       	ldi	r20, 0x00	; 0
		Serial1.begin(115200);
    1848:	52 ec       	ldi	r21, 0xC2	; 194
    184a:	61 e0       	ldi	r22, 0x01	; 1
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	87 e1       	ldi	r24, 0x17	; 23
    1850:	93 e0       	ldi	r25, 0x03	; 3
    1852:	64 d3       	rcall	.+1736   	; 0x1f1c <_ZN9HWSerial15beginEm>
    1854:	59 9a       	sbi	0x0b, 1	; 11
    1856:	68 ee       	ldi	r22, 0xE8	; 232
		sbi(E_CH_PD_PORT, E_CH_PD);
    1858:	73 e0       	ldi	r23, 0x03	; 3
		delay(1000);
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	cb d4       	rcall	.+2454   	; 0x21f6 <_Z5delaym>
    1860:	58 9a       	sbi	0x0b, 0	; 11
    1862:	78 94       	sei
    1864:	78 01       	movw	r14, r16
    1866:	24 ec       	ldi	r18, 0xC4	; 196
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1868:	e2 0e       	add	r14, r18
		sbi(E_RST_PORT, E_RST);
		GlobalInterruptEnable();

		cmd_idx = 0;
    186a:	f1 1c       	adc	r15, r1
    186c:	f7 01       	movw	r30, r14
    186e:	11 82       	std	Z+1, r1	; 0x01
    1870:	10 82       	st	Z, r1
    1872:	68 01       	movw	r12, r16
    1874:	f2 e4       	ldi	r31, 0x42	; 66
    1876:	cf 0e       	add	r12, r31
		memset(cmdbuf, 0, cmdbuflen);
    1878:	d1 1c       	adc	r13, r1
    187a:	00 5c       	subi	r16, 0xC0	; 192
    187c:	1f 4f       	sbci	r17, 0xFF	; 255
    187e:	f6 01       	movw	r30, r12
    1880:	40 81       	ld	r20, Z
    1882:	51 81       	ldd	r21, Z+1	; 0x01
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	f8 01       	movw	r30, r16
    188a:	80 81       	ld	r24, Z
    188c:	91 81       	ldd	r25, Z+1	; 0x01
    188e:	38 d6       	rcall	.+3184   	; 0x2500 <memset>
    1890:	80 d4       	rcall	.+2304   	; 0x2192 <_Z6millisv>
    1892:	4b 01       	movw	r8, r22
    1894:	5c 01       	movw	r10, r24
    1896:	f8 eb       	ldi	r31, 0xB8	; 184
		unsigned long tmr = millis() + 3000;
    1898:	8f 0e       	add	r8, r31
    189a:	fb e0       	ldi	r31, 0x0B	; 11
    189c:	9f 1e       	adc	r9, r31
    189e:	a1 1c       	adc	r10, r1
    18a0:	b1 1c       	adc	r11, r1
    18a2:	87 e1       	ldi	r24, 0x17	; 23
    18a4:	93 e0       	ldi	r25, 0x03	; 3
    18a6:	9f d2       	rcall	.+1342   	; 0x1de6 <_ZN9HWSerial13getEv>
    18a8:	ec 01       	movw	r28, r24
    18aa:	71 2c       	mov	r7, r1
		int c = Serial1.get();
    18ac:	2e c0       	rjmp	.+92     	; 0x190a <_ZN6MyMqtt5beginEv+0xfe>
    18ae:	c3 35       	cpi	r28, 0x53	; 83
    18b0:	d1 05       	cpc	r29, r1
    18b2:	29 f0       	breq	.+10     	; 0x18be <_ZN6MyMqtt5beginEv+0xb2>
    18b4:	77 20       	and	r7, r7
		bool startFill = false;
    18b6:	29 f1       	breq	.+74     	; 0x1902 <_ZN6MyMqtt5beginEv+0xf6>

		debug_P("begin\r\n");
		while (millis() < tmr)
    18b8:	1c 16       	cp	r1, r28
			{
#ifdef DO_USB
				USBSerial.StreamTask();
#endif
				if (c == 'S')
    18ba:	1d 06       	cpc	r1, r29
    18bc:	14 f5       	brge	.+68     	; 0x1902 <_ZN6MyMqtt5beginEv+0xf6>
    18be:	ce 01       	movw	r24, r28
					startFill = true;

				if (startFill && c > 0 && (isprint(c) || isspace(c)))
    18c0:	e5 d5       	rcall	.+3018   	; 0x248c <isprint>
    18c2:	89 2b       	or	r24, r25
    18c4:	21 f4       	brne	.+8      	; 0x18ce <_ZN6MyMqtt5beginEv+0xc2>
    18c6:	ce 01       	movw	r24, r28
    18c8:	e7 d5       	rcall	.+3022   	; 0x2498 <isspace>
    18ca:	89 2b       	or	r24, r25
    18cc:	c1 f0       	breq	.+48     	; 0x18fe <_ZN6MyMqtt5beginEv+0xf2>
    18ce:	f8 01       	movw	r30, r16
    18d0:	20 81       	ld	r18, Z
    18d2:	31 81       	ldd	r19, Z+1	; 0x01
    18d4:	f7 01       	movw	r30, r14
    18d6:	80 81       	ld	r24, Z
    18d8:	91 81       	ldd	r25, Z+1	; 0x01
    18da:	ac 01       	movw	r20, r24
    18dc:	4f 5f       	subi	r20, 0xFF	; 255
					{
						cmdbuf[cmd_idx++] = c;
    18de:	5f 4f       	sbci	r21, 0xFF	; 255
    18e0:	51 83       	std	Z+1, r21	; 0x01
    18e2:	40 83       	st	Z, r20
    18e4:	f9 01       	movw	r30, r18
    18e6:	e8 0f       	add	r30, r24
    18e8:	f9 1f       	adc	r31, r25
    18ea:	c0 83       	st	Z, r28
    18ec:	f8 01       	movw	r30, r16
    18ee:	c0 81       	ld	r28, Z
    18f0:	d1 81       	ldd	r29, Z+1	; 0x01
    18f2:	6f e1       	ldi	r22, 0x1F	; 31
    18f4:	71 e0       	ldi	r23, 0x01	; 1
    18f6:	ce 01       	movw	r24, r28
    18f8:	e0 d5       	rcall	.+3008   	; 0x24ba <strstr_P>
    18fa:	89 2b       	or	r24, r25
						debug_char(c);
						if (strstr_P(cmdbuf, PSTR("System init done.\r\nReady\r\n")) != NULL)
    18fc:	d1 f4       	brne	.+52     	; 0x1932 <_ZN6MyMqtt5beginEv+0x126>
    18fe:	77 24       	eor	r7, r7
    1900:	73 94       	inc	r7
    1902:	87 e1       	ldi	r24, 0x17	; 23
    1904:	93 e0       	ldi	r25, 0x03	; 3
    1906:	6f d2       	rcall	.+1246   	; 0x1de6 <_ZN9HWSerial13getEv>
    1908:	ec 01       	movw	r28, r24
    190a:	43 d4       	rcall	.+2182   	; 0x2192 <_Z6millisv>
    190c:	68 15       	cp	r22, r8
    190e:	79 05       	cpc	r23, r9
    1910:	8a 05       	cpc	r24, r10
    1912:	9b 05       	cpc	r25, r11
								memset(cmdbuf, 0, cmdbuflen);
								cmd_idx = 0;
								return;
							}
					}
				c = Serial1.get();
    1914:	60 f2       	brcs	.-104    	; 0x18ae <_ZN6MyMqtt5beginEv+0xa2>
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	1f 91       	pop	r17
    191c:	0f 91       	pop	r16
		unsigned long tmr = millis() + 3000;
		int c = Serial1.get();
		bool startFill = false;

		debug_P("begin\r\n");
		while (millis() < tmr)
    191e:	ff 90       	pop	r15
    1920:	ef 90       	pop	r14
    1922:	df 90       	pop	r13
    1924:	cf 90       	pop	r12
    1926:	bf 90       	pop	r11
    1928:	af 90       	pop	r10
    192a:	9f 90       	pop	r9
				c = Serial1.get();
			}
		debug_P("Buffer:  '");
		debug(cmdbuf);
		debug_P("'\r\n");
	}
    192c:	8f 90       	pop	r8
    192e:	7f 90       	pop	r7
    1930:	08 95       	ret
    1932:	f6 01       	movw	r30, r12
    1934:	40 81       	ld	r20, Z
    1936:	51 81       	ldd	r21, Z+1	; 0x01
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	ce 01       	movw	r24, r28
    193e:	e0 d5       	rcall	.+3008   	; 0x2500 <memset>
    1940:	f7 01       	movw	r30, r14
    1942:	11 82       	std	Z+1, r1	; 0x01
    1944:	10 82       	st	Z, r1
    1946:	e7 cf       	rjmp	.-50     	; 0x1916 <_ZN6MyMqtt5beginEv+0x10a>

00001948 <_ZN6MyMqtt9MqttTasksEv>:
#endif


#define TASK_WAIT 5
void MyMqtt::MqttTasks()
	{
    1948:	4f 92       	push	r4
    194a:	5f 92       	push	r5
    194c:	6f 92       	push	r6
    194e:	7f 92       	push	r7
    1950:	8f 92       	push	r8
    1952:	9f 92       	push	r9
    1954:	af 92       	push	r10
    1956:	bf 92       	push	r11
    1958:	cf 92       	push	r12
    195a:	df 92       	push	r13
    195c:	ef 92       	push	r14
    195e:	ff 92       	push	r15
    1960:	0f 93       	push	r16
    1962:	1f 93       	push	r17
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	7c 01       	movw	r14, r24
		char *p;
		int c = Serial1.get();
    196a:	87 e1       	ldi	r24, 0x17	; 23
    196c:	93 e0       	ldi	r25, 0x03	; 3
    196e:	3b d2       	rcall	.+1142   	; 0x1de6 <_ZN9HWSerial13getEv>
    1970:	ec 01       	movw	r28, r24
    1972:	0f d4       	rcall	.+2078   	; 0x2192 <_Z6millisv>
		bool b = true;
		unsigned long tmr = millis() + TASK_WAIT;
    1974:	2b 01       	movw	r4, r22
    1976:	3c 01       	movw	r6, r24
    1978:	25 e0       	ldi	r18, 0x05	; 5
    197a:	42 0e       	add	r4, r18
    197c:	51 1c       	adc	r5, r1
    197e:	61 1c       	adc	r6, r1
    1980:	71 1c       	adc	r7, r1
    1982:	d7 fd       	sbrc	r29, 7
    1984:	b9 c0       	rjmp	.+370    	; 0x1af8 <_ZN6MyMqtt9MqttTasksEv+0x1b0>

		if(c < 0)
    1986:	c7 01       	movw	r24, r14
    1988:	80 5c       	subi	r24, 0xC0	; 192
    198a:	9f 4f       	sbci	r25, 0xFF	; 255
    198c:	4c 01       	movw	r8, r24
    198e:	87 01       	movw	r16, r14
    1990:	0c 53       	subi	r16, 0x3C	; 60
			return;

		// read chars until none come for 1 ms or buffer fills
		while(millis() < tmr)
			{
				if(c > 0 && cmd_idx < (cmdbuflen - 1))
    1992:	1f 4f       	sbci	r17, 0xFF	; 255
    1994:	67 01       	movw	r12, r14
    1996:	92 e4       	ldi	r25, 0x42	; 66
    1998:	c9 0e       	add	r12, r25
    199a:	d1 1c       	adc	r13, r1
    199c:	12 c0       	rjmp	.+36     	; 0x19c2 <_ZN6MyMqtt9MqttTasksEv+0x7a>
    199e:	f8 01       	movw	r30, r16
    19a0:	80 81       	ld	r24, Z
    19a2:	91 81       	ldd	r25, Z+1	; 0x01
    19a4:	f6 01       	movw	r30, r12
    19a6:	20 81       	ld	r18, Z
    19a8:	31 81       	ldd	r19, Z+1	; 0x01
    19aa:	21 50       	subi	r18, 0x01	; 1
    19ac:	31 09       	sbc	r19, r1
    19ae:	82 17       	cp	r24, r18
    19b0:	93 07       	cpc	r25, r19
    19b2:	d8 f0       	brcs	.+54     	; 0x19ea <_ZN6MyMqtt9MqttTasksEv+0xa2>
    19b4:	ee d3       	rcall	.+2012   	; 0x2192 <_Z6millisv>
    19b6:	2b 01       	movw	r4, r22
				if(cmd_idx < (cmdbuflen-1))
					{
					}
				else
					{
						tmr = millis();
    19b8:	3c 01       	movw	r6, r24
    19ba:	87 e1       	ldi	r24, 0x17	; 23
    19bc:	93 e0       	ldi	r25, 0x03	; 3
    19be:	13 d2       	rcall	.+1062   	; 0x1de6 <_ZN9HWSerial13getEv>
					}
				c = Serial1.get();
    19c0:	ec 01       	movw	r28, r24
    19c2:	e7 d3       	rcall	.+1998   	; 0x2192 <_Z6millisv>
    19c4:	64 15       	cp	r22, r4
    19c6:	75 05       	cpc	r23, r5
    19c8:	86 05       	cpc	r24, r6

		if(c < 0)
			return;

		// read chars until none come for 1 ms or buffer fills
		while(millis() < tmr)
    19ca:	97 05       	cpc	r25, r7
    19cc:	20 f5       	brcc	.+72     	; 0x1a16 <_ZN6MyMqtt9MqttTasksEv+0xce>
    19ce:	1c 16       	cp	r1, r28
    19d0:	1d 06       	cpc	r1, r29
    19d2:	2c f3       	brlt	.-54     	; 0x199e <_ZN6MyMqtt9MqttTasksEv+0x56>
    19d4:	f6 01       	movw	r30, r12
    19d6:	80 81       	ld	r24, Z
			{
				if(c > 0 && cmd_idx < (cmdbuflen - 1))
    19d8:	91 81       	ldd	r25, Z+1	; 0x01
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f8 01       	movw	r30, r16
					{
						cmdbuf[cmd_idx++] = c;
						tmr = millis() + TASK_WAIT;
					}
				if(cmd_idx < (cmdbuflen-1))
    19de:	20 81       	ld	r18, Z
    19e0:	31 81       	ldd	r19, Z+1	; 0x01
    19e2:	28 17       	cp	r18, r24
    19e4:	39 07       	cpc	r19, r25
    19e6:	48 f3       	brcs	.-46     	; 0x19ba <_ZN6MyMqtt9MqttTasksEv+0x72>
    19e8:	e5 cf       	rjmp	.-54     	; 0x19b4 <_ZN6MyMqtt9MqttTasksEv+0x6c>
    19ea:	f4 01       	movw	r30, r8
    19ec:	20 81       	ld	r18, Z
    19ee:	31 81       	ldd	r19, Z+1	; 0x01
    19f0:	ac 01       	movw	r20, r24
    19f2:	4f 5f       	subi	r20, 0xFF	; 255
		// read chars until none come for 1 ms or buffer fills
		while(millis() < tmr)
			{
				if(c > 0 && cmd_idx < (cmdbuflen - 1))
					{
						cmdbuf[cmd_idx++] = c;
    19f4:	5f 4f       	sbci	r21, 0xFF	; 255
    19f6:	f8 01       	movw	r30, r16
    19f8:	51 83       	std	Z+1, r21	; 0x01
    19fa:	40 83       	st	Z, r20
    19fc:	f9 01       	movw	r30, r18
    19fe:	e8 0f       	add	r30, r24
    1a00:	f9 1f       	adc	r31, r25
    1a02:	c0 83       	st	Z, r28
    1a04:	c6 d3       	rcall	.+1932   	; 0x2192 <_Z6millisv>
    1a06:	2b 01       	movw	r4, r22
    1a08:	3c 01       	movw	r6, r24
    1a0a:	e5 e0       	ldi	r30, 0x05	; 5
    1a0c:	4e 0e       	add	r4, r30
						tmr = millis() + TASK_WAIT;
    1a0e:	51 1c       	adc	r5, r1
    1a10:	61 1c       	adc	r6, r1
    1a12:	71 1c       	adc	r7, r1
    1a14:	df cf       	rjmp	.-66     	; 0x19d4 <_ZN6MyMqtt9MqttTasksEv+0x8c>
    1a16:	f4 01       	movw	r30, r8
    1a18:	c0 80       	ld	r12, Z
    1a1a:	d1 80       	ldd	r13, Z+1	; 0x01
    1a1c:	f6 01       	movw	r30, r12
    1a1e:	80 81       	ld	r24, Z
    1a20:	88 23       	and	r24, r24
#ifdef DO_USB
						USBSerial.StreamTask();
#endif
			}

		if(strlen(cmdbuf) > 0)
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <_ZN6MyMqtt9MqttTasksEv+0xde>
    1a24:	69 c0       	rjmp	.+210    	; 0x1af8 <_ZN6MyMqtt9MqttTasksEv+0x1b0>
    1a26:	c0 e0       	ldi	r28, 0x00	; 0
			}
		else
			b = false;

		size_t idx = 0;
		while (b)
    1a28:	d0 e0       	ldi	r29, 0x00	; 0
    1a2a:	c7 01       	movw	r24, r14
    1a2c:	8c 53       	subi	r24, 0x3C	; 60
    1a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a30:	5c 01       	movw	r10, r24
    1a32:	86 01       	movw	r16, r12
    1a34:	0c 0f       	add	r16, r28
    1a36:	1d 1f       	adc	r17, r29
    1a38:	6c e1       	ldi	r22, 0x1C	; 28
    1a3a:	71 e0       	ldi	r23, 0x01	; 1
    1a3c:	c8 01       	movw	r24, r16
			{
				p = strstr_P(cmdbuf+idx,PSTR("\r\n"));
    1a3e:	3d d5       	rcall	.+2682   	; 0x24ba <strstr_P>
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <_ZN6MyMqtt9MqttTasksEv+0xfe>
    1a44:	53 c0       	rjmp	.+166    	; 0x1aec <_ZN6MyMqtt9MqttTasksEv+0x1a4>
    1a46:	fc 01       	movw	r30, r24
    1a48:	10 82       	st	Z, r1
    1a4a:	f4 01       	movw	r30, r8
    1a4c:	c0 80       	ld	r12, Z
				if(p != NULL)
    1a4e:	d1 80       	ldd	r13, Z+1	; 0x01
    1a50:	86 01       	movw	r16, r12
    1a52:	0c 0f       	add	r16, r28
					{
						*p = 0;
    1a54:	1d 1f       	adc	r17, r29
    1a56:	f8 01       	movw	r30, r16
						char *pcmdbuf = cmdbuf+idx;
    1a58:	01 90       	ld	r0, Z+
    1a5a:	00 20       	and	r0, r0
    1a5c:	e9 f7       	brne	.-6      	; 0x1a58 <_ZN6MyMqtt9MqttTasksEv+0x110>
    1a5e:	cf 01       	movw	r24, r30
    1a60:	80 1b       	sub	r24, r16
    1a62:	91 0b       	sbc	r25, r17
						idx += strlen(pcmdbuf) + 2;
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	c8 0f       	add	r28, r24
    1a68:	d9 1f       	adc	r29, r25
    1a6a:	6c e0       	ldi	r22, 0x0C	; 12
    1a6c:	71 e0       	ldi	r23, 0x01	; 1
    1a6e:	c8 01       	movw	r24, r16
    1a70:	1b d5       	rcall	.+2614   	; 0x24a8 <strcmp_P>
    1a72:	89 2b       	or	r24, r25
    1a74:	29 f5       	brne	.+74     	; 0x1ac0 <_ZN6MyMqtt9MqttTasksEv+0x178>
    1a76:	f7 01       	movw	r30, r14
						if (strcmp_P(pcmdbuf, PSTR("+MQTT Connected")) == 0)
    1a78:	87 ad       	ldd	r24, Z+63	; 0x3f
    1a7a:	82 60       	ori	r24, 0x02	; 2
    1a7c:	87 af       	std	Z+63, r24	; 0x3f
    1a7e:	f5 01       	movw	r30, r10
    1a80:	80 81       	ld	r24, Z
    1a82:	91 81       	ldd	r25, Z+1	; 0x01
    1a84:	c8 17       	cp	r28, r24
							{
								m_flags.flags.mqttonline = true;
    1a86:	d9 07       	cpc	r29, r25
    1a88:	a0 f2       	brcs	.-88     	; 0x1a32 <_ZN6MyMqtt9MqttTasksEv+0xea>
    1a8a:	11 82       	std	Z+1, r1	; 0x01
    1a8c:	10 82       	st	Z, r1
#ifdef DO_USB
								USBSerial.SendStr_P(Red,PSTR("Got Other!\r\n"));
								USBSerial.SendStr(Red,pcmdbuf);
#endif
							}
						if(idx >= cmd_idx)
    1a8e:	f7 01       	movw	r30, r14
    1a90:	ee 5b       	subi	r30, 0xBE	; 190
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	40 81       	ld	r20, Z
    1a96:	51 81       	ldd	r21, Z+1	; 0x01
    1a98:	60 e0       	ldi	r22, 0x00	; 0
							{
								b = false;
								cmd_idx = 0;
    1a9a:	70 e0       	ldi	r23, 0x00	; 0
    1a9c:	c6 01       	movw	r24, r12
								memset(cmdbuf,0,cmdbuflen);
    1a9e:	df 91       	pop	r29
    1aa0:	cf 91       	pop	r28
    1aa2:	1f 91       	pop	r17
    1aa4:	0f 91       	pop	r16
    1aa6:	ff 90       	pop	r15
    1aa8:	ef 90       	pop	r14
    1aaa:	df 90       	pop	r13
    1aac:	cf 90       	pop	r12
//					{
//
//					}
//			}
//#endif
	}
    1aae:	bf 90       	pop	r11
    1ab0:	af 90       	pop	r10
    1ab2:	9f 90       	pop	r9
    1ab4:	8f 90       	pop	r8
    1ab6:	7f 90       	pop	r7
    1ab8:	6f 90       	pop	r6
    1aba:	5f 90       	pop	r5
    1abc:	4f 90       	pop	r4
    1abe:	20 c5       	rjmp	.+2624   	; 0x2500 <memset>
    1ac0:	69 ef       	ldi	r22, 0xF9	; 249
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	c8 01       	movw	r24, r16
    1ac6:	f0 d4       	rcall	.+2528   	; 0x24a8 <strcmp_P>
    1ac8:	89 2b       	or	r24, r25
    1aca:	29 f4       	brne	.+10     	; 0x1ad6 <_ZN6MyMqtt9MqttTasksEv+0x18e>
    1acc:	f7 01       	movw	r30, r14
						b = false;
						if(idx < cmd_idx)
							{	// chars left over in buffer when full, shift them down
								memcpy(cmdbuf,cmdbuf+idx,cmd_idx-idx);
								cmd_idx -= idx;
								memset(cmdbuf+idx,0,cmdbuflen-idx);
    1ace:	87 ad       	ldd	r24, Z+63	; 0x3f
    1ad0:	8d 7f       	andi	r24, 0xFD	; 253
								m_flags.flags.mqttonline = true;
#ifdef DO_USB
								USBSerial.SendStr_P(Green,PSTR("MQTT Connected\r\n"));
#endif
							}
						else if (strcmp_P(pcmdbuf, PSTR("+MQTT Disconnected")) == 0)
    1ad2:	87 af       	std	Z+63, r24	; 0x3f
    1ad4:	d4 cf       	rjmp	.-88     	; 0x1a7e <_ZN6MyMqtt9MqttTasksEv+0x136>
    1ad6:	69 ee       	ldi	r22, 0xE9	; 233
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	c8 01       	movw	r24, r16
    1adc:	e5 d4       	rcall	.+2506   	; 0x24a8 <strcmp_P>
    1ade:	89 2b       	or	r24, r25
							{
								m_flags.flags.mqttonline = false;
    1ae0:	e1 f4       	brne	.+56     	; 0x1b1a <_ZN6MyMqtt9MqttTasksEv+0x1d2>
    1ae2:	f7 01       	movw	r30, r14
    1ae4:	87 ad       	ldd	r24, Z+63	; 0x3f
    1ae6:	84 60       	ori	r24, 0x04	; 4
    1ae8:	87 af       	std	Z+63, r24	; 0x3f
#ifdef DO_USB
								USBSerial.SendStr_P(Green,PSTR("MQTT Disconnected\r\n"));
#endif
							}
						else if (strcmp_P(pcmdbuf, PSTR("+WIFI Connected")) == 0)
    1aea:	c9 cf       	rjmp	.-110    	; 0x1a7e <_ZN6MyMqtt9MqttTasksEv+0x136>
    1aec:	f5 01       	movw	r30, r10
    1aee:	40 81       	ld	r20, Z
    1af0:	51 81       	ldd	r21, Z+1	; 0x01
    1af2:	c4 17       	cp	r28, r20
    1af4:	d5 07       	cpc	r29, r21
    1af6:	38 f1       	brcs	.+78     	; 0x1b46 <_ZN6MyMqtt9MqttTasksEv+0x1fe>
							{
								m_flags.flags.wifionline = true;
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	1f 91       	pop	r17
    1afe:	0f 91       	pop	r16
    1b00:	ff 90       	pop	r15
							}
					}
				else
					{
						b = false;
						if(idx < cmd_idx)
    1b02:	ef 90       	pop	r14
    1b04:	df 90       	pop	r13
    1b06:	cf 90       	pop	r12
    1b08:	bf 90       	pop	r11
    1b0a:	af 90       	pop	r10
    1b0c:	9f 90       	pop	r9
//					{
//
//					}
//			}
//#endif
	}
    1b0e:	8f 90       	pop	r8
    1b10:	7f 90       	pop	r7
    1b12:	6f 90       	pop	r6
    1b14:	5f 90       	pop	r5
    1b16:	4f 90       	pop	r4
    1b18:	08 95       	ret
    1b1a:	66 ed       	ldi	r22, 0xD6	; 214
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	c8 01       	movw	r24, r16
    1b20:	c3 d4       	rcall	.+2438   	; 0x24a8 <strcmp_P>
    1b22:	89 2b       	or	r24, r25
    1b24:	59 f0       	breq	.+22     	; 0x1b3c <_ZN6MyMqtt9MqttTasksEv+0x1f4>
    1b26:	63 ed       	ldi	r22, 0xD3	; 211
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	c8 01       	movw	r24, r16
    1b2c:	bd d4       	rcall	.+2426   	; 0x24a8 <strcmp_P>
    1b2e:	89 2b       	or	r24, r25
								m_flags.flags.wifionline = true;
#ifdef DO_USB
								USBSerial.SendStr_P(Green,PSTR("WIFI Connected\r\n"));
#endif
							}
						else if (strcmp_P(pcmdbuf, PSTR("+WIFI Disconnected")) == 0)
    1b30:	29 f5       	brne	.+74     	; 0x1b7c <_ZN6MyMqtt9MqttTasksEv+0x234>
    1b32:	f7 01       	movw	r30, r14
    1b34:	87 ad       	ldd	r24, Z+63	; 0x3f
    1b36:	88 60       	ori	r24, 0x08	; 8
    1b38:	87 af       	std	Z+63, r24	; 0x3f
    1b3a:	a1 cf       	rjmp	.-190    	; 0x1a7e <_ZN6MyMqtt9MqttTasksEv+0x136>
    1b3c:	f7 01       	movw	r30, r14
								m_flags.flags.wifionline = false;
#ifdef DO_USB
								USBSerial.SendStr_P(Green,PSTR("WIFI Disconnected\r\n"));
#endif
							}
						else if (strcmp_P(pcmdbuf, PSTR("OK")) == 0)
    1b3e:	87 ad       	ldd	r24, Z+63	; 0x3f
    1b40:	8b 7f       	andi	r24, 0xFB	; 251
    1b42:	87 af       	std	Z+63, r24	; 0x3f
    1b44:	9c cf       	rjmp	.-200    	; 0x1a7e <_ZN6MyMqtt9MqttTasksEv+0x136>
    1b46:	4c 1b       	sub	r20, r28
    1b48:	5d 0b       	sbc	r21, r29
    1b4a:	b8 01       	movw	r22, r16
							{
								m_flags.flags.got_ok = true;
    1b4c:	c6 01       	movw	r24, r12
    1b4e:	cf d4       	rcall	.+2462   	; 0x24ee <memcpy>
    1b50:	f5 01       	movw	r30, r10
    1b52:	80 81       	ld	r24, Z
    1b54:	91 81       	ldd	r25, Z+1	; 0x01
								USBSerial.SendStr_P(Green,PSTR("WIFI Connected\r\n"));
#endif
							}
						else if (strcmp_P(pcmdbuf, PSTR("+WIFI Disconnected")) == 0)
							{
								m_flags.flags.wifionline = false;
    1b56:	8c 1b       	sub	r24, r28
    1b58:	9d 0b       	sbc	r25, r29
    1b5a:	91 83       	std	Z+1, r25	; 0x01
    1b5c:	80 83       	st	Z, r24
    1b5e:	f7 01       	movw	r30, r14
				else
					{
						b = false;
						if(idx < cmd_idx)
							{	// chars left over in buffer when full, shift them down
								memcpy(cmdbuf,cmdbuf+idx,cmd_idx-idx);
    1b60:	ee 5b       	subi	r30, 0xBE	; 190
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	40 81       	ld	r20, Z
    1b66:	51 81       	ldd	r21, Z+1	; 0x01
    1b68:	4c 1b       	sub	r20, r28
    1b6a:	5d 0b       	sbc	r21, r29
								cmd_idx -= idx;
    1b6c:	f4 01       	movw	r30, r8
    1b6e:	80 81       	ld	r24, Z
    1b70:	91 81       	ldd	r25, Z+1	; 0x01
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	8c 0f       	add	r24, r28
    1b78:	9d 1f       	adc	r25, r29
								memset(cmdbuf+idx,0,cmdbuflen-idx);
    1b7a:	91 cf       	rjmp	.-222    	; 0x1a9e <_ZN6MyMqtt9MqttTasksEv+0x156>
    1b7c:	6d ec       	ldi	r22, 0xCD	; 205
    1b7e:	70 e0       	ldi	r23, 0x00	; 0
    1b80:	c8 01       	movw	r24, r16
    1b82:	9b d4       	rcall	.+2358   	; 0x24ba <strstr_P>
    1b84:	89 2b       	or	r24, r25
    1b86:	29 f0       	breq	.+10     	; 0x1b92 <_ZN6MyMqtt9MqttTasksEv+0x24a>
    1b88:	f7 01       	movw	r30, r14
    1b8a:	87 ad       	ldd	r24, Z+63	; 0x3f
    1b8c:	80 61       	ori	r24, 0x10	; 16
    1b8e:	87 af       	std	Z+63, r24	; 0x3f
    1b90:	76 cf       	rjmp	.-276    	; 0x1a7e <_ZN6MyMqtt9MqttTasksEv+0x136>
    1b92:	61 ec       	ldi	r22, 0xC1	; 193
    1b94:	70 e0       	ldi	r23, 0x00	; 0
    1b96:	c8 01       	movw	r24, r16
								m_flags.flags.got_ok = true;
#ifdef DO_USB
								USBSerial.SendStr_P(Green,PSTR("Got OK\r\n"));
#endif
							}
						else if (strstr_P(pcmdbuf, PSTR("Error")) != NULL)
    1b98:	90 d4       	rcall	.+2336   	; 0x24ba <strstr_P>
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	09 f4       	brne	.+2      	; 0x1ba0 <_ZN6MyMqtt9MqttTasksEv+0x258>
    1b9e:	6f cf       	rjmp	.-290    	; 0x1a7e <_ZN6MyMqtt9MqttTasksEv+0x136>
    1ba0:	6c 01       	movw	r12, r24
    1ba2:	fb e0       	ldi	r31, 0x0B	; 11
    1ba4:	cf 0e       	add	r12, r31
							{
								m_flags.flags.got_error = true;
    1ba6:	d1 1c       	adc	r13, r1
    1ba8:	f8 01       	movw	r30, r16
    1baa:	10 82       	st	Z, r1
    1bac:	6f eb       	ldi	r22, 0xBF	; 191
    1bae:	70 e0       	ldi	r23, 0x00	; 0
#ifdef DO_USB
								USBSerial.SendStr_P(Red,PSTR("Got Error\r\n"));
#endif
							}
						else if ((p = strstr_P(pcmdbuf, PSTR("+AT+TOPIC=\""))) != NULL)
    1bb0:	c6 01       	movw	r24, r12
    1bb2:	83 d4       	rcall	.+2310   	; 0x24ba <strstr_P>
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	69 f0       	breq	.+26     	; 0x1bd2 <_ZN6MyMqtt9MqttTasksEv+0x28a>
    1bb8:	fc 01       	movw	r30, r24
    1bba:	10 82       	st	Z, r1
    1bbc:	8c 01       	movw	r16, r24
    1bbe:	0d 5f       	subi	r16, 0xFD	; 253
							{
								char *topic = p + 11;
    1bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc2:	6d eb       	ldi	r22, 0xBD	; 189
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	c8 01       	movw	r24, r16
#ifdef DO_USB
								USBSerial.SendStr_P(Green,PSTR("Got Topic\r\n"));
								USBSerial.SendStr(Green,pcmdbuf);
#endif

								pcmdbuf[0] = 0;
    1bc8:	78 d4       	rcall	.+2288   	; 0x24ba <strstr_P>
    1bca:	00 97       	sbiw	r24, 0x00	; 0
								p = strstr_P(topic, PSTR("\""));
    1bcc:	11 f0       	breq	.+4      	; 0x1bd2 <_ZN6MyMqtt9MqttTasksEv+0x28a>
    1bce:	fc 01       	movw	r30, r24
    1bd0:	10 82       	st	Z, r1
    1bd2:	a8 01       	movw	r20, r16
    1bd4:	b6 01       	movw	r22, r12
								if (p != NULL)
    1bd6:	c7 01       	movw	r24, r14
    1bd8:	e4 dc       	rcall	.-1592   	; 0x15a2 <_ZN6MyMqtt7OnTopicEPcS0_>
									{
										*p = 0;
    1bda:	f4 01       	movw	r30, r8
    1bdc:	c0 80       	ld	r12, Z
										payload = p + 3;
    1bde:	d1 80       	ldd	r13, Z+1	; 0x01
    1be0:	4e cf       	rjmp	.-356    	; 0x1a7e <_ZN6MyMqtt9MqttTasksEv+0x136>

00001be2 <_Z14checkSignatureb>:
				char buf[32];
				sprintf_P(buf,PSTR("Stack=%04x\n"), (int) (TrackStack()));
				USBSerial.SendStr(buf);
			}
#endif
		if (StackSignature != SIGNATURE)
    1be2:	80 91 87 03 	lds	r24, 0x0387
    1be6:	90 91 88 03 	lds	r25, 0x0388
    1bea:	8a 3a       	cpi	r24, 0xAA	; 170
    1bec:	95 45       	sbci	r25, 0x55	; 85
    1bee:	69 f0       	breq	.+26     	; 0x1c0a <_Z14checkSignatureb+0x28>
				while (1)
					{
#ifdef DO_USB
						USBSerial.StreamTask();
#endif
						sbi(PORTB, 7);
    1bf0:	2f 9a       	sbi	0x05, 7	; 5
						delay(100);
    1bf2:	64 e6       	ldi	r22, 0x64	; 100
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	fd d2       	rcall	.+1530   	; 0x21f6 <_Z5delaym>
    1bfc:	2f 98       	cbi	0x05, 7	; 5
						cbi(PORTB, 7);
    1bfe:	64 e6       	ldi	r22, 0x64	; 100
						delay(100);
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	f7 d2       	rcall	.+1518   	; 0x21f6 <_Z5delaym>
    1c08:	f3 cf       	rjmp	.-26     	; 0x1bf0 <_Z14checkSignatureb+0xe>
    1c0a:	08 95       	ret

00001c0c <_Z10fillPixelshhhh>:
					}
			}
	}

void fillPixels(byte pixels, byte r, byte g, byte b)
	{
    1c0c:	ef 92       	push	r14
    1c0e:	ff 92       	push	r15
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    unsigned char sreg;

public:
    InterruptBlocker()
	{
	sreg = SREG;
    1c18:	ef b6       	in	r14, 0x3f	; 63
	cli();
    1c1a:	f8 94       	cli
		InterruptBlocker ib;
		for (byte i = 0; i < pixels; i++)
    1c1c:	88 23       	and	r24, r24
    1c1e:	89 f0       	breq	.+34     	; 0x1c42 <_Z10fillPixelshhhh+0x36>
    1c20:	f2 2e       	mov	r15, r18
    1c22:	04 2f       	mov	r16, r20
    1c24:	16 2f       	mov	r17, r22
    1c26:	d8 2f       	mov	r29, r24
    1c28:	c0 e0       	ldi	r28, 0x00	; 0
    1c2a:	03 c0       	rjmp	.+6      	; 0x1c32 <_Z10fillPixelshhhh+0x26>
    1c2c:	cf 5f       	subi	r28, 0xFF	; 255
    1c2e:	cd 17       	cp	r28, r29
    1c30:	41 f0       	breq	.+16     	; 0x1c42 <_Z10fillPixelshhhh+0x36>
			{
				sendPixel(r, g, b);
    1c32:	4f 2d       	mov	r20, r15
    1c34:	60 2f       	mov	r22, r16
    1c36:	81 2f       	mov	r24, r17
    1c38:	33 d8       	rcall	.-3994   	; 0xca0 <_Z9sendPixelhhh>
    1c3a:	90 91 c8 00 	lds	r25, 0x00C8
				if (tbi(UCSR1A,RXC1))
    1c3e:	97 ff       	sbrs	r25, 7
    1c40:	f5 cf       	rjmp	.-22     	; 0x1c2c <_Z10fillPixelshhhh+0x20>
    1c42:	ef be       	out	0x3f, r14	; 63
    1c44:	df 91       	pop	r29
					return;
			}
	}
    1c46:	cf 91       	pop	r28
    1c48:	1f 91       	pop	r17
    1c4a:	0f 91       	pop	r16
    1c4c:	ff 90       	pop	r15
    1c4e:	ef 90       	pop	r14
    1c50:	08 95       	ret

00001c52 <_Z11flashPixelshhhhhj>:

void flashPixels(byte pixels, byte r, byte g, byte b, byte times, uint16_t delayrate)
	{
    1c52:	af 92       	push	r10
    1c54:	bf 92       	push	r11
    1c56:	cf 92       	push	r12
    1c58:	df 92       	push	r13
    1c5a:	ef 92       	push	r14
    1c5c:	ff 92       	push	r15
    1c5e:	0f 93       	push	r16
    1c60:	1f 93       	push	r17
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
		for (byte t = 0; t < times; t++)
    1c66:	00 23       	and	r16, r16
    1c68:	d9 f0       	breq	.+54     	; 0x1ca0 <_Z11flashPixelshhhhhj+0x4e>
    1c6a:	a2 2e       	mov	r10, r18
    1c6c:	b4 2e       	mov	r11, r20
    1c6e:	16 2f       	mov	r17, r22
    1c70:	d8 2f       	mov	r29, r24
    1c72:	67 01       	movw	r12, r14
    1c74:	e1 2c       	mov	r14, r1
    1c76:	f1 2c       	mov	r15, r1
    1c78:	c0 e0       	ldi	r28, 0x00	; 0
			{
				fillPixels(pixels, r, g, b);
    1c7a:	2a 2d       	mov	r18, r10
    1c7c:	4b 2d       	mov	r20, r11
    1c7e:	61 2f       	mov	r22, r17
    1c80:	8d 2f       	mov	r24, r29
    1c82:	c4 df       	rcall	.-120    	; 0x1c0c <_Z10fillPixelshhhh>
    1c84:	c7 01       	movw	r24, r14
				delay(delayrate);
    1c86:	b6 01       	movw	r22, r12
    1c88:	b6 d2       	rcall	.+1388   	; 0x21f6 <_Z5delaym>
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
				fillPixels(pixels, 0, 0, 0);
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	8d 2f       	mov	r24, r29
    1c92:	bc df       	rcall	.-136    	; 0x1c0c <_Z10fillPixelshhhh>
    1c94:	c7 01       	movw	r24, r14
    1c96:	b6 01       	movw	r22, r12
    1c98:	ae d2       	rcall	.+1372   	; 0x21f6 <_Z5delaym>
				delay(delayrate);
    1c9a:	cf 5f       	subi	r28, 0xFF	; 255
    1c9c:	c0 13       	cpse	r28, r16
    1c9e:	ed cf       	rjmp	.-38     	; 0x1c7a <_Z11flashPixelshhhhhj+0x28>
    1ca0:	df 91       	pop	r29
			}
	}

void flashPixels(byte pixels, byte r, byte g, byte b, byte times, uint16_t delayrate)
	{
		for (byte t = 0; t < times; t++)
    1ca2:	cf 91       	pop	r28
    1ca4:	1f 91       	pop	r17
    1ca6:	0f 91       	pop	r16
				fillPixels(pixels, r, g, b);
				delay(delayrate);
				fillPixels(pixels, 0, 0, 0);
				delay(delayrate);
			}
	}
    1ca8:	ff 90       	pop	r15
    1caa:	ef 90       	pop	r14
    1cac:	df 90       	pop	r13
    1cae:	cf 90       	pop	r12
    1cb0:	bf 90       	pop	r11
    1cb2:	af 90       	pop	r10
    1cb4:	08 95       	ret

00001cb6 <_Z9PixelTesth>:

#define INTERVAL_PIXEL 10

void PixelTest(byte pixels)
	{
		checkSignature(true);
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	94 df       	rcall	.-216    	; 0x1be2 <_Z14checkSignatureb>
    1cba:	84 ef       	ldi	r24, 0xF4	; 244
		flashPixels(PIXELS, 0, 0, 32, 3, 500);
    1cbc:	e8 2e       	mov	r14, r24
    1cbe:	ff 24       	eor	r15, r15
    1cc0:	f3 94       	inc	r15
    1cc2:	03 e0       	ldi	r16, 0x03	; 3
    1cc4:	20 e2       	ldi	r18, 0x20	; 32
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	82 e3       	ldi	r24, 0x32	; 50
    1ccc:	c2 df       	rcall	.-124    	; 0x1c52 <_Z11flashPixelshhhhhj>
    1cce:	46 e9       	ldi	r20, 0x96	; 150
    1cd0:	50 e0       	ldi	r21, 0x00	; 0

		//DDRB |= 1;
		mqttsock.SetBuffer((char *)neo.getPixels(),PIXELS * 3);
    1cd2:	65 e2       	ldi	r22, 0x25	; 37
    1cd4:	72 e0       	ldi	r23, 0x02	; 2
    1cd6:	84 e1       	ldi	r24, 0x14	; 20
    1cd8:	91 e0       	ldi	r25, 0x01	; 1
    1cda:	3d dc       	rcall	.-1926   	; 0x1556 <_ZN6MyMqtt9SetBufferEPcj>
    1cdc:	84 e1       	ldi	r24, 0x14	; 20
    1cde:	91 e0       	ldi	r25, 0x01	; 1
    1ce0:	95 dd       	rcall	.-1238   	; 0x180c <_ZN6MyMqtt5beginEv>
		mqttsock.begin();
    1ce2:	57 d2       	rcall	.+1198   	; 0x2192 <_Z6millisv>
    1ce4:	6b 01       	movw	r12, r22
    1ce6:	7c 01       	movw	r14, r24
    1ce8:	28 e8       	ldi	r18, 0x88	; 136
		//flashPixels(PIXELS, 0, 32, 0, 3, 500);
		unsigned long tmr;
		tmr = millis() + 5000;
    1cea:	c2 0e       	add	r12, r18
    1cec:	23 e1       	ldi	r18, 0x13	; 19
    1cee:	d2 1e       	adc	r13, r18
    1cf0:	e1 1c       	adc	r14, r1
    1cf2:	f1 1c       	adc	r15, r1
    1cf4:	07 c0       	rjmp	.+14     	; 0x1d04 <_Z9PixelTesth+0x4e>
    1cf6:	80 91 53 01 	lds	r24, 0x0153
    1cfa:	81 fd       	sbrc	r24, 1
    1cfc:	09 c0       	rjmp	.+18     	; 0x1d10 <_Z9PixelTesth+0x5a>
    1cfe:	84 e1       	ldi	r24, 0x14	; 20
    1d00:	91 e0       	ldi	r25, 0x01	; 1
    1d02:	22 de       	rcall	.-956    	; 0x1948 <_ZN6MyMqtt9MqttTasksEv>
		while (millis() < tmr && mqttsock.IsConnected() == false)
    1d04:	46 d2       	rcall	.+1164   	; 0x2192 <_Z6millisv>
    1d06:	6c 15       	cp	r22, r12
			{
				mqttsock.MqttTasks();
    1d08:	7d 05       	cpc	r23, r13
    1d0a:	8e 05       	cpc	r24, r14
    1d0c:	9f 05       	cpc	r25, r15
    1d0e:	98 f3       	brcs	.-26     	; 0x1cf6 <_Z9PixelTesth+0x40>
		mqttsock.SetBuffer((char *)neo.getPixels(),PIXELS * 3);
		mqttsock.begin();
		//flashPixels(PIXELS, 0, 32, 0, 3, 500);
		unsigned long tmr;
		tmr = millis() + 5000;
		while (millis() < tmr && mqttsock.IsConnected() == false)
    1d10:	40 d2       	rcall	.+1152   	; 0x2192 <_Z6millisv>
    1d12:	6b 01       	movw	r12, r22
    1d14:	7c 01       	movw	r14, r24
    1d16:	28 e8       	ldi	r18, 0x88	; 136
    1d18:	c2 0e       	add	r12, r18
    1d1a:	23 e1       	ldi	r18, 0x13	; 19
    1d1c:	d2 1e       	adc	r13, r18
				mqttsock.MqttTasks();
#ifdef DO_USB
				USBSerial.StreamTask();
#endif
			}
		tmr = millis() + 5000;
    1d1e:	e1 1c       	adc	r14, r1
    1d20:	f1 1c       	adc	r15, r1
    1d22:	07 c0       	rjmp	.+14     	; 0x1d32 <_Z9PixelTesth+0x7c>
    1d24:	80 91 53 01 	lds	r24, 0x0153
    1d28:	81 ff       	sbrs	r24, 1
    1d2a:	09 c0       	rjmp	.+18     	; 0x1d3e <_Z9PixelTesth+0x88>
    1d2c:	84 e1       	ldi	r24, 0x14	; 20
    1d2e:	91 e0       	ldi	r25, 0x01	; 1
    1d30:	0b de       	rcall	.-1002   	; 0x1948 <_ZN6MyMqtt9MqttTasksEv>
    1d32:	2f d2       	rcall	.+1118   	; 0x2192 <_Z6millisv>
    1d34:	6c 15       	cp	r22, r12
    1d36:	7d 05       	cpc	r23, r13

		// read any messages that come in fast
		while (millis() < tmr && mqttsock.IsConnected() == true)
    1d38:	8e 05       	cpc	r24, r14
    1d3a:	9f 05       	cpc	r25, r15
			{
				mqttsock.MqttTasks();
    1d3c:	98 f3       	brcs	.-26     	; 0x1d24 <_Z9PixelTesth+0x6e>
    1d3e:	40 e0       	ldi	r20, 0x00	; 0
    1d40:	50 e0       	ldi	r21, 0x00	; 0
    1d42:	60 e0       	ldi	r22, 0x00	; 0
#endif
			}
		tmr = millis() + 5000;

		// read any messages that come in fast
		while (millis() < tmr && mqttsock.IsConnected() == true)
    1d44:	70 e0       	ldi	r23, 0x00	; 0
    1d46:	84 e1       	ldi	r24, 0x14	; 20
    1d48:	91 e0       	ldi	r25, 0x01	; 1
    1d4a:	05 dc       	rcall	.-2038   	; 0x1556 <_ZN6MyMqtt9SetBufferEPcj>
    1d4c:	8a ed       	ldi	r24, 0xDA	; 218
    1d4e:	91 e0       	ldi	r25, 0x01	; 1
    1d50:	64 db       	rcall	.-2360   	; 0x141a <_ZN9NeoPixels5beginEv>
#ifdef DO_USB
				USBSerial.StreamTask();
#endif
			}

		mqttsock.SetBuffer(NULL,0);
    1d52:	84 e1       	ldi	r24, 0x14	; 20
    1d54:	91 e0       	ldi	r25, 0x01	; 1
    1d56:	f8 dd       	rcall	.-1040   	; 0x1948 <_ZN6MyMqtt9MqttTasksEv>
    1d58:	84 e1       	ldi	r24, 0x14	; 20
    1d5a:	91 e0       	ldi	r25, 0x01	; 1
    1d5c:	46 dd       	rcall	.-1396   	; 0x17ea <_ZN6MyMqtt11CheckUpdateEv>
    1d5e:	8a ed       	ldi	r24, 0xDA	; 218
    1d60:	91 e0       	ldi	r25, 0x01	; 1

		neo.begin();
    1d62:	6b db       	rcall	.-2346   	; 0x143a <_ZN9NeoPixels4TaskEv>
    1d64:	16 d2       	rcall	.+1068   	; 0x2192 <_Z6millisv>
    1d66:	c6 16       	cp	r12, r22
    1d68:	d7 06       	cpc	r13, r23
		while(1)
			{
				mqttsock.MqttTasks();
    1d6a:	e8 06       	cpc	r14, r24
    1d6c:	f9 06       	cpc	r15, r25
    1d6e:	88 f7       	brcc	.-30     	; 0x1d52 <_Z9PixelTesth+0x9c>
    1d70:	81 e0       	ldi	r24, 0x01	; 1
				mqttsock.CheckUpdate();
    1d72:	37 df       	rcall	.-402    	; 0x1be2 <_Z14checkSignatureb>
    1d74:	0e d2       	rcall	.+1052   	; 0x2192 <_Z6millisv>
    1d76:	6b 01       	movw	r12, r22
    1d78:	7c 01       	movw	r14, r24
				neo.Task();
    1d7a:	24 ef       	ldi	r18, 0xF4	; 244
    1d7c:	c2 0e       	add	r12, r18
    1d7e:	21 e0       	ldi	r18, 0x01	; 1
    1d80:	d2 1e       	adc	r13, r18
#ifdef DO_USB
				USBSerial.StreamTask();
#endif
				if (tmr < millis())
    1d82:	e1 1c       	adc	r14, r1
    1d84:	f1 1c       	adc	r15, r1
    1d86:	e5 cf       	rjmp	.-54     	; 0x1d52 <_Z9PixelTesth+0x9c>

00001d88 <main>:
#endif

int main(void)
	{

		initTimer();
    1d88:	5e d2       	rcall	.+1212   	; 0x2246 <_Z9initTimerv>
    1d8a:	27 9a       	sbi	0x04, 7	; 4
		sbi(DDRB, 7);
    1d8c:	2f 9a       	sbi	0x05, 7	; 5
		sbi(PORTB, 7);
    1d8e:	20 9a       	sbi	0x04, 0	; 4
		sbi(DDRB, 0);
    1d90:	28 9a       	sbi	0x05, 0	; 5
		sbi(PORTB, 0);
    1d92:	50 9a       	sbi	0x0a, 0	; 10
		sbi(E_RST_DDR, E_RST);
    1d94:	58 98       	cbi	0x0b, 0	; 11
		cbi(E_RST_PORT, E_RST);
    1d96:	51 9a       	sbi	0x0a, 1	; 10
		sbi(E_CH_PD_DDR, E_CH_PD);
    1d98:	59 98       	cbi	0x0b, 1	; 11
		cbi(E_CH_PD_PORT, E_CH_PD);
    1d9a:	68 ee       	ldi	r22, 0xE8	; 232
		delay(1000);
    1d9c:	73 e0       	ldi	r23, 0x03	; 3
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	29 d2       	rcall	.+1106   	; 0x21f6 <_Z5delaym>
    1da4:	84 ef       	ldi	r24, 0xF4	; 244
    1da6:	e8 2e       	mov	r14, r24
		flashPixels(PIXELS, 32, 0, 0, 3, 500);
    1da8:	ff 24       	eor	r15, r15
    1daa:	f3 94       	inc	r15
    1dac:	03 e0       	ldi	r16, 0x03	; 3
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	40 e0       	ldi	r20, 0x00	; 0
    1db2:	60 e2       	ldi	r22, 0x20	; 32
    1db4:	82 e3       	ldi	r24, 0x32	; 50
    1db6:	4d df       	rcall	.-358    	; 0x1c52 <_Z11flashPixelshhhhhj>
    1db8:	8a ea       	ldi	r24, 0xAA	; 170
    1dba:	95 e5       	ldi	r25, 0x55	; 85
    1dbc:	90 93 88 03 	sts	0x0388, r25
		StackSignature = SIGNATURE;
    1dc0:	80 93 87 03 	sts	0x0387, r24
    1dc4:	78 94       	sei
    1dc6:	20 9a       	sbi	0x04, 0	; 4
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	40 e0       	ldi	r20, 0x00	; 0
				USBSerial.StreamTask();
				_delay_ms(100);
			}
#endif
		GlobalInterruptEnable();
		sbi(DDRB, 0);
    1dcc:	60 e0       	ldi	r22, 0x00	; 0
		fillPixels(150, 0, 0, 0);
    1dce:	86 e9       	ldi	r24, 0x96	; 150
    1dd0:	1d df       	rcall	.-454    	; 0x1c0c <_Z10fillPixelshhhh>
    1dd2:	82 e3       	ldi	r24, 0x32	; 50
    1dd4:	70 df       	rcall	.-288    	; 0x1cb6 <_Z9PixelTesth>

00001dd6 <_GLOBAL__sub_I_StackSignature>:
			}
	}

volatile bool start = false;

NeoPixels neo(PIXELS);
    1dd6:	62 e3       	ldi	r22, 0x32	; 50
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	8a ed       	ldi	r24, 0xDA	; 218
    1ddc:	91 e0       	ldi	r25, 0x01	; 1
    1dde:	79 d9       	rcall	.-3342   	; 0x10d2 <_ZN9NeoPixelsC1Ej>
    1de0:	84 e1       	ldi	r24, 0x14	; 20
MyMqtt mqttsock;
    1de2:	91 e0       	ldi	r25, 0x01	; 1
    1de4:	9e cb       	rjmp	.-2244   	; 0x1522 <_ZN6MyMqttC1Ev>

00001de6 <_ZN9HWSerial13getEv>:
    1de6:	4f b7       	in	r20, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	fc 01       	movw	r30, r24
    1dec:	ec 59       	subi	r30, 0x9C	; 156
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	20 81       	ld	r18, Z
    1df2:	dc 01       	movw	r26, r24
    1df4:	ab 59       	subi	r26, 0x9B	; 155
    1df6:	bf 4f       	sbci	r27, 0xFF	; 255
    1df8:	3c 91       	ld	r19, X
    1dfa:	23 17       	cp	r18, r19
    1dfc:	71 f0       	breq	.+28     	; 0x1e1a <_ZN9HWSerial13getEv+0x34>
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	dc 01       	movw	r26, r24
    1e02:	a2 0f       	add	r26, r18
    1e04:	b3 1f       	adc	r27, r19
    1e06:	94 96       	adiw	r26, 0x24	; 36
    1e08:	8c 91       	ld	r24, X
    1e0a:	2f 5f       	subi	r18, 0xFF	; 255
    1e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0e:	2f 73       	andi	r18, 0x3F	; 63
    1e10:	33 27       	eor	r19, r19
    1e12:	20 83       	st	Z, r18
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	4f bf       	out	0x3f, r20	; 63
    1e18:	08 95       	ret
    1e1a:	8f ef       	ldi	r24, 0xFF	; 255
    1e1c:	9f ef       	ldi	r25, 0xFF	; 255
    1e1e:	fb cf       	rjmp	.-10     	; 0x1e16 <_ZN9HWSerial13getEv+0x30>

00001e20 <_ZN9HWSerial16putrxcEc>:
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	fc 01       	movw	r30, r24
    1e26:	7f b7       	in	r23, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	ab 59       	subi	r26, 0x9B	; 155
    1e2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e30:	9c 91       	ld	r25, X
    1e32:	29 2f       	mov	r18, r25
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	a9 01       	movw	r20, r18
    1e38:	4f 5f       	subi	r20, 0xFF	; 255
    1e3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e3c:	4f 73       	andi	r20, 0x3F	; 63
    1e3e:	55 27       	eor	r21, r21
    1e40:	ef 01       	movw	r28, r30
    1e42:	cc 59       	subi	r28, 0x9C	; 156
    1e44:	df 4f       	sbci	r29, 0xFF	; 255
    1e46:	88 81       	ld	r24, Y
    1e48:	84 17       	cp	r24, r20
    1e4a:	49 f0       	breq	.+18     	; 0x1e5e <_ZN9HWSerial16putrxcEc+0x3e>
    1e4c:	e2 0f       	add	r30, r18
    1e4e:	f3 1f       	adc	r31, r19
    1e50:	64 a3       	std	Z+36, r22	; 0x24
    1e52:	4c 93       	st	X, r20
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	7f bf       	out	0x3f, r23	; 63
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	08 95       	ret
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	7f bf       	out	0x3f, r23	; 63
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	08 95       	ret

00001e68 <_ZN9HWSerial16gettxcEv>:
    1e68:	fc 01       	movw	r30, r24
    1e6a:	4f b7       	in	r20, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	22 a1       	ldd	r18, Z+34	; 0x22
    1e70:	83 a1       	ldd	r24, Z+35	; 0x23
    1e72:	28 17       	cp	r18, r24
    1e74:	71 f0       	breq	.+28     	; 0x1e92 <_ZN9HWSerial16gettxcEv+0x2a>
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	df 01       	movw	r26, r30
    1e7a:	a2 0f       	add	r26, r18
    1e7c:	b3 1f       	adc	r27, r19
    1e7e:	12 96       	adiw	r26, 0x02	; 2
    1e80:	8c 91       	ld	r24, X
    1e82:	2f 5f       	subi	r18, 0xFF	; 255
    1e84:	3f 4f       	sbci	r19, 0xFF	; 255
    1e86:	2f 71       	andi	r18, 0x1F	; 31
    1e88:	33 27       	eor	r19, r19
    1e8a:	22 a3       	std	Z+34, r18	; 0x22
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	4f bf       	out	0x3f, r20	; 63
    1e90:	08 95       	ret
    1e92:	8f ef       	ldi	r24, 0xFF	; 255
    1e94:	9f ef       	ldi	r25, 0xFF	; 255
    1e96:	fb cf       	rjmp	.-10     	; 0x1e8e <_ZN9HWSerial16gettxcEv+0x26>

00001e98 <_ZN9HWSerial17PutCharEcb>:
    1e98:	fc 01       	movw	r30, r24
    1e9a:	5f b7       	in	r21, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	83 a1       	ldd	r24, Z+35	; 0x23
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	9c 01       	movw	r18, r24
    1ea4:	2f 5f       	subi	r18, 0xFF	; 255
    1ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea8:	2f 71       	andi	r18, 0x1F	; 31
    1eaa:	33 27       	eor	r19, r19
    1eac:	72 a1       	ldd	r23, Z+34	; 0x22
    1eae:	72 17       	cp	r23, r18
    1eb0:	d9 f0       	breq	.+54     	; 0x1ee8 <_ZN9HWSerial17PutCharEcb+0x50>
    1eb2:	df 01       	movw	r26, r30
    1eb4:	a8 0f       	add	r26, r24
    1eb6:	b9 1f       	adc	r27, r25
    1eb8:	12 96       	adiw	r26, 0x02	; 2
    1eba:	6c 93       	st	X, r22
    1ebc:	23 a3       	std	Z+35, r18	; 0x23
    1ebe:	5f bf       	out	0x3f, r21	; 63
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	ea 59       	subi	r30, 0x9A	; 154
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	90 81       	ld	r25, Z
    1ec8:	90 fd       	sbrc	r25, 0
    1eca:	0d c0       	rjmp	.+26     	; 0x1ee6 <_ZN9HWSerial17PutCharEcb+0x4e>
    1ecc:	91 60       	ori	r25, 0x01	; 1
    1ece:	90 83       	st	Z, r25
    1ed0:	90 91 c9 00 	lds	r25, 0x00C9
    1ed4:	90 62       	ori	r25, 0x20	; 32
    1ed6:	90 93 c9 00 	sts	0x00C9, r25
    1eda:	90 91 c8 00 	lds	r25, 0x00C8
    1ede:	90 64       	ori	r25, 0x40	; 64
    1ee0:	90 93 c8 00 	sts	0x00C8, r25
    1ee4:	08 95       	ret
    1ee6:	08 95       	ret
    1ee8:	5f bf       	out	0x3f, r21	; 63
    1eea:	41 11       	cpse	r20, r1
    1eec:	03 c0       	rjmp	.+6      	; 0x1ef4 <_ZN9HWSerial17PutCharEcb+0x5c>
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	e8 cf       	rjmp	.-48     	; 0x1ec2 <_ZN9HWSerial17PutCharEcb+0x2a>
    1ef2:	4f bf       	out	0x3f, r20	; 63
    1ef4:	4f b7       	in	r20, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	83 a1       	ldd	r24, Z+35	; 0x23
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9c 01       	movw	r18, r24
    1efe:	2f 5f       	subi	r18, 0xFF	; 255
    1f00:	3f 4f       	sbci	r19, 0xFF	; 255
    1f02:	2f 71       	andi	r18, 0x1F	; 31
    1f04:	32 a1       	ldd	r19, Z+34	; 0x22
    1f06:	23 17       	cp	r18, r19
    1f08:	a1 f3       	breq	.-24     	; 0x1ef2 <_ZN9HWSerial17PutCharEcb+0x5a>
    1f0a:	df 01       	movw	r26, r30
    1f0c:	a8 0f       	add	r26, r24
    1f0e:	b9 1f       	adc	r27, r25
    1f10:	12 96       	adiw	r26, 0x02	; 2
    1f12:	6c 93       	st	X, r22
    1f14:	23 a3       	std	Z+35, r18	; 0x23
    1f16:	4f bf       	out	0x3f, r20	; 63
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	d3 cf       	rjmp	.-90     	; 0x1ec2 <_ZN9HWSerial17PutCharEcb+0x2a>

00001f1c <_ZN9HWSerial15beginEm>:
    1f1c:	cf 92       	push	r12
    1f1e:	df 92       	push	r13
    1f20:	ef 92       	push	r14
    1f22:	ff 92       	push	r15
    1f24:	6a 01       	movw	r12, r20
    1f26:	7b 01       	movw	r14, r22
    1f28:	41 15       	cp	r20, r1
    1f2a:	51 4e       	sbci	r21, 0xE1	; 225
    1f2c:	61 05       	cpc	r22, r1
    1f2e:	71 05       	cpc	r23, r1
    1f30:	d1 f0       	breq	.+52     	; 0x1f66 <_ZN9HWSerial15beginEm+0x4a>
    1f32:	80 91 c8 00 	lds	r24, 0x00C8
    1f36:	82 60       	ori	r24, 0x02	; 2
    1f38:	80 93 c8 00 	sts	0x00C8, r24
    1f3c:	60 e0       	ldi	r22, 0x00	; 0
    1f3e:	79 e0       	ldi	r23, 0x09	; 9
    1f40:	8d e3       	ldi	r24, 0x3D	; 61
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	a7 01       	movw	r20, r14
    1f46:	96 01       	movw	r18, r12
    1f48:	f0 d1       	rcall	.+992    	; 0x232a <__udivmodsi4>
    1f4a:	da 01       	movw	r26, r20
    1f4c:	c9 01       	movw	r24, r18
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	a1 09       	sbc	r26, r1
    1f52:	b1 09       	sbc	r27, r1
    1f54:	b6 95       	lsr	r27
    1f56:	a7 95       	ror	r26
    1f58:	97 95       	ror	r25
    1f5a:	87 95       	ror	r24
    1f5c:	9c 01       	movw	r18, r24
    1f5e:	21 15       	cp	r18, r1
    1f60:	80 e1       	ldi	r24, 0x10	; 16
    1f62:	38 07       	cpc	r19, r24
    1f64:	b0 f0       	brcs	.+44     	; 0x1f92 <_ZN9HWSerial15beginEm+0x76>
    1f66:	80 91 c8 00 	lds	r24, 0x00C8
    1f6a:	8d 7f       	andi	r24, 0xFD	; 253
    1f6c:	80 93 c8 00 	sts	0x00C8, r24
    1f70:	60 e8       	ldi	r22, 0x80	; 128
    1f72:	74 e8       	ldi	r23, 0x84	; 132
    1f74:	8e e1       	ldi	r24, 0x1E	; 30
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	a7 01       	movw	r20, r14
    1f7a:	96 01       	movw	r18, r12
    1f7c:	d6 d1       	rcall	.+940    	; 0x232a <__udivmodsi4>
    1f7e:	da 01       	movw	r26, r20
    1f80:	c9 01       	movw	r24, r18
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	a1 09       	sbc	r26, r1
    1f86:	b1 09       	sbc	r27, r1
    1f88:	b6 95       	lsr	r27
    1f8a:	a7 95       	ror	r26
    1f8c:	97 95       	ror	r25
    1f8e:	87 95       	ror	r24
    1f90:	9c 01       	movw	r18, r24
    1f92:	30 93 cd 00 	sts	0x00CD, r19
    1f96:	20 93 cc 00 	sts	0x00CC, r18
    1f9a:	80 91 c9 00 	lds	r24, 0x00C9
    1f9e:	80 61       	ori	r24, 0x10	; 16
    1fa0:	80 93 c9 00 	sts	0x00C9, r24
    1fa4:	80 91 c9 00 	lds	r24, 0x00C9
    1fa8:	88 60       	ori	r24, 0x08	; 8
    1faa:	80 93 c9 00 	sts	0x00C9, r24
    1fae:	80 91 c9 00 	lds	r24, 0x00C9
    1fb2:	80 68       	ori	r24, 0x80	; 128
    1fb4:	80 93 c9 00 	sts	0x00C9, r24
    1fb8:	80 91 c9 00 	lds	r24, 0x00C9
    1fbc:	8f 7d       	andi	r24, 0xDF	; 223
    1fbe:	80 93 c9 00 	sts	0x00C9, r24
    1fc2:	78 94       	sei
    1fc4:	ff 90       	pop	r15
    1fc6:	ef 90       	pop	r14
    1fc8:	df 90       	pop	r13
    1fca:	cf 90       	pop	r12
    1fcc:	08 95       	ret

00001fce <__vector_24>:
    1fce:	1f 92       	push	r1
    1fd0:	0f 92       	push	r0
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	0f 92       	push	r0
    1fd6:	11 24       	eor	r1, r1
    1fd8:	2f 93       	push	r18
    1fda:	3f 93       	push	r19
    1fdc:	8f 93       	push	r24
    1fde:	9f 93       	push	r25
    1fe0:	ef 93       	push	r30
    1fe2:	ff 93       	push	r31
    1fe4:	2f b7       	in	r18, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	80 91 39 03 	lds	r24, 0x0339
    1fec:	90 91 3a 03 	lds	r25, 0x033A
    1ff0:	89 17       	cp	r24, r25
    1ff2:	c1 f0       	breq	.+48     	; 0x2024 <__vector_24+0x56>
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	e9 5e       	subi	r30, 0xE9	; 233
    1ffa:	fc 4f       	sbci	r31, 0xFC	; 252
    1ffc:	32 81       	ldd	r19, Z+2	; 0x02
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	8f 71       	andi	r24, 0x1F	; 31
    2002:	99 27       	eor	r25, r25
    2004:	80 93 39 03 	sts	0x0339, r24
    2008:	2f bf       	out	0x3f, r18	; 63
    200a:	30 93 ce 00 	sts	0x00CE, r19
    200e:	ff 91       	pop	r31
    2010:	ef 91       	pop	r30
    2012:	9f 91       	pop	r25
    2014:	8f 91       	pop	r24
    2016:	3f 91       	pop	r19
    2018:	2f 91       	pop	r18
    201a:	0f 90       	pop	r0
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	0f 90       	pop	r0
    2020:	1f 90       	pop	r1
    2022:	18 95       	reti
    2024:	2f bf       	out	0x3f, r18	; 63
    2026:	80 91 c9 00 	lds	r24, 0x00C9
    202a:	8f 7d       	andi	r24, 0xDF	; 223
    202c:	80 93 c9 00 	sts	0x00C9, r24
    2030:	80 91 7d 03 	lds	r24, 0x037D
    2034:	8e 7f       	andi	r24, 0xFE	; 254
    2036:	80 93 7d 03 	sts	0x037D, r24
    203a:	e9 cf       	rjmp	.-46     	; 0x200e <__vector_24+0x40>

0000203c <__vector_23>:
    203c:	1f 92       	push	r1
    203e:	0f 92       	push	r0
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	0f 92       	push	r0
    2044:	11 24       	eor	r1, r1
    2046:	2f 93       	push	r18
    2048:	3f 93       	push	r19
    204a:	4f 93       	push	r20
    204c:	5f 93       	push	r21
    204e:	6f 93       	push	r22
    2050:	8f 93       	push	r24
    2052:	9f 93       	push	r25
    2054:	ef 93       	push	r30
    2056:	ff 93       	push	r31
    2058:	80 91 c8 00 	lds	r24, 0x00C8
    205c:	82 fd       	sbrc	r24, 2
    205e:	18 c0       	rjmp	.+48     	; 0x2090 <__vector_23+0x54>
    2060:	60 91 ce 00 	lds	r22, 0x00CE
    2064:	4f b7       	in	r20, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	80 91 7c 03 	lds	r24, 0x037C
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9c 01       	movw	r18, r24
    2070:	2f 5f       	subi	r18, 0xFF	; 255
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	2f 73       	andi	r18, 0x3F	; 63
    2076:	33 27       	eor	r19, r19
    2078:	50 91 7b 03 	lds	r21, 0x037B
    207c:	52 17       	cp	r21, r18
    207e:	c1 f0       	breq	.+48     	; 0x20b0 <__vector_23+0x74>
    2080:	fc 01       	movw	r30, r24
    2082:	e9 5e       	subi	r30, 0xE9	; 233
    2084:	fc 4f       	sbci	r31, 0xFC	; 252
    2086:	64 a3       	std	Z+36, r22	; 0x24
    2088:	20 93 7c 03 	sts	0x037C, r18
    208c:	4f bf       	out	0x3f, r20	; 63
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <__vector_23+0x58>
    2090:	80 91 ce 00 	lds	r24, 0x00CE
    2094:	ff 91       	pop	r31
    2096:	ef 91       	pop	r30
    2098:	9f 91       	pop	r25
    209a:	8f 91       	pop	r24
    209c:	6f 91       	pop	r22
    209e:	5f 91       	pop	r21
    20a0:	4f 91       	pop	r20
    20a2:	3f 91       	pop	r19
    20a4:	2f 91       	pop	r18
    20a6:	0f 90       	pop	r0
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	0f 90       	pop	r0
    20ac:	1f 90       	pop	r1
    20ae:	18 95       	reti
    20b0:	4f bf       	out	0x3f, r20	; 63
    20b2:	80 91 7d 03 	lds	r24, 0x037D
    20b6:	82 60       	ori	r24, 0x02	; 2
    20b8:	80 93 7d 03 	sts	0x037D, r24
    20bc:	eb cf       	rjmp	.-42     	; 0x2094 <__vector_23+0x58>

000020be <_GLOBAL__sub_I_Serial1>:
    20be:	e7 e1       	ldi	r30, 0x17	; 23
    20c0:	f3 e0       	ldi	r31, 0x03	; 3
    20c2:	13 a2       	std	Z+35, r1	; 0x23
    20c4:	12 a2       	std	Z+34, r1	; 0x22
    20c6:	10 92 7c 03 	sts	0x037C, r1
    20ca:	10 92 7b 03 	sts	0x037B, r1
    20ce:	8b e0       	ldi	r24, 0x0B	; 11
    20d0:	91 e0       	ldi	r25, 0x01	; 1
    20d2:	91 83       	std	Z+1, r25	; 0x01
    20d4:	80 83       	st	Z, r24
    20d6:	ed e7       	ldi	r30, 0x7D	; 125
    20d8:	f3 e0       	ldi	r31, 0x03	; 3
    20da:	80 81       	ld	r24, Z
    20dc:	8e 7f       	andi	r24, 0xFE	; 254
    20de:	8d 7f       	andi	r24, 0xFD	; 253
    20e0:	80 83       	st	Z, r24
    20e2:	08 95       	ret

000020e4 <__vector_21>:
    20e4:	1f 92       	push	r1
    20e6:	0f 92       	push	r0
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	0f 92       	push	r0
    20ec:	11 24       	eor	r1, r1
    20ee:	2f 93       	push	r18
    20f0:	3f 93       	push	r19
    20f2:	4f 93       	push	r20
    20f4:	5f 93       	push	r21
    20f6:	6f 93       	push	r22
    20f8:	7f 93       	push	r23
    20fa:	8f 93       	push	r24
    20fc:	9f 93       	push	r25
    20fe:	af 93       	push	r26
    2100:	bf 93       	push	r27
    2102:	ef 93       	push	r30
    2104:	ff 93       	push	r31
    2106:	80 91 7f 03 	lds	r24, 0x037F
    210a:	90 91 80 03 	lds	r25, 0x0380
    210e:	a0 91 81 03 	lds	r26, 0x0381
    2112:	b0 91 82 03 	lds	r27, 0x0382
    2116:	30 91 7e 03 	lds	r19, 0x037E
    211a:	23 e0       	ldi	r18, 0x03	; 3
    211c:	23 0f       	add	r18, r19
    211e:	2d 37       	cpi	r18, 0x7D	; 125
    2120:	a0 f1       	brcs	.+104    	; 0x218a <__vector_21+0xa6>
    2122:	26 e8       	ldi	r18, 0x86	; 134
    2124:	23 0f       	add	r18, r19
    2126:	02 96       	adiw	r24, 0x02	; 2
    2128:	a1 1d       	adc	r26, r1
    212a:	b1 1d       	adc	r27, r1
    212c:	20 93 7e 03 	sts	0x037E, r18
    2130:	80 93 7f 03 	sts	0x037F, r24
    2134:	90 93 80 03 	sts	0x0380, r25
    2138:	a0 93 81 03 	sts	0x0381, r26
    213c:	b0 93 82 03 	sts	0x0382, r27
    2140:	80 91 83 03 	lds	r24, 0x0383
    2144:	90 91 84 03 	lds	r25, 0x0384
    2148:	a0 91 85 03 	lds	r26, 0x0385
    214c:	b0 91 86 03 	lds	r27, 0x0386
    2150:	01 96       	adiw	r24, 0x01	; 1
    2152:	a1 1d       	adc	r26, r1
    2154:	b1 1d       	adc	r27, r1
    2156:	80 93 83 03 	sts	0x0383, r24
    215a:	90 93 84 03 	sts	0x0384, r25
    215e:	a0 93 85 03 	sts	0x0385, r26
    2162:	b0 93 86 03 	sts	0x0386, r27
    2166:	99 d0       	rcall	.+306    	; 0x229a <_Z10TrackStackv>
    2168:	ff 91       	pop	r31
    216a:	ef 91       	pop	r30
    216c:	bf 91       	pop	r27
    216e:	af 91       	pop	r26
    2170:	9f 91       	pop	r25
    2172:	8f 91       	pop	r24
    2174:	7f 91       	pop	r23
    2176:	6f 91       	pop	r22
    2178:	5f 91       	pop	r21
    217a:	4f 91       	pop	r20
    217c:	3f 91       	pop	r19
    217e:	2f 91       	pop	r18
    2180:	0f 90       	pop	r0
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	0f 90       	pop	r0
    2186:	1f 90       	pop	r1
    2188:	18 95       	reti
    218a:	01 96       	adiw	r24, 0x01	; 1
    218c:	a1 1d       	adc	r26, r1
    218e:	b1 1d       	adc	r27, r1
    2190:	cd cf       	rjmp	.-102    	; 0x212c <__vector_21+0x48>

00002192 <_Z6millisv>:
    2192:	2f b7       	in	r18, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	60 91 7f 03 	lds	r22, 0x037F
    219a:	70 91 80 03 	lds	r23, 0x0380
    219e:	80 91 81 03 	lds	r24, 0x0381
    21a2:	90 91 82 03 	lds	r25, 0x0382
    21a6:	2f bf       	out	0x3f, r18	; 63
    21a8:	08 95       	ret

000021aa <_Z6microsv>:
    21aa:	3f b7       	in	r19, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	80 91 83 03 	lds	r24, 0x0383
    21b2:	90 91 84 03 	lds	r25, 0x0384
    21b6:	a0 91 85 03 	lds	r26, 0x0385
    21ba:	b0 91 86 03 	lds	r27, 0x0386
    21be:	26 b5       	in	r18, 0x26	; 38
    21c0:	a8 9b       	sbis	0x15, 0	; 21
    21c2:	05 c0       	rjmp	.+10     	; 0x21ce <_Z6microsv+0x24>
    21c4:	2f 3f       	cpi	r18, 0xFF	; 255
    21c6:	19 f0       	breq	.+6      	; 0x21ce <_Z6microsv+0x24>
    21c8:	01 96       	adiw	r24, 0x01	; 1
    21ca:	a1 1d       	adc	r26, r1
    21cc:	b1 1d       	adc	r27, r1
    21ce:	3f bf       	out	0x3f, r19	; 63
    21d0:	ba 2f       	mov	r27, r26
    21d2:	a9 2f       	mov	r26, r25
    21d4:	98 2f       	mov	r25, r24
    21d6:	88 27       	eor	r24, r24
    21d8:	82 0f       	add	r24, r18
    21da:	91 1d       	adc	r25, r1
    21dc:	a1 1d       	adc	r26, r1
    21de:	b1 1d       	adc	r27, r1
    21e0:	bc 01       	movw	r22, r24
    21e2:	cd 01       	movw	r24, r26
    21e4:	66 0f       	add	r22, r22
    21e6:	77 1f       	adc	r23, r23
    21e8:	88 1f       	adc	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	66 0f       	add	r22, r22
    21ee:	77 1f       	adc	r23, r23
    21f0:	88 1f       	adc	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	08 95       	ret

000021f6 <_Z5delaym>:
    21f6:	cf 92       	push	r12
    21f8:	df 92       	push	r13
    21fa:	ef 92       	push	r14
    21fc:	ff 92       	push	r15
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	6b 01       	movw	r12, r22
    2204:	7c 01       	movw	r14, r24
    2206:	d1 df       	rcall	.-94     	; 0x21aa <_Z6microsv>
    2208:	eb 01       	movw	r28, r22
    220a:	c1 14       	cp	r12, r1
    220c:	d1 04       	cpc	r13, r1
    220e:	e1 04       	cpc	r14, r1
    2210:	f1 04       	cpc	r15, r1
    2212:	91 f0       	breq	.+36     	; 0x2238 <_Z5delaym+0x42>
    2214:	ca df       	rcall	.-108    	; 0x21aa <_Z6microsv>
    2216:	6c 1b       	sub	r22, r28
    2218:	7d 0b       	sbc	r23, r29
    221a:	68 3e       	cpi	r22, 0xE8	; 232
    221c:	73 40       	sbci	r23, 0x03	; 3
    221e:	d0 f3       	brcs	.-12     	; 0x2214 <_Z5delaym+0x1e>
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	c8 1a       	sub	r12, r24
    2224:	d1 08       	sbc	r13, r1
    2226:	e1 08       	sbc	r14, r1
    2228:	f1 08       	sbc	r15, r1
    222a:	c8 51       	subi	r28, 0x18	; 24
    222c:	dc 4f       	sbci	r29, 0xFC	; 252
    222e:	c1 14       	cp	r12, r1
    2230:	d1 04       	cpc	r13, r1
    2232:	e1 04       	cpc	r14, r1
    2234:	f1 04       	cpc	r15, r1
    2236:	71 f7       	brne	.-36     	; 0x2214 <_Z5delaym+0x1e>
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	ff 90       	pop	r15
    223e:	ef 90       	pop	r14
    2240:	df 90       	pop	r13
    2242:	cf 90       	pop	r12
    2244:	08 95       	ret

00002246 <_Z9initTimerv>:
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	80 e8       	ldi	r24, 0x80	; 128
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	80 93 61 00 	sts	0x0061, r24
    2252:	90 93 61 00 	sts	0x0061, r25
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	78 94       	sei
    225a:	84 b5       	in	r24, 0x24	; 36
    225c:	82 60       	ori	r24, 0x02	; 2
    225e:	84 bd       	out	0x24, r24	; 36
    2260:	84 b5       	in	r24, 0x24	; 36
    2262:	81 60       	ori	r24, 0x01	; 1
    2264:	84 bd       	out	0x24, r24	; 36
    2266:	85 b5       	in	r24, 0x25	; 37
    2268:	82 60       	ori	r24, 0x02	; 2
    226a:	85 bd       	out	0x25, r24	; 37
    226c:	85 b5       	in	r24, 0x25	; 37
    226e:	81 60       	ori	r24, 0x01	; 1
    2270:	85 bd       	out	0x25, r24	; 37
    2272:	ee e6       	ldi	r30, 0x6E	; 110
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	81 60       	ori	r24, 0x01	; 1
    227a:	80 83       	st	Z, r24
    227c:	e1 e8       	ldi	r30, 0x81	; 129
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	10 82       	st	Z, r1
    2282:	80 81       	ld	r24, Z
    2284:	82 60       	ori	r24, 0x02	; 2
    2286:	80 83       	st	Z, r24
    2288:	80 81       	ld	r24, Z
    228a:	81 60       	ori	r24, 0x01	; 1
    228c:	80 83       	st	Z, r24
    228e:	e0 e8       	ldi	r30, 0x80	; 128
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	81 60       	ori	r24, 0x01	; 1
    2296:	80 83       	st	Z, r24
    2298:	08 95       	ret

0000229a <_Z10TrackStackv>:
    229a:	2d b7       	in	r18, 0x3d	; 61
    229c:	3e b7       	in	r19, 0x3e	; 62
    229e:	80 91 05 01 	lds	r24, 0x0105
    22a2:	90 91 06 01 	lds	r25, 0x0106
    22a6:	28 17       	cp	r18, r24
    22a8:	39 07       	cpc	r19, r25
    22aa:	30 f4       	brcc	.+12     	; 0x22b8 <_Z10TrackStackv+0x1e>
    22ac:	8d b7       	in	r24, 0x3d	; 61
    22ae:	9e b7       	in	r25, 0x3e	; 62
    22b0:	90 93 06 01 	sts	0x0106, r25
    22b4:	80 93 05 01 	sts	0x0105, r24
    22b8:	08 95       	ret

000022ba <__mulhi3>:
    22ba:	00 24       	eor	r0, r0
    22bc:	55 27       	eor	r21, r21
    22be:	04 c0       	rjmp	.+8      	; 0x22c8 <__mulhi3+0xe>
    22c0:	08 0e       	add	r0, r24
    22c2:	59 1f       	adc	r21, r25
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	29 f0       	breq	.+10     	; 0x22d6 <__mulhi3+0x1c>
    22cc:	76 95       	lsr	r23
    22ce:	67 95       	ror	r22
    22d0:	b8 f3       	brcs	.-18     	; 0x22c0 <__mulhi3+0x6>
    22d2:	71 05       	cpc	r23, r1
    22d4:	b9 f7       	brne	.-18     	; 0x22c4 <__mulhi3+0xa>
    22d6:	80 2d       	mov	r24, r0
    22d8:	95 2f       	mov	r25, r21
    22da:	08 95       	ret

000022dc <__udivmodhi4>:
    22dc:	aa 1b       	sub	r26, r26
    22de:	bb 1b       	sub	r27, r27
    22e0:	51 e1       	ldi	r21, 0x11	; 17
    22e2:	07 c0       	rjmp	.+14     	; 0x22f2 <__udivmodhi4_ep>

000022e4 <__udivmodhi4_loop>:
    22e4:	aa 1f       	adc	r26, r26
    22e6:	bb 1f       	adc	r27, r27
    22e8:	a6 17       	cp	r26, r22
    22ea:	b7 07       	cpc	r27, r23
    22ec:	10 f0       	brcs	.+4      	; 0x22f2 <__udivmodhi4_ep>
    22ee:	a6 1b       	sub	r26, r22
    22f0:	b7 0b       	sbc	r27, r23

000022f2 <__udivmodhi4_ep>:
    22f2:	88 1f       	adc	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	5a 95       	dec	r21
    22f8:	a9 f7       	brne	.-22     	; 0x22e4 <__udivmodhi4_loop>
    22fa:	80 95       	com	r24
    22fc:	90 95       	com	r25
    22fe:	bc 01       	movw	r22, r24
    2300:	cd 01       	movw	r24, r26
    2302:	08 95       	ret

00002304 <__divmodhi4>:
    2304:	97 fb       	bst	r25, 7
    2306:	07 2e       	mov	r0, r23
    2308:	16 f4       	brtc	.+4      	; 0x230e <__divmodhi4+0xa>
    230a:	00 94       	com	r0
    230c:	06 d0       	rcall	.+12     	; 0x231a <__divmodhi4_neg1>
    230e:	77 fd       	sbrc	r23, 7
    2310:	08 d0       	rcall	.+16     	; 0x2322 <__divmodhi4_neg2>
    2312:	e4 df       	rcall	.-56     	; 0x22dc <__udivmodhi4>
    2314:	07 fc       	sbrc	r0, 7
    2316:	05 d0       	rcall	.+10     	; 0x2322 <__divmodhi4_neg2>
    2318:	3e f4       	brtc	.+14     	; 0x2328 <__divmodhi4_exit>

0000231a <__divmodhi4_neg1>:
    231a:	90 95       	com	r25
    231c:	81 95       	neg	r24
    231e:	9f 4f       	sbci	r25, 0xFF	; 255
    2320:	08 95       	ret

00002322 <__divmodhi4_neg2>:
    2322:	70 95       	com	r23
    2324:	61 95       	neg	r22
    2326:	7f 4f       	sbci	r23, 0xFF	; 255

00002328 <__divmodhi4_exit>:
    2328:	08 95       	ret

0000232a <__udivmodsi4>:
    232a:	a1 e2       	ldi	r26, 0x21	; 33
    232c:	1a 2e       	mov	r1, r26
    232e:	aa 1b       	sub	r26, r26
    2330:	bb 1b       	sub	r27, r27
    2332:	fd 01       	movw	r30, r26
    2334:	0d c0       	rjmp	.+26     	; 0x2350 <__udivmodsi4_ep>

00002336 <__udivmodsi4_loop>:
    2336:	aa 1f       	adc	r26, r26
    2338:	bb 1f       	adc	r27, r27
    233a:	ee 1f       	adc	r30, r30
    233c:	ff 1f       	adc	r31, r31
    233e:	a2 17       	cp	r26, r18
    2340:	b3 07       	cpc	r27, r19
    2342:	e4 07       	cpc	r30, r20
    2344:	f5 07       	cpc	r31, r21
    2346:	20 f0       	brcs	.+8      	; 0x2350 <__udivmodsi4_ep>
    2348:	a2 1b       	sub	r26, r18
    234a:	b3 0b       	sbc	r27, r19
    234c:	e4 0b       	sbc	r30, r20
    234e:	f5 0b       	sbc	r31, r21

00002350 <__udivmodsi4_ep>:
    2350:	66 1f       	adc	r22, r22
    2352:	77 1f       	adc	r23, r23
    2354:	88 1f       	adc	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	1a 94       	dec	r1
    235a:	69 f7       	brne	.-38     	; 0x2336 <__udivmodsi4_loop>
    235c:	60 95       	com	r22
    235e:	70 95       	com	r23
    2360:	80 95       	com	r24
    2362:	90 95       	com	r25
    2364:	9b 01       	movw	r18, r22
    2366:	ac 01       	movw	r20, r24
    2368:	bd 01       	movw	r22, r26
    236a:	cf 01       	movw	r24, r30
    236c:	08 95       	ret

0000236e <__divmodsi4>:
    236e:	05 2e       	mov	r0, r21
    2370:	97 fb       	bst	r25, 7
    2372:	16 f4       	brtc	.+4      	; 0x2378 <__divmodsi4+0xa>
    2374:	00 94       	com	r0
    2376:	0f d0       	rcall	.+30     	; 0x2396 <__negsi2>
    2378:	57 fd       	sbrc	r21, 7
    237a:	05 d0       	rcall	.+10     	; 0x2386 <__divmodsi4_neg2>
    237c:	d6 df       	rcall	.-84     	; 0x232a <__udivmodsi4>
    237e:	07 fc       	sbrc	r0, 7
    2380:	02 d0       	rcall	.+4      	; 0x2386 <__divmodsi4_neg2>
    2382:	46 f4       	brtc	.+16     	; 0x2394 <__divmodsi4_exit>
    2384:	08 c0       	rjmp	.+16     	; 0x2396 <__negsi2>

00002386 <__divmodsi4_neg2>:
    2386:	50 95       	com	r21
    2388:	40 95       	com	r20
    238a:	30 95       	com	r19
    238c:	21 95       	neg	r18
    238e:	3f 4f       	sbci	r19, 0xFF	; 255
    2390:	4f 4f       	sbci	r20, 0xFF	; 255
    2392:	5f 4f       	sbci	r21, 0xFF	; 255

00002394 <__divmodsi4_exit>:
    2394:	08 95       	ret

00002396 <__negsi2>:
    2396:	90 95       	com	r25
    2398:	80 95       	com	r24
    239a:	70 95       	com	r23
    239c:	61 95       	neg	r22
    239e:	7f 4f       	sbci	r23, 0xFF	; 255
    23a0:	8f 4f       	sbci	r24, 0xFF	; 255
    23a2:	9f 4f       	sbci	r25, 0xFF	; 255
    23a4:	08 95       	ret

000023a6 <__tablejump2__>:
    23a6:	ee 0f       	add	r30, r30
    23a8:	ff 1f       	adc	r31, r31
    23aa:	05 90       	lpm	r0, Z+
    23ac:	f4 91       	lpm	r31, Z
    23ae:	e0 2d       	mov	r30, r0
    23b0:	09 94       	ijmp

000023b2 <do_random>:
    23b2:	a0 e0       	ldi	r26, 0x00	; 0
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	ee ed       	ldi	r30, 0xDE	; 222
    23b8:	f1 e1       	ldi	r31, 0x11	; 17
    23ba:	e4 c0       	rjmp	.+456    	; 0x2584 <__prologue_saves__+0xc>
    23bc:	ec 01       	movw	r28, r24
    23be:	68 81       	ld	r22, Y
    23c0:	79 81       	ldd	r23, Y+1	; 0x01
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	9b 81       	ldd	r25, Y+3	; 0x03
    23c6:	61 15       	cp	r22, r1
    23c8:	71 05       	cpc	r23, r1
    23ca:	81 05       	cpc	r24, r1
    23cc:	91 05       	cpc	r25, r1
    23ce:	21 f4       	brne	.+8      	; 0x23d8 <do_random+0x26>
    23d0:	64 e2       	ldi	r22, 0x24	; 36
    23d2:	79 ed       	ldi	r23, 0xD9	; 217
    23d4:	8b e5       	ldi	r24, 0x5B	; 91
    23d6:	97 e0       	ldi	r25, 0x07	; 7
    23d8:	2d e1       	ldi	r18, 0x1D	; 29
    23da:	33 ef       	ldi	r19, 0xF3	; 243
    23dc:	41 e0       	ldi	r20, 0x01	; 1
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	c6 df       	rcall	.-116    	; 0x236e <__divmodsi4>
    23e2:	49 01       	movw	r8, r18
    23e4:	5a 01       	movw	r10, r20
    23e6:	27 ea       	ldi	r18, 0xA7	; 167
    23e8:	31 e4       	ldi	r19, 0x41	; 65
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	50 e0       	ldi	r21, 0x00	; 0
    23ee:	a7 d0       	rcall	.+334    	; 0x253e <__mulsidi3>
    23f0:	69 01       	movw	r12, r18
    23f2:	7a 01       	movw	r14, r20
    23f4:	c5 01       	movw	r24, r10
    23f6:	b4 01       	movw	r22, r8
    23f8:	2c ee       	ldi	r18, 0xEC	; 236
    23fa:	34 ef       	ldi	r19, 0xF4	; 244
    23fc:	4f ef       	ldi	r20, 0xFF	; 255
    23fe:	5f ef       	ldi	r21, 0xFF	; 255
    2400:	9e d0       	rcall	.+316    	; 0x253e <__mulsidi3>
    2402:	02 2f       	mov	r16, r18
    2404:	13 2f       	mov	r17, r19
    2406:	9a 01       	movw	r18, r20
    2408:	d7 01       	movw	r26, r14
    240a:	c6 01       	movw	r24, r12
    240c:	80 0f       	add	r24, r16
    240e:	91 1f       	adc	r25, r17
    2410:	a2 1f       	adc	r26, r18
    2412:	b3 1f       	adc	r27, r19
    2414:	b7 ff       	sbrs	r27, 7
    2416:	03 c0       	rjmp	.+6      	; 0x241e <do_random+0x6c>
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	a1 09       	sbc	r26, r1
    241c:	b0 48       	sbci	r27, 0x80	; 128
    241e:	88 83       	st	Y, r24
    2420:	99 83       	std	Y+1, r25	; 0x01
    2422:	aa 83       	std	Y+2, r26	; 0x02
    2424:	bb 83       	std	Y+3, r27	; 0x03
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	9f 77       	andi	r25, 0x7F	; 127
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	ec e0       	ldi	r30, 0x0C	; 12
    2432:	c4 c0       	rjmp	.+392    	; 0x25bc <__epilogue_restores__+0xc>

00002434 <random_r>:
    2434:	be cf       	rjmp	.-132    	; 0x23b2 <do_random>

00002436 <random>:
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	91 e0       	ldi	r25, 0x01	; 1
    243a:	bb cf       	rjmp	.-138    	; 0x23b2 <do_random>

0000243c <srandom>:
    243c:	60 93 00 01 	sts	0x0100, r22
    2440:	70 93 01 01 	sts	0x0101, r23
    2444:	80 93 02 01 	sts	0x0102, r24
    2448:	90 93 03 01 	sts	0x0103, r25
    244c:	08 95       	ret

0000244e <atoi>:
    244e:	fc 01       	movw	r30, r24
    2450:	88 27       	eor	r24, r24
    2452:	99 27       	eor	r25, r25
    2454:	e8 94       	clt
    2456:	21 91       	ld	r18, Z+
    2458:	20 32       	cpi	r18, 0x20	; 32
    245a:	e9 f3       	breq	.-6      	; 0x2456 <atoi+0x8>
    245c:	29 30       	cpi	r18, 0x09	; 9
    245e:	10 f0       	brcs	.+4      	; 0x2464 <atoi+0x16>
    2460:	2e 30       	cpi	r18, 0x0E	; 14
    2462:	c8 f3       	brcs	.-14     	; 0x2456 <atoi+0x8>
    2464:	2b 32       	cpi	r18, 0x2B	; 43
    2466:	39 f0       	breq	.+14     	; 0x2476 <atoi+0x28>
    2468:	2d 32       	cpi	r18, 0x2D	; 45
    246a:	31 f4       	brne	.+12     	; 0x2478 <atoi+0x2a>
    246c:	68 94       	set
    246e:	03 c0       	rjmp	.+6      	; 0x2476 <atoi+0x28>
    2470:	59 d0       	rcall	.+178    	; 0x2524 <__mulhi_const_10>
    2472:	82 0f       	add	r24, r18
    2474:	91 1d       	adc	r25, r1
    2476:	21 91       	ld	r18, Z+
    2478:	20 53       	subi	r18, 0x30	; 48
    247a:	2a 30       	cpi	r18, 0x0A	; 10
    247c:	c8 f3       	brcs	.-14     	; 0x2470 <atoi+0x22>
    247e:	1e f4       	brtc	.+6      	; 0x2486 <atoi+0x38>
    2480:	90 95       	com	r25
    2482:	81 95       	neg	r24
    2484:	9f 4f       	sbci	r25, 0xFF	; 255
    2486:	08 95       	ret

00002488 <isgraph>:
    2488:	80 32       	cpi	r24, 0x20	; 32
    248a:	09 f0       	breq	.+2      	; 0x248e <isprint+0x2>

0000248c <isprint>:
    248c:	91 11       	cpse	r25, r1
    248e:	54 c0       	rjmp	.+168    	; 0x2538 <__ctype_isfalse>
    2490:	80 52       	subi	r24, 0x20	; 32
    2492:	8f 55       	subi	r24, 0x5F	; 95
    2494:	e0 f7       	brcc	.-8      	; 0x248e <isprint+0x2>
    2496:	08 95       	ret

00002498 <isspace>:
    2498:	91 11       	cpse	r25, r1
    249a:	4e c0       	rjmp	.+156    	; 0x2538 <__ctype_isfalse>
    249c:	80 32       	cpi	r24, 0x20	; 32
    249e:	19 f0       	breq	.+6      	; 0x24a6 <isspace+0xe>
    24a0:	89 50       	subi	r24, 0x09	; 9
    24a2:	85 50       	subi	r24, 0x05	; 5
    24a4:	d0 f7       	brcc	.-12     	; 0x249a <isspace+0x2>
    24a6:	08 95       	ret

000024a8 <strcmp_P>:
    24a8:	fb 01       	movw	r30, r22
    24aa:	dc 01       	movw	r26, r24
    24ac:	8d 91       	ld	r24, X+
    24ae:	05 90       	lpm	r0, Z+
    24b0:	80 19       	sub	r24, r0
    24b2:	01 10       	cpse	r0, r1
    24b4:	d9 f3       	breq	.-10     	; 0x24ac <strcmp_P+0x4>
    24b6:	99 0b       	sbc	r25, r25
    24b8:	08 95       	ret

000024ba <strstr_P>:
    24ba:	fb 01       	movw	r30, r22
    24bc:	55 91       	lpm	r21, Z+
    24be:	55 23       	and	r21, r21
    24c0:	a9 f0       	breq	.+42     	; 0x24ec <strstr_P+0x32>
    24c2:	bf 01       	movw	r22, r30
    24c4:	dc 01       	movw	r26, r24
    24c6:	4d 91       	ld	r20, X+
    24c8:	45 17       	cp	r20, r21
    24ca:	41 11       	cpse	r20, r1
    24cc:	e1 f7       	brne	.-8      	; 0x24c6 <strstr_P+0xc>
    24ce:	59 f4       	brne	.+22     	; 0x24e6 <strstr_P+0x2c>
    24d0:	cd 01       	movw	r24, r26
    24d2:	05 90       	lpm	r0, Z+
    24d4:	00 20       	and	r0, r0
    24d6:	49 f0       	breq	.+18     	; 0x24ea <strstr_P+0x30>
    24d8:	4d 91       	ld	r20, X+
    24da:	40 15       	cp	r20, r0
    24dc:	41 11       	cpse	r20, r1
    24de:	c9 f3       	breq	.-14     	; 0x24d2 <strstr_P+0x18>
    24e0:	fb 01       	movw	r30, r22
    24e2:	41 11       	cpse	r20, r1
    24e4:	ef cf       	rjmp	.-34     	; 0x24c4 <strstr_P+0xa>
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	08 95       	ret

000024ee <memcpy>:
    24ee:	fb 01       	movw	r30, r22
    24f0:	dc 01       	movw	r26, r24
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <memcpy+0xa>
    24f4:	01 90       	ld	r0, Z+
    24f6:	0d 92       	st	X+, r0
    24f8:	41 50       	subi	r20, 0x01	; 1
    24fa:	50 40       	sbci	r21, 0x00	; 0
    24fc:	d8 f7       	brcc	.-10     	; 0x24f4 <memcpy+0x6>
    24fe:	08 95       	ret

00002500 <memset>:
    2500:	dc 01       	movw	r26, r24
    2502:	01 c0       	rjmp	.+2      	; 0x2506 <memset+0x6>
    2504:	6d 93       	st	X+, r22
    2506:	41 50       	subi	r20, 0x01	; 1
    2508:	50 40       	sbci	r21, 0x00	; 0
    250a:	e0 f7       	brcc	.-8      	; 0x2504 <memset+0x4>
    250c:	08 95       	ret

0000250e <strchr>:
    250e:	fc 01       	movw	r30, r24
    2510:	81 91       	ld	r24, Z+
    2512:	86 17       	cp	r24, r22
    2514:	21 f0       	breq	.+8      	; 0x251e <strchr+0x10>
    2516:	88 23       	and	r24, r24
    2518:	d9 f7       	brne	.-10     	; 0x2510 <strchr+0x2>
    251a:	99 27       	eor	r25, r25
    251c:	08 95       	ret
    251e:	31 97       	sbiw	r30, 0x01	; 1
    2520:	cf 01       	movw	r24, r30
    2522:	08 95       	ret

00002524 <__mulhi_const_10>:
    2524:	bc 01       	movw	r22, r24
    2526:	88 0f       	add	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	86 0f       	add	r24, r22
    2530:	97 1f       	adc	r25, r23
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	08 95       	ret

00002538 <__ctype_isfalse>:
    2538:	99 27       	eor	r25, r25
    253a:	88 27       	eor	r24, r24

0000253c <__ctype_istrue>:
    253c:	08 95       	ret

0000253e <__mulsidi3>:
    253e:	68 94       	set
    2540:	00 13       	cpse	r16, r16

00002542 <__umulsidi3>:
    2542:	e8 94       	clt
    2544:	a0 e0       	ldi	r26, 0x00	; 0
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	e7 ea       	ldi	r30, 0xA7	; 167
    254a:	f2 e1       	ldi	r31, 0x12	; 18
    254c:	1d c0       	rjmp	.+58     	; 0x2588 <__prologue_saves__+0x10>
    254e:	ef ef       	ldi	r30, 0xFF	; 255
    2550:	e7 f9       	bld	r30, 7
    2552:	59 01       	movw	r10, r18
    2554:	6a 01       	movw	r12, r20
    2556:	5e 23       	and	r21, r30
    2558:	55 0f       	add	r21, r21
    255a:	ee 08       	sbc	r14, r14
    255c:	fe 2c       	mov	r15, r14
    255e:	87 01       	movw	r16, r14
    2560:	9b 01       	movw	r18, r22
    2562:	ac 01       	movw	r20, r24
    2564:	9e 23       	and	r25, r30
    2566:	99 0f       	add	r25, r25
    2568:	66 0b       	sbc	r22, r22
    256a:	76 2f       	mov	r23, r22
    256c:	cb 01       	movw	r24, r22
    256e:	3b d0       	rcall	.+118    	; 0x25e6 <__muldi3>
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	ea e0       	ldi	r30, 0x0A	; 10
    2576:	24 c0       	rjmp	.+72     	; 0x25c0 <__epilogue_restores__+0x10>

00002578 <__prologue_saves__>:
    2578:	2f 92       	push	r2
    257a:	3f 92       	push	r3
    257c:	4f 92       	push	r4
    257e:	5f 92       	push	r5
    2580:	6f 92       	push	r6
    2582:	7f 92       	push	r7
    2584:	8f 92       	push	r8
    2586:	9f 92       	push	r9
    2588:	af 92       	push	r10
    258a:	bf 92       	push	r11
    258c:	cf 92       	push	r12
    258e:	df 92       	push	r13
    2590:	ef 92       	push	r14
    2592:	ff 92       	push	r15
    2594:	0f 93       	push	r16
    2596:	1f 93       	push	r17
    2598:	cf 93       	push	r28
    259a:	df 93       	push	r29
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
    25a0:	ca 1b       	sub	r28, r26
    25a2:	db 0b       	sbc	r29, r27
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	de bf       	out	0x3e, r29	; 62
    25aa:	0f be       	out	0x3f, r0	; 63
    25ac:	cd bf       	out	0x3d, r28	; 61
    25ae:	09 94       	ijmp

000025b0 <__epilogue_restores__>:
    25b0:	2a 88       	ldd	r2, Y+18	; 0x12
    25b2:	39 88       	ldd	r3, Y+17	; 0x11
    25b4:	48 88       	ldd	r4, Y+16	; 0x10
    25b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    25b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    25ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    25bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    25be:	9b 84       	ldd	r9, Y+11	; 0x0b
    25c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    25c2:	b9 84       	ldd	r11, Y+9	; 0x09
    25c4:	c8 84       	ldd	r12, Y+8	; 0x08
    25c6:	df 80       	ldd	r13, Y+7	; 0x07
    25c8:	ee 80       	ldd	r14, Y+6	; 0x06
    25ca:	fd 80       	ldd	r15, Y+5	; 0x05
    25cc:	0c 81       	ldd	r16, Y+4	; 0x04
    25ce:	1b 81       	ldd	r17, Y+3	; 0x03
    25d0:	aa 81       	ldd	r26, Y+2	; 0x02
    25d2:	b9 81       	ldd	r27, Y+1	; 0x01
    25d4:	ce 0f       	add	r28, r30
    25d6:	d1 1d       	adc	r29, r1
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	de bf       	out	0x3e, r29	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	cd bf       	out	0x3d, r28	; 61
    25e2:	ed 01       	movw	r28, r26
    25e4:	08 95       	ret

000025e6 <__muldi3>:
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	9f 92       	push	r9
    25ec:	a0 e4       	ldi	r26, 0x40	; 64
    25ee:	9a 2e       	mov	r9, r26
    25f0:	00 24       	eor	r0, r0
    25f2:	d0 01       	movw	r26, r0
    25f4:	e0 01       	movw	r28, r0
    25f6:	f0 01       	movw	r30, r0
    25f8:	16 95       	lsr	r17
    25fa:	07 95       	ror	r16
    25fc:	f7 94       	ror	r15
    25fe:	e7 94       	ror	r14
    2600:	d7 94       	ror	r13
    2602:	c7 94       	ror	r12
    2604:	b7 94       	ror	r11
    2606:	a7 94       	ror	r10
    2608:	48 f4       	brcc	.+18     	; 0x261c <__muldi3+0x36>
    260a:	10 68       	ori	r17, 0x80	; 128
    260c:	a2 0f       	add	r26, r18
    260e:	b3 1f       	adc	r27, r19
    2610:	c4 1f       	adc	r28, r20
    2612:	d5 1f       	adc	r29, r21
    2614:	e6 1f       	adc	r30, r22
    2616:	f7 1f       	adc	r31, r23
    2618:	08 1e       	adc	r0, r24
    261a:	19 1e       	adc	r1, r25
    261c:	22 0f       	add	r18, r18
    261e:	33 1f       	adc	r19, r19
    2620:	44 1f       	adc	r20, r20
    2622:	55 1f       	adc	r21, r21
    2624:	66 1f       	adc	r22, r22
    2626:	77 1f       	adc	r23, r23
    2628:	88 1f       	adc	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	9a 94       	dec	r9
    262e:	21 f7       	brne	.-56     	; 0x25f8 <__muldi3+0x12>
    2630:	9d 01       	movw	r18, r26
    2632:	ae 01       	movw	r20, r28
    2634:	bf 01       	movw	r22, r30
    2636:	c0 01       	movw	r24, r0
    2638:	11 24       	eor	r1, r1
    263a:	9f 90       	pop	r9
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <_exit>:
    2642:	f8 94       	cli

00002644 <__stop_program>:
    2644:	ff cf       	rjmp	.-2      	; 0x2644 <__stop_program>
