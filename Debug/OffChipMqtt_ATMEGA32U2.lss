
OffChipMqtt_ATMEGA32U2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00002470  00002504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002470  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f7  00800112  00800112  00002516  2**0
                  ALLOC
  3 .noinit       00000002  00800309  00800309  00002516  2**0
                  ALLOC
  4 .stab         0000d0c8  00000000  00000000  00002518  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000126f7  00000000  00000000  0000f5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000030  00000000  00000000  00021cd7  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00021d08  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	a9 c0       	rjmp	.+338    	; 0x154 <__ctors_end>
       2:	00 00       	nop
       4:	cf c0       	rjmp	.+414    	; 0x1a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c0       	rjmp	.+410    	; 0x1a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c0       	rjmp	.+406    	; 0x1a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c0       	rjmp	.+402    	; 0x1a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c0       	rjmp	.+398    	; 0x1a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c0       	rjmp	.+394    	; 0x1a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c0       	rjmp	.+390    	; 0x1a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c0       	rjmp	.+386    	; 0x1a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c0       	rjmp	.+382    	; 0x1a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	bd c0       	rjmp	.+378    	; 0x1a4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bb c0       	rjmp	.+374    	; 0x1a4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b9 c0       	rjmp	.+370    	; 0x1a4 <__bad_interrupt>
      32:	00 00       	nop
      34:	b7 c0       	rjmp	.+366    	; 0x1a4 <__bad_interrupt>
      36:	00 00       	nop
      38:	b5 c0       	rjmp	.+362    	; 0x1a4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b3 c0       	rjmp	.+358    	; 0x1a4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b1 c0       	rjmp	.+354    	; 0x1a4 <__bad_interrupt>
      42:	00 00       	nop
      44:	af c0       	rjmp	.+350    	; 0x1a4 <__bad_interrupt>
      46:	00 00       	nop
      48:	ad c0       	rjmp	.+346    	; 0x1a4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ab c0       	rjmp	.+342    	; 0x1a4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a9 c0       	rjmp	.+338    	; 0x1a4 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__vector_21>
      58:	a5 c0       	rjmp	.+330    	; 0x1a4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__vector_23>
      60:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__vector_24>
      64:	9f c0       	rjmp	.+318    	; 0x1a4 <__bad_interrupt>
      66:	00 00       	nop
      68:	9d c0       	rjmp	.+314    	; 0x1a4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9b c0       	rjmp	.+310    	; 0x1a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c0       	rjmp	.+306    	; 0x1a4 <__bad_interrupt>
	...

00000074 <__trampolines_end>:
      74:	70 61       	ori	r23, 0x10	; 16
      76:	74 74       	andi	r23, 0x44	; 68
      78:	65 72       	andi	r22, 0x25	; 37
      7a:	6e 00       	.word	0x006e	; ????

0000007c <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_11>:
      7c:	70 69 78 65 6c 73 00                                pixels.

00000083 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_10>:
      83:	6f 66 66 00                                         off.

00000087 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_9>:
      87:	64 65 63 61 79 00                                   decay.

0000008d <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_8>:
      8d:	73 75 73 74 61 69 6e 00                             sustain.

00000095 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_7>:
      95:	61 74 74 61 63 6b 00                                attack.

0000009c <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_6>:
      9c:	64 65 6e 73 69 74 79 00                             density.

000000a4 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_5>:
      a4:	73 6d 6f 64 65 00                                   smode.

000000aa <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_4>:
      aa:	65 66 66 65 63 74 00                                effect.

000000b1 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_3>:
      b1:	63 6d 6f 64 65 00                                   cmode.

000000b7 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_2>:
      b7:	6f 72 64 65 72 00                                   order.

000000bd <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_1>:
      bd:	74 63 6f 6c 6f 72 00                                tcolor.

000000c4 <_ZZN6MyMqtt7OnTopicEPcS0_E3__c_0>:
      c4:	73 63 6f 6c 6f 72 00                                scolor.

000000cb <_ZZN6MyMqtt7OnTopicEPcS0_E3__c>:
      cb:	70 63 6f 6c 6f 72 00                                pcolor.

000000d2 <_ZZN6MyMqtt9MqttTasksEvE3__c_8>:
      d2:	22 00                                               ".

000000d4 <_ZZN6MyMqtt9MqttTasksEvE3__c_7>:
      d4:	22 00                                               ".

000000d6 <_ZZN6MyMqtt9MqttTasksEvE3__c_6>:
      d6:	2b 41 54 2b 54 4f 50 49 43 3d 22 00                 +AT+TOPIC=".

000000e2 <_ZZN6MyMqtt9MqttTasksEvE3__c_5>:
      e2:	45 72 72 6f 72 00                                   Error.

000000e8 <_ZZN6MyMqtt9MqttTasksEvE3__c_4>:
      e8:	4f 4b 00                                            OK.

000000eb <_ZZN6MyMqtt9MqttTasksEvE3__c_3>:
      eb:	2b 57 49 46 49 20 44 69 73 63 6f 6e 6e 65 63 74     +WIFI Disconnect
      fb:	65 64 00                                            ed.

000000fe <_ZZN6MyMqtt9MqttTasksEvE3__c_2>:
      fe:	2b 57 49 46 49 20 43 6f 6e 6e 65 63 74 65 64 00     +WIFI Connected.

0000010e <_ZZN6MyMqtt9MqttTasksEvE3__c_1>:
     10e:	2b 4d 51 54 54 20 44 69 73 63 6f 6e 6e 65 63 74     +MQTT Disconnect
     11e:	65 64 00                                            ed.

00000121 <_ZZN6MyMqtt9MqttTasksEvE3__c_0>:
     121:	2b 4d 51 54 54 20 43 6f 6e 6e 65 63 74 65 64 00     +MQTT Connected.

00000131 <_ZZN6MyMqtt9MqttTasksEvE3__c>:
     131:	0d 0a 00                                            ...

00000134 <_ZZN6MyMqtt5beginEvE3__c>:
     134:	53 79 73 74 65 6d 20 69 6e 69 74 20 64 6f 6e 65     System init done
     144:	2e 0d 0a 52 65 61 64 79 0d 0a 00 00                 ...Ready....

00000150 <__ctors_start>:
     150:	ff 0d       	add	r31, r15
     152:	74 0f       	add	r23, r20

00000154 <__ctors_end>:
     154:	11 24       	eor	r1, r1
     156:	1f be       	out	0x3f, r1	; 63
     158:	cf ef       	ldi	r28, 0xFF	; 255
     15a:	d4 e0       	ldi	r29, 0x04	; 4
     15c:	de bf       	out	0x3e, r29	; 62
     15e:	cd bf       	out	0x3d, r28	; 61

00000160 <__do_copy_data>:
     160:	11 e0       	ldi	r17, 0x01	; 1
     162:	a0 e0       	ldi	r26, 0x00	; 0
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	e0 e7       	ldi	r30, 0x70	; 112
     168:	f4 e2       	ldi	r31, 0x24	; 36
     16a:	02 c0       	rjmp	.+4      	; 0x170 <__do_copy_data+0x10>
     16c:	05 90       	lpm	r0, Z+
     16e:	0d 92       	st	X+, r0
     170:	a2 31       	cpi	r26, 0x12	; 18
     172:	b1 07       	cpc	r27, r17
     174:	d9 f7       	brne	.-10     	; 0x16c <__do_copy_data+0xc>

00000176 <__do_clear_bss>:
     176:	23 e0       	ldi	r18, 0x03	; 3
     178:	a2 e1       	ldi	r26, 0x12	; 18
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
     17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
     180:	a9 30       	cpi	r26, 0x09	; 9
     182:	b2 07       	cpc	r27, r18
     184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>

00000186 <__do_global_ctors>:
     186:	10 e0       	ldi	r17, 0x00	; 0
     188:	ca ea       	ldi	r28, 0xAA	; 170
     18a:	d0 e0       	ldi	r29, 0x00	; 0
     18c:	04 c0       	rjmp	.+8      	; 0x196 <__do_global_ctors+0x10>
     18e:	21 97       	sbiw	r28, 0x01	; 1
     190:	fe 01       	movw	r30, r28
     192:	0e 94 3c 11 	call	0x2278	; 0x2278 <__tablejump2__>
     196:	c8 3a       	cpi	r28, 0xA8	; 168
     198:	d1 07       	cpc	r29, r17
     19a:	c9 f7       	brne	.-14     	; 0x18e <__do_global_ctors+0x8>
     19c:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <main>
     1a0:	0c 94 36 12 	jmp	0x246c	; 0x246c <_exit>

000001a4 <__bad_interrupt>:
     1a4:	2d cf       	rjmp	.-422    	; 0x0 <__vectors>

000001a6 <_ZN9NeoPixels10initCandleEv>:
#include "USBStream.h"

#define CANDLE_FLICKER_RATE m_cfg.m_sustain

void NeoPixels::initCandle()
	{
     1a6:	fc 01       	movw	r30, r24
		memset(m_arry, 0, sizeof(m_arry));
     1a8:	c9 96       	adiw	r24, 0x39	; 57
     1aa:	26 e9       	ldi	r18, 0x96	; 150
     1ac:	dc 01       	movw	r26, r24
     1ae:	1d 92       	st	X+, r1
     1b0:	2a 95       	dec	r18
     1b2:	e9 f7       	brne	.-6      	; 0x1ae <_ZN9NeoPixels10initCandleEv+0x8>
		m_tmrs[0] = CANDLE_FLICKER_RATE;
     1b4:	df 01       	movw	r26, r30
     1b6:	a4 52       	subi	r26, 0x24	; 36
     1b8:	bf 4f       	sbci	r27, 0xFF	; 255
     1ba:	24 81       	ldd	r18, Z+4	; 0x04
     1bc:	2c 93       	st	X, r18
		sendPixels(m_arry,m_cfg.m_pixels);
     1be:	60 81       	ld	r22, Z
     1c0:	71 81       	ldd	r23, Z+1	; 0x01
     1c2:	e8 c2       	rjmp	.+1488   	; 0x794 <_Z10sendPixelsP13NeoPixelColorj>

000001c4 <_ZN9NeoPixels12CandleEffectEv>:
	}

void NeoPixels::CandleEffect()
	{
     1c4:	2f 92       	push	r2
     1c6:	3f 92       	push	r3
     1c8:	4f 92       	push	r4
     1ca:	5f 92       	push	r5
     1cc:	6f 92       	push	r6
     1ce:	7f 92       	push	r7
     1d0:	8f 92       	push	r8
     1d2:	9f 92       	push	r9
     1d4:	af 92       	push	r10
     1d6:	bf 92       	push	r11
     1d8:	cf 92       	push	r12
     1da:	df 92       	push	r13
     1dc:	ef 92       	push	r14
     1de:	ff 92       	push	r15
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	00 d0       	rcall	.+0      	; 0x1ea <_ZN9NeoPixels12CandleEffectEv+0x26>
     1ea:	00 d0       	rcall	.+0      	; 0x1ec <_ZN9NeoPixels12CandleEffectEv+0x28>
     1ec:	1f 92       	push	r1
     1ee:	cd b7       	in	r28, 0x3d	; 61
     1f0:	de b7       	in	r29, 0x3e	; 62
     1f2:	6c 01       	movw	r12, r24
		m_tmrs[0]--;
     1f4:	1c 01       	movw	r2, r24
     1f6:	8c ed       	ldi	r24, 0xDC	; 220
     1f8:	28 0e       	add	r2, r24
     1fa:	31 1c       	adc	r3, r1
     1fc:	f1 01       	movw	r30, r2
     1fe:	90 81       	ld	r25, Z
     200:	91 50       	subi	r25, 0x01	; 1
     202:	90 83       	st	Z, r25
		if(m_tmrs[0] == 0)
     204:	91 11       	cpse	r25, r1
     206:	4f c0       	rjmp	.+158    	; 0x2a6 <_ZN9NeoPixels12CandleEffectEv+0xe2>
			{
			for(size_t i=0;i<m_cfg.m_pixels;i++)
     208:	f6 01       	movw	r30, r12
     20a:	60 81       	ld	r22, Z
     20c:	71 81       	ldd	r23, Z+1	; 0x01
     20e:	61 15       	cp	r22, r1
     210:	71 05       	cpc	r23, r1
     212:	09 f4       	brne	.+2      	; 0x216 <_ZN9NeoPixels12CandleEffectEv+0x52>
     214:	3d c0       	rjmp	.+122    	; 0x290 <_ZN9NeoPixels12CandleEffectEv+0xcc>
     216:	56 01       	movw	r10, r12
     218:	9f e0       	ldi	r25, 0x0F	; 15
     21a:	a9 0e       	add	r10, r25
     21c:	b1 1c       	adc	r11, r1
     21e:	f6 01       	movw	r30, r12
     220:	f9 96       	adiw	r30, 0x39	; 57
     222:	fd 83       	std	Y+5, r31	; 0x05
     224:	ec 83       	std	Y+4, r30	; 0x04
     226:	7f 01       	movw	r14, r30
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	10 e0       	ldi	r17, 0x00	; 0
				{
					unsigned int scale = random() % 24;
     22c:	98 e1       	ldi	r25, 0x18	; 24
     22e:	49 2e       	mov	r4, r25
     230:	51 2c       	mov	r5, r1
     232:	61 2c       	mov	r6, r1
     234:	71 2c       	mov	r7, r1
					if(scale > 12)
						scale = 255;
					else
						{
							scale = scale * 256 / 12;
     236:	2c e0       	ldi	r18, 0x0C	; 12
     238:	82 2e       	mov	r8, r18
     23a:	91 2c       	mov	r9, r1
     23c:	1e c0       	rjmp	.+60     	; 0x27a <_ZN9NeoPixels12CandleEffectEv+0xb6>
     23e:	96 2f       	mov	r25, r22
     240:	88 27       	eor	r24, r24
     242:	b4 01       	movw	r22, r8
     244:	0e 94 83 10 	call	0x2106	; 0x2106 <__udivmodhi4>
							if(scale > 255)
     248:	61 15       	cp	r22, r1
     24a:	f1 e0       	ldi	r31, 0x01	; 1
     24c:	7f 07       	cpc	r23, r31
     24e:	f1 f0       	breq	.+60     	; 0x28c <_ZN9NeoPixels12CandleEffectEv+0xc8>
     250:	46 2f       	mov	r20, r22
								scale = 255;
						}
					m_arry[i] = m_cfg.m_pattern[0] * (byte)(scale);
     252:	b5 01       	movw	r22, r10
     254:	ce 01       	movw	r24, r28
     256:	01 96       	adiw	r24, 0x01	; 1
     258:	36 d6       	rcall	.+3180   	; 0xec6 <_ZN13NeoPixelColormlEh>
     25a:	be 01       	movw	r22, r28
     25c:	6f 5f       	subi	r22, 0xFF	; 255
     25e:	7f 4f       	sbci	r23, 0xFF	; 255
     260:	c7 01       	movw	r24, r14
     262:	a3 d4       	rcall	.+2374   	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
     264:	0f 5f       	subi	r16, 0xFF	; 255
     266:	1f 4f       	sbci	r17, 0xFF	; 255
void NeoPixels::CandleEffect()
	{
		m_tmrs[0]--;
		if(m_tmrs[0] == 0)
			{
			for(size_t i=0;i<m_cfg.m_pixels;i++)
     268:	f6 01       	movw	r30, r12
     26a:	60 81       	ld	r22, Z
     26c:	71 81       	ldd	r23, Z+1	; 0x01
     26e:	f3 e0       	ldi	r31, 0x03	; 3
     270:	ef 0e       	add	r14, r31
     272:	f1 1c       	adc	r15, r1
     274:	06 17       	cp	r16, r22
     276:	17 07       	cpc	r17, r23
     278:	78 f4       	brcc	.+30     	; 0x298 <_ZN9NeoPixels12CandleEffectEv+0xd4>
     27a:	0e 94 b2 11 	call	0x2364	; 0x2364 <random>
				{
					unsigned int scale = random() % 24;
     27e:	a3 01       	movw	r20, r6
     280:	92 01       	movw	r18, r4
     282:	0e 94 cc 10 	call	0x2198	; 0x2198 <__divmodsi4>
     286:	6d 30       	cpi	r22, 0x0D	; 13
     288:	71 05       	cpc	r23, r1
					if(scale > 12)
     28a:	c8 f2       	brcs	.-78     	; 0x23e <_ZN9NeoPixels12CandleEffectEv+0x7a>
     28c:	4f ef       	ldi	r20, 0xFF	; 255
     28e:	e1 cf       	rjmp	.-62     	; 0x252 <_ZN9NeoPixels12CandleEffectEv+0x8e>
     290:	c6 01       	movw	r24, r12
     292:	c9 96       	adiw	r24, 0x39	; 57
     294:	9d 83       	std	Y+5, r25	; 0x05
     296:	8c 83       	std	Y+4, r24	; 0x04
     298:	8c 81       	ldd	r24, Y+4	; 0x04
     29a:	9d 81       	ldd	r25, Y+5	; 0x05
							if(scale > 255)
								scale = 255;
						}
					m_arry[i] = m_cfg.m_pattern[0] * (byte)(scale);
				}
			sendPixels(m_arry,m_cfg.m_pixels);
     29c:	7b d2       	rcall	.+1270   	; 0x794 <_Z10sendPixelsP13NeoPixelColorj>
     29e:	f6 01       	movw	r30, r12
     2a0:	84 81       	ldd	r24, Z+4	; 0x04
     2a2:	f1 01       	movw	r30, r2
			m_tmrs[0] = CANDLE_FLICKER_RATE;
     2a4:	80 83       	st	Z, r24
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
			}
	}
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	1f 91       	pop	r17
     2b6:	0f 91       	pop	r16
     2b8:	ff 90       	pop	r15
     2ba:	ef 90       	pop	r14
     2bc:	df 90       	pop	r13
     2be:	cf 90       	pop	r12
     2c0:	bf 90       	pop	r11
     2c2:	af 90       	pop	r10
     2c4:	9f 90       	pop	r9
     2c6:	8f 90       	pop	r8
     2c8:	7f 90       	pop	r7
     2ca:	6f 90       	pop	r6
     2cc:	5f 90       	pop	r5
     2ce:	4f 90       	pop	r4
     2d0:	3f 90       	pop	r3
     2d2:	2f 90       	pop	r2
     2d4:	08 95       	ret

000002d6 <_ZN9NeoConfigC1Ev>:
#include "utilities.h"
#include "NeoPixels.h"
#include "USBStream.h"

////////////////// NeoConfig Class //////////////////////
NeoConfig::NeoConfig()
     2d6:	af 92       	push	r10
     2d8:	bf 92       	push	r11
     2da:	cf 92       	push	r12
     2dc:	df 92       	push	r13
     2de:	ef 92       	push	r14
     2e0:	ff 92       	push	r15
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	00 d0       	rcall	.+0      	; 0x2ec <_ZN9NeoConfigC1Ev+0x16>
     2ec:	1f 92       	push	r1
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
     2f2:	7c 01       	movw	r14, r24
     2f4:	5c 01       	movw	r10, r24
     2f6:	8f e0       	ldi	r24, 0x0F	; 15
     2f8:	a8 0e       	add	r10, r24
     2fa:	b1 1c       	adc	r11, r1
     2fc:	85 01       	movw	r16, r10
     2fe:	67 01       	movw	r12, r14
     300:	ed e2       	ldi	r30, 0x2D	; 45
     302:	ce 0e       	add	r12, r30
     304:	d1 1c       	adc	r13, r1
     306:	c8 01       	movw	r24, r16
     308:	1c d4       	rcall	.+2104   	; 0xb42 <_ZN13NeoPixelColorC1Ev>
     30a:	0d 5f       	subi	r16, 0xFD	; 253
     30c:	1f 4f       	sbci	r17, 0xFF	; 255
     30e:	0c 15       	cp	r16, r12
     310:	1d 05       	cpc	r17, r13
     312:	c9 f7       	brne	.-14     	; 0x306 <_ZN9NeoConfigC1Ev+0x30>
     314:	82 e3       	ldi	r24, 0x32	; 50
	{
		m_pixels = PIXELS;
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	f7 01       	movw	r30, r14
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	80 83       	st	Z, r24
     31e:	22 e0       	ldi	r18, 0x02	; 2
		m_effect = effectTwinkle;
     320:	22 87       	std	Z+10, r18	; 0x0a
     322:	13 86       	std	Z+11, r1	; 0x0b
		m_colormode = colorModeSingle;
     324:	14 86       	std	Z+12, r1	; 0x0c
		m_strandmode = Strand;
     326:	24 e6       	ldi	r18, 0x64	; 100
		m_off = 100;
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	31 87       	std	Z+9, r19	; 0x09
     32c:	20 87       	std	Z+8, r18	; 0x08
     32e:	2a e0       	ldi	r18, 0x0A	; 10
		m_attack = 10;
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	33 83       	std	Z+3, r19	; 0x03
     334:	22 83       	std	Z+2, r18	; 0x02
     336:	15 82       	std	Z+5, r1	; 0x05
		m_sustain = 0;
     338:	14 82       	std	Z+4, r1	; 0x04
     33a:	97 83       	std	Z+7, r25	; 0x07
		m_decay = 50;
     33c:	86 83       	std	Z+6, r24	; 0x06
     33e:	81 e2       	ldi	r24, 0x21	; 33
		m_density = 33;
     340:	85 87       	std	Z+13, r24	; 0x0d
     342:	83 e0       	ldi	r24, 0x03	; 3
		m_pattern_size = 3;
     344:	86 87       	std	Z+14, r24	; 0x0e
     346:	20 e0       	ldi	r18, 0x00	; 0
		m_pattern[0] = NeoPixelColor(255,0,0);
     348:	40 e0       	ldi	r20, 0x00	; 0
     34a:	6f ef       	ldi	r22, 0xFF	; 255
     34c:	ce 01       	movw	r24, r28
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	05 d4       	rcall	.+2058   	; 0xb5c <_ZN13NeoPixelColorC1Ehhh>
     352:	be 01       	movw	r22, r28
     354:	6f 5f       	subi	r22, 0xFF	; 255
     356:	7f 4f       	sbci	r23, 0xFF	; 255
     358:	c5 01       	movw	r24, r10
     35a:	27 d4       	rcall	.+2126   	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	4f ef       	ldi	r20, 0xFF	; 255
     360:	60 e0       	ldi	r22, 0x00	; 0
		m_pattern[1] = NeoPixelColor(0,255,0);
     362:	ce 01       	movw	r24, r28
     364:	01 96       	adiw	r24, 0x01	; 1
     366:	fa d3       	rcall	.+2036   	; 0xb5c <_ZN13NeoPixelColorC1Ehhh>
     368:	be 01       	movw	r22, r28
     36a:	6f 5f       	subi	r22, 0xFF	; 255
     36c:	7f 4f       	sbci	r23, 0xFF	; 255
     36e:	c7 01       	movw	r24, r14
     370:	42 96       	adiw	r24, 0x12	; 18
     372:	1b d4       	rcall	.+2102   	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
     374:	2f ef       	ldi	r18, 0xFF	; 255
     376:	40 e0       	ldi	r20, 0x00	; 0
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	ce 01       	movw	r24, r28
     37c:	01 96       	adiw	r24, 0x01	; 1
		m_pattern[2] = NeoPixelColor(0,0,255);
     37e:	ee d3       	rcall	.+2012   	; 0xb5c <_ZN13NeoPixelColorC1Ehhh>
     380:	be 01       	movw	r22, r28
     382:	6f 5f       	subi	r22, 0xFF	; 255
     384:	7f 4f       	sbci	r23, 0xFF	; 255
     386:	c7 01       	movw	r24, r14
     388:	45 96       	adiw	r24, 0x15	; 21
     38a:	0f d4       	rcall	.+2078   	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
	}
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	bf 90       	pop	r11
     3a4:	af 90       	pop	r10
     3a6:	08 95       	ret

000003a8 <_ZN9NeoPixels16initTheaterChaseEv>:
#include "utilities.h"
#include "NeoPixels.h"
#include "USBStream.h"

void NeoPixels::initTheaterChase()
	{
     3a8:	fc 01       	movw	r30, r24
		spacing = 100 / m_cfg.m_density;
     3aa:	65 85       	ldd	r22, Z+13	; 0x0d
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	84 e6       	ldi	r24, 0x64	; 100
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 97 10 	call	0x212e	; 0x212e <__divmodhi4>
		if (spacing < 2)
     3b6:	62 30       	cpi	r22, 0x02	; 2
     3b8:	71 05       	cpc	r23, r1
     3ba:	64 f0       	brlt	.+24     	; 0x3d4 <_ZN9NeoPixels16initTheaterChaseEv+0x2c>
#include "NeoPixels.h"
#include "USBStream.h"

void NeoPixels::initTheaterChase()
	{
		spacing = 100 / m_cfg.m_density;
     3bc:	70 af       	std	Z+56, r23	; 0x38
     3be:	67 ab       	std	Z+55, r22	; 0x37
		if (spacing < 2)
			spacing = 2;

		q = 0;
     3c0:	14 aa       	std	Z+52, r1	; 0x34
     3c2:	13 aa       	std	Z+51, r1	; 0x33
		step = 0;
     3c4:	16 aa       	std	Z+54, r1	; 0x36
     3c6:	15 aa       	std	Z+53, r1	; 0x35
		m_tmrs[0] = m_cfg.m_sustain;
     3c8:	df 01       	movw	r26, r30
     3ca:	a4 52       	subi	r26, 0x24	; 36
     3cc:	bf 4f       	sbci	r27, 0xFF	; 255
     3ce:	84 81       	ldd	r24, Z+4	; 0x04
     3d0:	8c 93       	st	X, r24
     3d2:	08 95       	ret

void NeoPixels::initTheaterChase()
	{
		spacing = 100 / m_cfg.m_density;
		if (spacing < 2)
			spacing = 2;
     3d4:	82 e0       	ldi	r24, 0x02	; 2
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	90 af       	std	Z+56, r25	; 0x38
     3da:	87 ab       	std	Z+55, r24	; 0x37
     3dc:	f1 cf       	rjmp	.-30     	; 0x3c0 <_ZN9NeoPixels16initTheaterChaseEv+0x18>

000003de <_ZN9NeoPixels18TheaterChaseEffectEv>:
		m_tmrs[0] = m_cfg.m_sustain;

	}

void NeoPixels::TheaterChaseEffect()
	{
     3de:	4f 92       	push	r4
     3e0:	5f 92       	push	r5
     3e2:	6f 92       	push	r6
     3e4:	7f 92       	push	r7
     3e6:	8f 92       	push	r8
     3e8:	9f 92       	push	r9
     3ea:	af 92       	push	r10
     3ec:	bf 92       	push	r11
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	00 d0       	rcall	.+0      	; 0x400 <_ZN9NeoPixels18TheaterChaseEffectEv+0x22>
     400:	1f 92       	push	r1
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	8c 01       	movw	r16, r24
		if(m_tmrs[0] > 0)
     408:	5c 01       	movw	r10, r24
     40a:	8c ed       	ldi	r24, 0xDC	; 220
     40c:	a8 0e       	add	r10, r24
     40e:	b1 1c       	adc	r11, r1
     410:	f5 01       	movw	r30, r10
     412:	90 81       	ld	r25, Z
     414:	91 11       	cpse	r25, r1
     416:	bc c0       	rjmp	.+376    	; 0x590 <__stack+0x91>
			m_tmrs[0] --;
		else
			{
				switch(m_cfg.m_colormode)
     418:	f8 01       	movw	r30, r16
     41a:	83 85       	ldd	r24, Z+11	; 0x0b
     41c:	82 30       	cpi	r24, 0x02	; 2
     41e:	09 f4       	brne	.+2      	; 0x422 <_ZN9NeoPixels18TheaterChaseEffectEv+0x44>
     420:	66 c0       	rjmp	.+204    	; 0x4ee <_ZN9NeoPixels18TheaterChaseEffectEv+0x110>
					 *
					 * Each Pixel's intensity is therefore a function of the offset time and the period of attack/decay
					 * 		I = PT * offset * m_pattern[0] / AD
					 *
					 */
					for (size_t i = 0; i < m_cfg.m_pixels; i++)
     422:	f8 01       	movw	r30, r16
     424:	60 81       	ld	r22, Z
     426:	71 81       	ldd	r23, Z+1	; 0x01
     428:	61 15       	cp	r22, r1
     42a:	71 05       	cpc	r23, r1
     42c:	09 f4       	brne	.+2      	; 0x430 <_ZN9NeoPixels18TheaterChaseEffectEv+0x52>
     42e:	b3 c0       	rjmp	.+358    	; 0x596 <__stack+0x97>
     430:	38 01       	movw	r6, r16
     432:	f9 e3       	ldi	r31, 0x39	; 57
     434:	6f 0e       	add	r6, r31
     436:	71 1c       	adc	r7, r1
     438:	63 01       	movw	r12, r6
     43a:	e1 2c       	mov	r14, r1
     43c:	f1 2c       	mov	r15, r1
									else
										{
											byte b = step - q;
											if(b < m_cfg.m_attack)
												{
													b = (255/(b));
     43e:	44 24       	eor	r4, r4
     440:	4a 94       	dec	r4
     442:	51 2c       	mov	r5, r1
													m_arry[i] = m_cfg.m_pattern[0] * b;
     444:	48 01       	movw	r8, r16
     446:	8f e0       	ldi	r24, 0x0F	; 15
     448:	88 0e       	add	r8, r24
     44a:	91 1c       	adc	r9, r1
     44c:	2f c0       	rjmp	.+94     	; 0x4ac <_ZN9NeoPixels18TheaterChaseEffectEv+0xce>
								m_arry[i] = (m_cfg.m_pattern[0]);//NeoPixelColor(255,0,0);
							else
								{
									if(step < q)
										{
											byte b = q - step;
     44e:	68 1b       	sub	r22, r24
											if(b < m_cfg.m_decay)
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	f8 01       	movw	r30, r16
     454:	86 81       	ldd	r24, Z+6	; 0x06
     456:	97 81       	ldd	r25, Z+7	; 0x07
     458:	68 17       	cp	r22, r24
     45a:	79 07       	cpc	r23, r25
     45c:	e0 f5       	brcc	.+120    	; 0x4d6 <_ZN9NeoPixels18TheaterChaseEffectEv+0xf8>
									else
										{
											byte b = step - q;
											if(b < m_cfg.m_attack)
												{
													b = (255/(b));
     45e:	c2 01       	movw	r24, r4
     460:	0e 94 97 10 	call	0x212e	; 0x212e <__divmodhi4>
     464:	46 2f       	mov	r20, r22
													m_arry[i] = m_cfg.m_pattern[0] * b;
     466:	b4 01       	movw	r22, r8
     468:	ce 01       	movw	r24, r28
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	2c d5       	rcall	.+2648   	; 0xec6 <_ZN13NeoPixelColormlEh>
     46e:	be 01       	movw	r22, r28
     470:	6f 5f       	subi	r22, 0xFF	; 255
     472:	7f 4f       	sbci	r23, 0xFF	; 255
     474:	c6 01       	movw	r24, r12
     476:	99 d3       	rcall	.+1842   	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
     478:	f8 01       	movw	r30, r16
     47a:	85 a9       	ldd	r24, Z+53	; 0x35
												}
										}

								}

							step++;
     47c:	96 a9       	ldd	r25, Z+54	; 0x36
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	96 ab       	std	Z+54, r25	; 0x36
     482:	85 ab       	std	Z+53, r24	; 0x35
     484:	27 a9       	ldd	r18, Z+55	; 0x37
     486:	30 ad       	ldd	r19, Z+56	; 0x38
							if (step >= spacing)
     488:	82 17       	cp	r24, r18
     48a:	93 07       	cpc	r25, r19
     48c:	10 f0       	brcs	.+4      	; 0x492 <_ZN9NeoPixels18TheaterChaseEffectEv+0xb4>
     48e:	16 aa       	std	Z+54, r1	; 0x36
     490:	15 aa       	std	Z+53, r1	; 0x35
								step = 0;
     492:	ff ef       	ldi	r31, 0xFF	; 255
     494:	ef 1a       	sub	r14, r31
					 *
					 * Each Pixel's intensity is therefore a function of the offset time and the period of attack/decay
					 * 		I = PT * offset * m_pattern[0] / AD
					 *
					 */
					for (size_t i = 0; i < m_cfg.m_pixels; i++)
     496:	ff 0a       	sbc	r15, r31
     498:	83 e0       	ldi	r24, 0x03	; 3
     49a:	c8 0e       	add	r12, r24
     49c:	d1 1c       	adc	r13, r1
     49e:	f8 01       	movw	r30, r16
     4a0:	60 81       	ld	r22, Z
     4a2:	71 81       	ldd	r23, Z+1	; 0x01
     4a4:	e6 16       	cp	r14, r22
     4a6:	f7 06       	cpc	r15, r23
     4a8:	08 f0       	brcs	.+2      	; 0x4ac <_ZN9NeoPixels18TheaterChaseEffectEv+0xce>
     4aa:	7a c0       	rjmp	.+244    	; 0x5a0 <__stack+0xa1>
     4ac:	f8 01       	movw	r30, r16
     4ae:	85 a9       	ldd	r24, Z+53	; 0x35
						{
							if (step == q)
     4b0:	96 a9       	ldd	r25, Z+54	; 0x36
     4b2:	63 a9       	ldd	r22, Z+51	; 0x33
     4b4:	74 a9       	ldd	r23, Z+52	; 0x34
     4b6:	86 17       	cp	r24, r22
     4b8:	97 07       	cpc	r25, r23
     4ba:	09 f4       	brne	.+2      	; 0x4be <_ZN9NeoPixels18TheaterChaseEffectEv+0xe0>
     4bc:	65 c0       	rjmp	.+202    	; 0x588 <__stack+0x89>
     4be:	86 17       	cp	r24, r22
     4c0:	97 07       	cpc	r25, r23
								m_arry[i] = (m_cfg.m_pattern[0]);//NeoPixelColor(255,0,0);
							else
								{
									if(step < q)
     4c2:	28 f2       	brcs	.-118    	; 0x44e <_ZN9NeoPixels18TheaterChaseEffectEv+0x70>
     4c4:	86 1b       	sub	r24, r22
     4c6:	68 2f       	mov	r22, r24
													m_arry[i] = NeoPixelColor(0, 0, 0);
												}
										}
									else
										{
											byte b = step - q;
     4c8:	70 e0       	ldi	r23, 0x00	; 0
											if(b < m_cfg.m_attack)
     4ca:	f8 01       	movw	r30, r16
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	68 17       	cp	r22, r24
     4d2:	79 07       	cpc	r23, r25
     4d4:	20 f2       	brcs	.-120    	; 0x45e <_ZN9NeoPixels18TheaterChaseEffectEv+0x80>
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	40 e0       	ldi	r20, 0x00	; 0
													b = (255/(b));
													m_arry[i] = m_cfg.m_pattern[0] * b;
												}
											else
												{
													m_arry[i] = NeoPixelColor(0, 0, 0);
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	ce 01       	movw	r24, r28
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	3d d3       	rcall	.+1658   	; 0xb5c <_ZN13NeoPixelColorC1Ehhh>
     4e2:	be 01       	movw	r22, r28
     4e4:	6f 5f       	subi	r22, 0xFF	; 255
     4e6:	7f 4f       	sbci	r23, 0xFF	; 255
     4e8:	c6 01       	movw	r24, r12
     4ea:	5f d3       	rcall	.+1726   	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
     4ec:	c5 cf       	rjmp	.-118    	; 0x478 <_ZN9NeoPixels18TheaterChaseEffectEv+0x9a>
     4ee:	60 81       	ld	r22, Z
     4f0:	71 81       	ldd	r23, Z+1	; 0x01
     4f2:	61 15       	cp	r22, r1
     4f4:	71 05       	cpc	r23, r1
		else
			{
				switch(m_cfg.m_colormode)
					{
				case colorModePattern:
					for(size_t i=0;i<m_cfg.m_pixels;i++)
     4f6:	09 f4       	brne	.+2      	; 0x4fa <_ZN9NeoPixels18TheaterChaseEffectEv+0x11c>
     4f8:	5f c0       	rjmp	.+190    	; 0x5b8 <__stack+0xb9>
     4fa:	38 01       	movw	r6, r16
     4fc:	99 e3       	ldi	r25, 0x39	; 57
     4fe:	69 0e       	add	r6, r25
     500:	71 1c       	adc	r7, r1
     502:	63 01       	movw	r12, r6
     504:	e1 2c       	mov	r14, r1
     506:	f1 2c       	mov	r15, r1
     508:	f8 01       	movw	r30, r16
     50a:	83 a9       	ldd	r24, Z+51	; 0x33
     50c:	94 a9       	ldd	r25, Z+52	; 0x34
     50e:	8e 0d       	add	r24, r14
						{
							m_arry[i] = m_cfg.m_pattern[(i+q) % m_cfg.m_pattern_size];
     510:	9f 1d       	adc	r25, r15
     512:	66 85       	ldd	r22, Z+14	; 0x0e
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	0e 94 83 10 	call	0x2106	; 0x2106 <__udivmodhi4>
     51a:	bc 01       	movw	r22, r24
     51c:	66 0f       	add	r22, r22
     51e:	77 1f       	adc	r23, r23
     520:	68 0f       	add	r22, r24
     522:	79 1f       	adc	r23, r25
     524:	61 5f       	subi	r22, 0xF1	; 241
     526:	7f 4f       	sbci	r23, 0xFF	; 255
     528:	60 0f       	add	r22, r16
     52a:	71 1f       	adc	r23, r17
     52c:	c6 01       	movw	r24, r12
     52e:	3d d3       	rcall	.+1658   	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
     530:	ff ef       	ldi	r31, 0xFF	; 255
     532:	ef 1a       	sub	r14, r31
     534:	ff 0a       	sbc	r15, r31
     536:	f8 01       	movw	r30, r16
     538:	60 81       	ld	r22, Z
		else
			{
				switch(m_cfg.m_colormode)
					{
				case colorModePattern:
					for(size_t i=0;i<m_cfg.m_pixels;i++)
     53a:	71 81       	ldd	r23, Z+1	; 0x01
     53c:	f3 e0       	ldi	r31, 0x03	; 3
     53e:	cf 0e       	add	r12, r31
     540:	d1 1c       	adc	r13, r1
     542:	e6 16       	cp	r14, r22
     544:	f7 06       	cpc	r15, r23
     546:	00 f3       	brcs	.-64     	; 0x508 <__stack+0x9>
     548:	f8 01       	movw	r30, r16
     54a:	83 a9       	ldd	r24, Z+51	; 0x33
     54c:	94 a9       	ldd	r25, Z+52	; 0x34
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	94 ab       	std	Z+52, r25	; 0x34
						{
							m_arry[i] = m_cfg.m_pattern[(i+q) % m_cfg.m_pattern_size];
						}
					q++;
     552:	83 ab       	std	Z+51, r24	; 0x33
     554:	c3 01       	movw	r24, r6
     556:	1e d1       	rcall	.+572    	; 0x794 <_Z10sendPixelsP13NeoPixelColorj>
     558:	f8 01       	movw	r30, r16
     55a:	84 81       	ldd	r24, Z+4	; 0x04
     55c:	f5 01       	movw	r30, r10
					q++;
					if (q >= spacing)
						q = 0;
					}

				sendPixels(m_arry,m_cfg.m_pixels);
     55e:	80 83       	st	Z, r24
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
				m_tmrs[0] = m_cfg.m_sustain;
     564:	0f 90       	pop	r0
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
			}

	}
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	df 90       	pop	r13
     574:	cf 90       	pop	r12
     576:	bf 90       	pop	r11
     578:	af 90       	pop	r10
     57a:	9f 90       	pop	r9
     57c:	8f 90       	pop	r8
     57e:	7f 90       	pop	r7
     580:	6f 90       	pop	r6
     582:	5f 90       	pop	r5
     584:	4f 90       	pop	r4
     586:	08 95       	ret
     588:	b4 01       	movw	r22, r8
     58a:	c6 01       	movw	r24, r12
     58c:	0e d3       	rcall	.+1564   	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
     58e:	74 cf       	rjmp	.-280    	; 0x478 <_ZN9NeoPixels18TheaterChaseEffectEv+0x9a>
     590:	91 50       	subi	r25, 0x01	; 1
     592:	90 83       	st	Z, r25
					 *
					 */
					for (size_t i = 0; i < m_cfg.m_pixels; i++)
						{
							if (step == q)
								m_arry[i] = (m_cfg.m_pattern[0]);//NeoPixelColor(255,0,0);
     594:	e5 cf       	rjmp	.-54     	; 0x560 <__stack+0x61>
     596:	27 a9       	ldd	r18, Z+55	; 0x37
     598:	30 ad       	ldd	r19, Z+56	; 0x38
     59a:	c8 01       	movw	r24, r16
     59c:	c9 96       	adiw	r24, 0x39	; 57
	}

void NeoPixels::TheaterChaseEffect()
	{
		if(m_tmrs[0] > 0)
			m_tmrs[0] --;
     59e:	3c 01       	movw	r6, r24
     5a0:	f8 01       	movw	r30, r16
     5a2:	83 a9       	ldd	r24, Z+51	; 0x33
     5a4:	94 a9       	ldd	r25, Z+52	; 0x34
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	94 ab       	std	Z+52, r25	; 0x34
     5aa:	83 ab       	std	Z+51, r24	; 0x33
     5ac:	82 17       	cp	r24, r18
							step++;
							if (step >= spacing)
								step = 0;
						}

					q++;
     5ae:	93 07       	cpc	r25, r19
     5b0:	88 f2       	brcs	.-94     	; 0x554 <__stack+0x55>
     5b2:	14 aa       	std	Z+52, r1	; 0x34
     5b4:	13 aa       	std	Z+51, r1	; 0x33
     5b6:	ce cf       	rjmp	.-100    	; 0x554 <__stack+0x55>
     5b8:	c8 01       	movw	r24, r16
					if (q >= spacing)
     5ba:	c9 96       	adiw	r24, 0x39	; 57
     5bc:	3c 01       	movw	r6, r24
     5be:	c4 cf       	rjmp	.-120    	; 0x548 <__stack+0x49>

000005c0 <_Z12RandomOffsetj>:

#define NS_TO_CYCLES(n) ( (n) / NS_PER_CYCLE )

#define RANDOMNESS 50
byte RandomOffset(uint16_t v)
	{
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	ec 01       	movw	r28, r24
     5c6:	8e 3c       	cpi	r24, 0xCE	; 206
     5c8:	91 05       	cpc	r25, r1
     5ca:	10 f0       	brcs	.+4      	; 0x5d0 <_Z12RandomOffsetj+0x10>
     5cc:	cd ec       	ldi	r28, 0xCD	; 205
     5ce:	d0 e0       	ldi	r29, 0x00	; 0
		if(v > (255 - RANDOMNESS))
			v = 255 - RANDOMNESS;

		uint16_t x = random() % (2 * RANDOMNESS);
     5d0:	0e 94 b2 11 	call	0x2364	; 0x2364 <random>
     5d4:	24 e6       	ldi	r18, 0x64	; 100
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	40 e0       	ldi	r20, 0x00	; 0
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	0e 94 cc 10 	call	0x2198	; 0x2198 <__divmodsi4>
		if(x > RANDOMNESS)
     5e0:	63 33       	cpi	r22, 0x33	; 51
     5e2:	71 05       	cpc	r23, r1
     5e4:	30 f4       	brcc	.+12     	; 0x5f2 <_Z12RandomOffsetj+0x32>
			v -= x - RANDOMNESS;
		else
			v += x;
     5e6:	ce 01       	movw	r24, r28
     5e8:	86 0f       	add	r24, r22
     5ea:	97 1f       	adc	r25, r23
		return (byte)v;
	}
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	08 95       	ret
     5f2:	e2 96       	adiw	r28, 0x32	; 50
		if(v > (255 - RANDOMNESS))
			v = 255 - RANDOMNESS;

		uint16_t x = random() % (2 * RANDOMNESS);
		if(x > RANDOMNESS)
			v -= x - RANDOMNESS;
     5f4:	ce 01       	movw	r24, r28
     5f6:	86 1b       	sub	r24, r22
     5f8:	97 0b       	sbc	r25, r23
		else
			v += x;
		return (byte)v;
	}
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	08 95       	ret

00000600 <_Z9sendPixelhhh>:

	}

//static __inline__
void sendPixel(unsigned char r, unsigned char g, unsigned char b)
	{
     600:	98 e0       	ldi	r25, 0x08	; 8
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	0b c0       	rjmp	.+22     	; 0x61c <_Z9sendPixelhhh+0x1c>
     606:	28 9a       	sbi	0x05, 0	; 5
     608:	22 e0       	ldi	r18, 0x02	; 2
     60a:	2a 95       	dec	r18
     60c:	f1 f7       	brne	.-4      	; 0x60a <_Z9sendPixelhhh+0xa>
     60e:	28 98       	cbi	0x05, 0	; 5
     610:	24 e0       	ldi	r18, 0x04	; 4
     612:	2a 95       	dec	r18
     614:	f1 f7       	brne	.-4      	; 0x612 <_Z9sendPixelhhh+0x12>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     616:	66 0f       	add	r22, r22
     618:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     61a:	71 f0       	breq	.+28     	; 0x638 <_Z9sendPixelhhh+0x38>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     61c:	23 2f       	mov	r18, r19
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     61e:	67 ff       	sbrs	r22, 7
     620:	f2 cf       	rjmp	.-28     	; 0x606 <_Z9sendPixelhhh+0x6>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     622:	28 9a       	sbi	0x05, 0	; 5
     624:	24 e0       	ldi	r18, 0x04	; 4
     626:	2a 95       	dec	r18
     628:	f1 f7       	brne	.-4      	; 0x626 <_Z9sendPixelhhh+0x26>
     62a:	28 98       	cbi	0x05, 0	; 5
     62c:	23 e0       	ldi	r18, 0x03	; 3
     62e:	2a 95       	dec	r18
     630:	f1 f7       	brne	.-4      	; 0x62e <_Z9sendPixelhhh+0x2e>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     632:	66 0f       	add	r22, r22
     634:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     636:	91 f7       	brne	.-28     	; 0x61c <_Z9sendPixelhhh+0x1c>
//static __inline__
void sendPixel(unsigned char r, unsigned char g, unsigned char b)
	{

		sendByte(g);      // Neopixel wants colors in green then red then blue order
		if (tbi(UCSR1A,RXC1))
     638:	90 91 c8 00 	lds	r25, 0x00C8
     63c:	97 fd       	sbrc	r25, 7
     63e:	3c c0       	rjmp	.+120    	; 0x6b8 <_Z9sendPixelhhh+0xb8>
     640:	98 e0       	ldi	r25, 0x08	; 8
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	0b c0       	rjmp	.+22     	; 0x65c <_Z9sendPixelhhh+0x5c>
     646:	28 9a       	sbi	0x05, 0	; 5
     648:	22 e0       	ldi	r18, 0x02	; 2
     64a:	2a 95       	dec	r18
     64c:	f1 f7       	brne	.-4      	; 0x64a <_Z9sendPixelhhh+0x4a>
     64e:	28 98       	cbi	0x05, 0	; 5
     650:	24 e0       	ldi	r18, 0x04	; 4
     652:	2a 95       	dec	r18
     654:	f1 f7       	brne	.-4      	; 0x652 <_Z9sendPixelhhh+0x52>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     656:	88 0f       	add	r24, r24
     658:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     65a:	71 f0       	breq	.+28     	; 0x678 <_Z9sendPixelhhh+0x78>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     65c:	23 2f       	mov	r18, r19
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     65e:	87 ff       	sbrs	r24, 7
     660:	f2 cf       	rjmp	.-28     	; 0x646 <_Z9sendPixelhhh+0x46>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     662:	28 9a       	sbi	0x05, 0	; 5
     664:	24 e0       	ldi	r18, 0x04	; 4
     666:	2a 95       	dec	r18
     668:	f1 f7       	brne	.-4      	; 0x666 <_Z9sendPixelhhh+0x66>
     66a:	28 98       	cbi	0x05, 0	; 5
     66c:	23 e0       	ldi	r18, 0x03	; 3
     66e:	2a 95       	dec	r18
     670:	f1 f7       	brne	.-4      	; 0x66e <_Z9sendPixelhhh+0x6e>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     672:	88 0f       	add	r24, r24
     674:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     676:	91 f7       	brne	.-28     	; 0x65c <_Z9sendPixelhhh+0x5c>

		sendByte(g);      // Neopixel wants colors in green then red then blue order
		if (tbi(UCSR1A,RXC1))
			return;
		sendByte(r);
		if (tbi(UCSR1A,RXC1))
     678:	80 91 c8 00 	lds	r24, 0x00C8
     67c:	87 fd       	sbrc	r24, 7
     67e:	1c c0       	rjmp	.+56     	; 0x6b8 <_Z9sendPixelhhh+0xb8>
     680:	88 e0       	ldi	r24, 0x08	; 8
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	0b c0       	rjmp	.+22     	; 0x69c <_Z9sendPixelhhh+0x9c>
     686:	28 9a       	sbi	0x05, 0	; 5
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	9a 95       	dec	r25
     68c:	f1 f7       	brne	.-4      	; 0x68a <_Z9sendPixelhhh+0x8a>
     68e:	28 98       	cbi	0x05, 0	; 5
     690:	94 e0       	ldi	r25, 0x04	; 4
     692:	9a 95       	dec	r25
     694:	f1 f7       	brne	.-4      	; 0x692 <_Z9sendPixelhhh+0x92>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     696:	44 0f       	add	r20, r20
     698:	81 50       	subi	r24, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     69a:	71 f0       	breq	.+28     	; 0x6b8 <_Z9sendPixelhhh+0xb8>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     69c:	92 2f       	mov	r25, r18
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     69e:	47 ff       	sbrs	r20, 7
     6a0:	f2 cf       	rjmp	.-28     	; 0x686 <_Z9sendPixelhhh+0x86>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     6a2:	28 9a       	sbi	0x05, 0	; 5
     6a4:	94 e0       	ldi	r25, 0x04	; 4
     6a6:	9a 95       	dec	r25
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <_Z9sendPixelhhh+0xa6>
     6aa:	28 98       	cbi	0x05, 0	; 5
     6ac:	93 e0       	ldi	r25, 0x03	; 3
     6ae:	9a 95       	dec	r25
     6b0:	f1 f7       	brne	.-4      	; 0x6ae <_Z9sendPixelhhh+0xae>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     6b2:	44 0f       	add	r20, r20
     6b4:	81 50       	subi	r24, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     6b6:	91 f7       	brne	.-28     	; 0x69c <_Z9sendPixelhhh+0x9c>
     6b8:	08 95       	ret

000006ba <_Z9sendPixelR13NeoPixelColor>:

	}

//static __inline__
void sendPixel(NeoPixelColor &c)
	{
     6ba:	fc 01       	movw	r30, r24
			}
	}

byte NeoPixelColor::getGreen()
	{
		switch(m_color_order)
     6bc:	80 91 12 01 	lds	r24, 0x0112
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <_Z9sendPixelR13NeoPixelColor+0xc>
     6c4:	63 c0       	rjmp	.+198    	; 0x78c <_Z9sendPixelR13NeoPixelColor+0xd2>
			{
		case GRB:
			return colors[0];
     6c6:	20 81       	ld	r18, Z

	}

//static __inline__
void sendPixel(NeoPixelColor &c)
	{
     6c8:	98 e0       	ldi	r25, 0x08	; 8
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     6ca:	40 e0       	ldi	r20, 0x00	; 0
     6cc:	0b c0       	rjmp	.+22     	; 0x6e4 <_Z9sendPixelR13NeoPixelColor+0x2a>
     6ce:	28 9a       	sbi	0x05, 0	; 5
     6d0:	32 e0       	ldi	r19, 0x02	; 2
     6d2:	3a 95       	dec	r19
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <_Z9sendPixelR13NeoPixelColor+0x18>
     6d6:	28 98       	cbi	0x05, 0	; 5
     6d8:	34 e0       	ldi	r19, 0x04	; 4
     6da:	3a 95       	dec	r19
     6dc:	f1 f7       	brne	.-4      	; 0x6da <_Z9sendPixelR13NeoPixelColor+0x20>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     6de:	22 0f       	add	r18, r18
     6e0:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     6e2:	71 f0       	breq	.+28     	; 0x700 <_Z9sendPixelR13NeoPixelColor+0x46>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     6e4:	34 2f       	mov	r19, r20
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     6e6:	27 ff       	sbrs	r18, 7
     6e8:	f2 cf       	rjmp	.-28     	; 0x6ce <_Z9sendPixelR13NeoPixelColor+0x14>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     6ea:	28 9a       	sbi	0x05, 0	; 5
     6ec:	34 e0       	ldi	r19, 0x04	; 4
     6ee:	3a 95       	dec	r19
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <_Z9sendPixelR13NeoPixelColor+0x34>
     6f2:	28 98       	cbi	0x05, 0	; 5
     6f4:	33 e0       	ldi	r19, 0x03	; 3
     6f6:	3a 95       	dec	r19
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <_Z9sendPixelR13NeoPixelColor+0x3c>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     6fa:	22 0f       	add	r18, r18
     6fc:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     6fe:	91 f7       	brne	.-28     	; 0x6e4 <_Z9sendPixelR13NeoPixelColor+0x2a>
//static __inline__
void sendPixel(NeoPixelColor &c)
	{

		sendByte(c.getGreen()); // Neopixel wants colors in green then red then blue order
		if (tbi(UCSR1A,RXC1))
     700:	90 91 c8 00 	lds	r25, 0x00C8
     704:	97 fd       	sbrc	r25, 7
     706:	41 c0       	rjmp	.+130    	; 0x78a <_Z9sendPixelR13NeoPixelColor+0xd0>

NeoColorOrder NeoPixelColor::m_color_order = RGB;

byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
     708:	81 30       	cpi	r24, 0x01	; 1
     70a:	09 f4       	brne	.+2      	; 0x70e <_Z9sendPixelR13NeoPixelColor+0x54>
     70c:	41 c0       	rjmp	.+130    	; 0x790 <_Z9sendPixelR13NeoPixelColor+0xd6>
		case GRB:
			return colors[1];
			break;
		case RGB:
		default:
			return colors[0];
     70e:	20 81       	ld	r18, Z

	}

//static __inline__
void sendPixel(NeoPixelColor &c)
	{
     710:	98 e0       	ldi	r25, 0x08	; 8
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	0b c0       	rjmp	.+22     	; 0x72c <_Z9sendPixelR13NeoPixelColor+0x72>
     716:	28 9a       	sbi	0x05, 0	; 5
     718:	32 e0       	ldi	r19, 0x02	; 2
     71a:	3a 95       	dec	r19
     71c:	f1 f7       	brne	.-4      	; 0x71a <_Z9sendPixelR13NeoPixelColor+0x60>
     71e:	28 98       	cbi	0x05, 0	; 5
     720:	34 e0       	ldi	r19, 0x04	; 4
     722:	3a 95       	dec	r19
     724:	f1 f7       	brne	.-4      	; 0x722 <_Z9sendPixelR13NeoPixelColor+0x68>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     726:	22 0f       	add	r18, r18
     728:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     72a:	71 f0       	breq	.+28     	; 0x748 <_Z9sendPixelR13NeoPixelColor+0x8e>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     72c:	34 2f       	mov	r19, r20
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     72e:	27 ff       	sbrs	r18, 7
     730:	f2 cf       	rjmp	.-28     	; 0x716 <_Z9sendPixelR13NeoPixelColor+0x5c>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     732:	28 9a       	sbi	0x05, 0	; 5
     734:	34 e0       	ldi	r19, 0x04	; 4
     736:	3a 95       	dec	r19
     738:	f1 f7       	brne	.-4      	; 0x736 <_Z9sendPixelR13NeoPixelColor+0x7c>
     73a:	28 98       	cbi	0x05, 0	; 5
     73c:	33 e0       	ldi	r19, 0x03	; 3
     73e:	3a 95       	dec	r19
     740:	f1 f7       	brne	.-4      	; 0x73e <_Z9sendPixelR13NeoPixelColor+0x84>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     742:	22 0f       	add	r18, r18
     744:	91 50       	subi	r25, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     746:	91 f7       	brne	.-28     	; 0x72c <_Z9sendPixelR13NeoPixelColor+0x72>

		sendByte(c.getGreen()); // Neopixel wants colors in green then red then blue order
		if (tbi(UCSR1A,RXC1))
			return;
		sendByte(c.getRed());
		if (tbi(UCSR1A,RXC1))
     748:	80 91 c8 00 	lds	r24, 0x00C8
     74c:	87 fd       	sbrc	r24, 7
     74e:	1d c0       	rjmp	.+58     	; 0x78a <_Z9sendPixelR13NeoPixelColor+0xd0>
	}


byte NeoPixelColor::getBlue()
	{
		return colors[2];
     750:	92 81       	ldd	r25, Z+2	; 0x02
     752:	88 e0       	ldi	r24, 0x08	; 8
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T0H))/3),
						[offCycles] "I" ((NS_TO_CYCLES(T0L))/3)

				);
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	0b c0       	rjmp	.+22     	; 0x76e <_Z9sendPixelR13NeoPixelColor+0xb4>
     758:	28 9a       	sbi	0x05, 0	; 5
     75a:	22 e0       	ldi	r18, 0x02	; 2
     75c:	2a 95       	dec	r18
     75e:	f1 f7       	brne	.-4      	; 0x75c <_Z9sendPixelR13NeoPixelColor+0xa2>
     760:	28 98       	cbi	0x05, 0	; 5
     762:	24 e0       	ldi	r18, 0x04	; 4
     764:	2a 95       	dec	r18
     766:	f1 f7       	brne	.-4      	; 0x764 <_Z9sendPixelR13NeoPixelColor+0xaa>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     768:	99 0f       	add	r25, r25
     76a:	81 50       	subi	r24, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     76c:	71 f0       	breq	.+28     	; 0x78a <_Z9sendPixelR13NeoPixelColor+0xd0>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     76e:	23 2f       	mov	r18, r19
static __inline__
void sendBit(bool bitVal)
	{
		byte cnt = 0;

		if (bitVal)
     770:	97 ff       	sbrs	r25, 7
     772:	f2 cf       	rjmp	.-28     	; 0x758 <_Z9sendPixelR13NeoPixelColor+0x9e>
						[port] "I" (_SFR_IO_ADDR(PIXEL_PORT)),
						[bit] "I" (PIXEL_BIT),
						[onCycles] "I" ((NS_TO_CYCLES(T1H))/3),// 1-bit width less overhead  for the actual bit setting, note that this delay could be longer and everything would still work
						[offCycles] "I" ((NS_TO_CYCLES(T1L))/3)// Minimum interbit delay. Note that we probably don't need this at all since the loop overhead will be enough, but here for correctness

				);
     774:	28 9a       	sbi	0x05, 0	; 5
     776:	24 e0       	ldi	r18, 0x04	; 4
     778:	2a 95       	dec	r18
     77a:	f1 f7       	brne	.-4      	; 0x778 <_Z9sendPixelR13NeoPixelColor+0xbe>
     77c:	28 98       	cbi	0x05, 0	; 5
     77e:	23 e0       	ldi	r18, 0x03	; 3
     780:	2a 95       	dec	r18
     782:	f1 f7       	brne	.-4      	; 0x780 <_Z9sendPixelR13NeoPixelColor+0xc6>
		for (unsigned char bit = 0; bit < 8; bit++)
			{

				sendBit(bitRead( byte , 7 )); // Neopixel wants bit in highest-to-lowest order
				// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
				byte <<= 1; // and then shift left so bit 6 moves into 7, 5 moves into 6, etc
     784:	99 0f       	add	r25, r25
     786:	81 50       	subi	r24, 0x01	; 1

static __inline__
void sendByte(unsigned char byte)
	{

		for (unsigned char bit = 0; bit < 8; bit++)
     788:	91 f7       	brne	.-28     	; 0x76e <_Z9sendPixelR13NeoPixelColor+0xb4>
     78a:	08 95       	ret
		case GRB:
			return colors[0];
			break;
		case RGB:
		default:
			return colors[1];
     78c:	21 81       	ldd	r18, Z+1	; 0x01
     78e:	9c cf       	rjmp	.-200    	; 0x6c8 <_Z9sendPixelR13NeoPixelColor+0xe>
byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
			{
		case GRB:
			return colors[1];
     790:	21 81       	ldd	r18, Z+1	; 0x01
     792:	be cf       	rjmp	.-132    	; 0x710 <_Z9sendPixelR13NeoPixelColor+0x56>

00000794 <_Z10sendPixelsP13NeoPixelColorj>:
		sendByte(c.getBlue());

	}

void sendPixels(NeoPixelColor *px,size_t len)
	{
     794:	ff 92       	push	r15
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
    unsigned char sreg;

public:
    InterruptBlocker()
	{
	sreg = SREG;
     79e:	ff b6       	in	r15, 0x3f	; 63
	cli();
     7a0:	f8 94       	cli
		InterruptBlocker ib;
		for(size_t i = 0;i<len;i++)
     7a2:	61 15       	cp	r22, r1
     7a4:	71 05       	cpc	r23, r1
     7a6:	a1 f0       	breq	.+40     	; 0x7d0 <_Z10sendPixelsP13NeoPixelColorj+0x3c>
     7a8:	ec 01       	movw	r28, r24
     7aa:	8b 01       	movw	r16, r22
     7ac:	00 0f       	add	r16, r16
     7ae:	11 1f       	adc	r17, r17
     7b0:	60 0f       	add	r22, r16
     7b2:	71 1f       	adc	r23, r17
     7b4:	8e 01       	movw	r16, r28
     7b6:	06 0f       	add	r16, r22
     7b8:	17 1f       	adc	r17, r23
     7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <_Z10sendPixelsP13NeoPixelColorj+0x30>
     7bc:	23 96       	adiw	r28, 0x03	; 3
     7be:	c0 17       	cp	r28, r16
     7c0:	d1 07       	cpc	r29, r17
     7c2:	31 f0       	breq	.+12     	; 0x7d0 <_Z10sendPixelsP13NeoPixelColorj+0x3c>
			{
				sendPixel(px[i]);
     7c4:	ce 01       	movw	r24, r28
     7c6:	79 df       	rcall	.-270    	; 0x6ba <_Z9sendPixelR13NeoPixelColor>
     7c8:	80 91 c8 00 	lds	r24, 0x00C8
				if (tbi(UCSR1A,RXC1))
     7cc:	87 ff       	sbrs	r24, 7
     7ce:	f6 cf       	rjmp	.-20     	; 0x7bc <_Z10sendPixelsP13NeoPixelColorj+0x28>
     7d0:	ff be       	out	0x3f, r15	; 63
     7d2:	df 91       	pop	r29
					return;
			}
	}
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	08 95       	ret

000007de <_Z5Wheelh>:

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
NeoPixelColor Wheel(byte WheelPos)
{
  WheelPos = 255 - WheelPos;
     7de:	60 95       	com	r22
  if (WheelPos < 85)
     7e0:	65 35       	cpi	r22, 0x55	; 85
     7e2:	90 f4       	brcc	.+36     	; 0x808 <_Z5Wheelh+0x2a>
  {
    return NeoPixelColor(255 - WheelPos * 3, 0, WheelPos * 3);
     7e4:	26 2f       	mov	r18, r22
     7e6:	22 0f       	add	r18, r18
     7e8:	26 0f       	add	r18, r22
     7ea:	36 2f       	mov	r19, r22
     7ec:	33 0f       	add	r19, r19
     7ee:	33 0f       	add	r19, r19
     7f0:	63 1b       	sub	r22, r19
     7f2:	61 50       	subi	r22, 0x01	; 1



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     7f4:	30 91 12 01 	lds	r19, 0x0112
			{
		case GRB:
			colors[1] = v;
     7f8:	fc 01       	movw	r30, r24



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     7fa:	31 30       	cpi	r19, 0x01	; 1
     7fc:	89 f1       	breq	.+98     	; 0x860 <_Z5Wheelh+0x82>
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     7fe:	60 83       	st	Z, r22
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     800:	11 82       	std	Z+1, r1	; 0x01
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     802:	fc 01       	movw	r30, r24
     804:	22 83       	std	Z+2, r18	; 0x02
     806:	08 95       	ret
  WheelPos = 255 - WheelPos;
  if (WheelPos < 85)
  {
    return NeoPixelColor(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  else if (WheelPos < 170)
     808:	6a 3a       	cpi	r22, 0xAA	; 170
     80a:	a8 f4       	brcc	.+42     	; 0x836 <_Z5Wheelh+0x58>
  {
    WheelPos -= 85;
     80c:	65 55       	subi	r22, 0x55	; 85
    return NeoPixelColor(0, WheelPos * 3, 255 - WheelPos * 3);
     80e:	26 2f       	mov	r18, r22
     810:	22 0f       	add	r18, r18
     812:	22 0f       	add	r18, r18
     814:	f6 2f       	mov	r31, r22
     816:	f2 1b       	sub	r31, r18
     818:	2f 2f       	mov	r18, r31
     81a:	21 50       	subi	r18, 0x01	; 1
     81c:	36 2f       	mov	r19, r22
     81e:	33 0f       	add	r19, r19
     820:	63 0f       	add	r22, r19



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     822:	30 91 12 01 	lds	r19, 0x0112
			{
		case GRB:
			colors[1] = v;
     826:	fc 01       	movw	r30, r24



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     828:	31 30       	cpi	r19, 0x01	; 1
     82a:	f9 f4       	brne	.+62     	; 0x86a <_Z5Wheelh+0x8c>
			{
		case GRB:
			colors[1] = v;
     82c:	11 82       	std	Z+1, r1	; 0x01
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     82e:	60 83       	st	Z, r22
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     830:	fc 01       	movw	r30, r24
     832:	22 83       	std	Z+2, r18	; 0x02
     834:	08 95       	ret
    WheelPos -= 85;
    return NeoPixelColor(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  else
  {
    WheelPos -= 170;
     836:	6a 5a       	subi	r22, 0xAA	; 170
    return NeoPixelColor(WheelPos * 3, 255 - WheelPos * 3, 0);
     838:	26 2f       	mov	r18, r22
     83a:	22 0f       	add	r18, r18
     83c:	22 0f       	add	r18, r18
     83e:	f6 2f       	mov	r31, r22
     840:	f2 1b       	sub	r31, r18
     842:	2f 2f       	mov	r18, r31
     844:	21 50       	subi	r18, 0x01	; 1
     846:	36 2f       	mov	r19, r22
     848:	33 0f       	add	r19, r19
     84a:	63 0f       	add	r22, r19



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     84c:	30 91 12 01 	lds	r19, 0x0112
			{
		case GRB:
			colors[1] = v;
     850:	fc 01       	movw	r30, r24



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     852:	31 30       	cpi	r19, 0x01	; 1
     854:	79 f0       	breq	.+30     	; 0x874 <_Z5Wheelh+0x96>
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     856:	60 83       	st	Z, r22
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     858:	21 83       	std	Z+1, r18	; 0x01
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     85a:	fc 01       	movw	r30, r24
     85c:	12 82       	std	Z+2, r1	; 0x02
  else
  {
    WheelPos -= 170;
    return NeoPixelColor(WheelPos * 3, 255 - WheelPos * 3, 0);
  }
}
     85e:	08 95       	ret
void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[1] = v;
     860:	61 83       	std	Z+1, r22	; 0x01
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     862:	10 82       	st	Z, r1
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     864:	fc 01       	movw	r30, r24
     866:	22 83       	std	Z+2, r18	; 0x02
     868:	08 95       	ret
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     86a:	10 82       	st	Z, r1
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     86c:	61 83       	std	Z+1, r22	; 0x01
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     86e:	fc 01       	movw	r30, r24
     870:	22 83       	std	Z+2, r18	; 0x02
     872:	08 95       	ret
void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[1] = v;
     874:	61 83       	std	Z+1, r22	; 0x01
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     876:	20 83       	st	Z, r18
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     878:	fc 01       	movw	r30, r24
     87a:	12 82       	std	Z+2, r1	; 0x02
  else
  {
    WheelPos -= 170;
    return NeoPixelColor(WheelPos * 3, 255 - WheelPos * 3, 0);
  }
}
     87c:	08 95       	ret

0000087e <_ZN9NeoPixelsC1Ej>:
			}

	}

////////////////// NeoPixels Class ////////////////////////
NeoPixels::NeoPixels(size_t pixels)
     87e:	ef 92       	push	r14
     880:	ff 92       	push	r15
     882:	0f 93       	push	r16
     884:	1f 93       	push	r17
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	8c 01       	movw	r16, r24
     88c:	24 dd       	rcall	.-1464   	; 0x2d6 <_ZN9NeoConfigC1Ev>
     88e:	78 01       	movw	r14, r16
     890:	89 e3       	ldi	r24, 0x39	; 57
     892:	e8 0e       	add	r14, r24
     894:	f1 1c       	adc	r15, r1
     896:	90 91 12 01 	lds	r25, 0x0112



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     89a:	e8 01       	movw	r28, r16
     89c:	eb 96       	adiw	r28, 0x3b	; 59
     89e:	d8 01       	movw	r26, r16
     8a0:	da 96       	adiw	r26, 0x3a	; 58
     8a2:	98 01       	movw	r18, r16
     8a4:	21 53       	subi	r18, 0x31	; 49
     8a6:	3f 4f       	sbci	r19, 0xFF	; 255
     8a8:	f7 01       	movw	r30, r14
			}

	}

////////////////// NeoPixels Class ////////////////////////
NeoPixels::NeoPixels(size_t pixels)
     8aa:	09 c0       	rjmp	.+18     	; 0x8be <_ZN9NeoPixelsC1Ej+0x40>
     8ac:	1c 92       	st	X, r1
void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[1] = v;
     8ae:	10 82       	st	Z, r1
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     8b0:	18 82       	st	Y, r1
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     8b2:	33 96       	adiw	r30, 0x03	; 3
			}

	}

////////////////// NeoPixels Class ////////////////////////
NeoPixels::NeoPixels(size_t pixels)
     8b4:	23 96       	adiw	r28, 0x03	; 3
     8b6:	13 96       	adiw	r26, 0x03	; 3
     8b8:	e2 17       	cp	r30, r18
     8ba:	f3 07       	cpc	r31, r19
     8bc:	59 f0       	breq	.+22     	; 0x8d4 <_ZN9NeoPixelsC1Ej+0x56>
     8be:	91 30       	cpi	r25, 0x01	; 1



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     8c0:	a9 f3       	breq	.-22     	; 0x8ac <_ZN9NeoPixelsC1Ej+0x2e>
     8c2:	10 82       	st	Z, r1
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     8c4:	1c 92       	st	X, r1
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     8c6:	18 82       	st	Y, r1
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     8c8:	33 96       	adiw	r30, 0x03	; 3
			}

	}

////////////////// NeoPixels Class ////////////////////////
NeoPixels::NeoPixels(size_t pixels)
     8ca:	23 96       	adiw	r28, 0x03	; 3
     8cc:	13 96       	adiw	r26, 0x03	; 3
     8ce:	e2 17       	cp	r30, r18
     8d0:	f3 07       	cpc	r31, r19
     8d2:	a9 f7       	brne	.-22     	; 0x8be <_ZN9NeoPixelsC1Ej+0x40>
     8d4:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <_Z6millisv>
	{
		m_timer = millis();
     8d8:	f8 01       	movw	r30, r16
     8da:	65 a7       	std	Z+45, r22	; 0x2d
     8dc:	76 a7       	std	Z+46, r23	; 0x2e
     8de:	87 a7       	std	Z+47, r24	; 0x2f
     8e0:	90 ab       	std	Z+48, r25	; 0x30
     8e2:	14 aa       	std	Z+52, r1	; 0x34
		q = 0;
     8e4:	13 aa       	std	Z+51, r1	; 0x33
     8e6:	12 aa       	std	Z+50, r1	; 0x32
		j = 0;
     8e8:	11 aa       	std	Z+49, r1	; 0x31
     8ea:	82 e0       	ldi	r24, 0x02	; 2
		step = 2;
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	96 ab       	std	Z+54, r25	; 0x36
     8f0:	85 ab       	std	Z+53, r24	; 0x35
     8f2:	90 af       	std	Z+56, r25	; 0x38
		spacing = 2;
     8f4:	87 ab       	std	Z+55, r24	; 0x37
     8f6:	86 e9       	ldi	r24, 0x96	; 150
		memset(m_arry,0,sizeof(m_arry));
     8f8:	f7 01       	movw	r30, r14
     8fa:	11 92       	st	Z+, r1
     8fc:	8a 95       	dec	r24
     8fe:	e9 f7       	brne	.-6      	; 0x8fa <_ZN9NeoPixelsC1Ej+0x7c>
     900:	df 91       	pop	r29
	}
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	08 95       	ret

0000090e <_ZN9NeoPixels16StartRandomPixelEj>:
			break;
			}
	}

void NeoPixels::StartRandomPixel(size_t pixels)
	{
     90e:	8f 92       	push	r8
     910:	9f 92       	push	r9
     912:	af 92       	push	r10
     914:	bf 92       	push	r11
     916:	cf 92       	push	r12
     918:	df 92       	push	r13
     91a:	ef 92       	push	r14
     91c:	ff 92       	push	r15
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
		size_t op = 0;
		for(size_t i = 0;i < m_cfg.m_pixels; i++)
     926:	fc 01       	movw	r30, r24
     928:	c0 81       	ld	r28, Z
     92a:	d1 81       	ldd	r29, Z+1	; 0x01
     92c:	20 97       	sbiw	r28, 0x00	; 0
     92e:	09 f4       	brne	.+2      	; 0x932 <_ZN9NeoPixels16StartRandomPixelEj+0x24>
     930:	93 c0       	rjmp	.+294    	; 0xa58 <_ZN9NeoPixels16StartRandomPixelEj+0x14a>
     932:	dc 01       	movw	r26, r24
     934:	a4 52       	subi	r26, 0x24	; 36
     936:	bf 4f       	sbci	r27, 0xFF	; 255
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	00 e0       	ldi	r16, 0x00	; 0
     93e:	10 e0       	ldi	r17, 0x00	; 0
		m_status_bits[idx/4] = v;
	}

NeoPixelState NeoPixels::GetPixelState(size_t idx)
	{
		byte x = m_status_bits[idx/4];
     940:	fa 01       	movw	r30, r20
     942:	f6 95       	lsr	r31
     944:	e7 95       	ror	r30
     946:	f6 95       	lsr	r31
     948:	e7 95       	ror	r30
     94a:	e8 0f       	add	r30, r24
     94c:	f9 1f       	adc	r31, r25
     94e:	e1 53       	subi	r30, 0x31	; 49
     950:	ff 4f       	sbci	r31, 0xFF	; 255
		x >>= 2*(idx % 4);
     952:	20 81       	ld	r18, Z
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	fa 01       	movw	r30, r20
     958:	e3 70       	andi	r30, 0x03	; 3
     95a:	ff 27       	eor	r31, r31
     95c:	ee 0f       	add	r30, r30
     95e:	ff 1f       	adc	r31, r31
     960:	02 c0       	rjmp	.+4      	; 0x966 <_ZN9NeoPixels16StartRandomPixelEj+0x58>
     962:	35 95       	asr	r19
     964:	27 95       	ror	r18
     966:	ea 95       	dec	r30
     968:	e2 f7       	brpl	.-8      	; 0x962 <_ZN9NeoPixels16StartRandomPixelEj+0x54>
		NeoPixelState ret = (NeoPixelState)(x & 0x03);
     96a:	23 70       	andi	r18, 0x03	; 3
void NeoPixels::StartRandomPixel(size_t pixels)
	{
		size_t op = 0;
		for(size_t i = 0;i < m_cfg.m_pixels; i++)
			{
				if(GetPixelState(i) == TurnedOff && m_tmrs[i] == 0)
     96c:	29 f4       	brne	.+10     	; 0x978 <_ZN9NeoPixels16StartRandomPixelEj+0x6a>
     96e:	2c 91       	ld	r18, X
     970:	21 11       	cpse	r18, r1
     972:	02 c0       	rjmp	.+4      	; 0x978 <_ZN9NeoPixels16StartRandomPixelEj+0x6a>
					op++;
     974:	0f 5f       	subi	r16, 0xFF	; 255
     976:	1f 4f       	sbci	r17, 0xFF	; 255
	}

void NeoPixels::StartRandomPixel(size_t pixels)
	{
		size_t op = 0;
		for(size_t i = 0;i < m_cfg.m_pixels; i++)
     978:	4f 5f       	subi	r20, 0xFF	; 255
     97a:	5f 4f       	sbci	r21, 0xFF	; 255
     97c:	11 96       	adiw	r26, 0x01	; 1
     97e:	4c 17       	cp	r20, r28
     980:	5d 07       	cpc	r21, r29
     982:	f1 f6       	brne	.-68     	; 0x940 <_ZN9NeoPixels16StartRandomPixelEj+0x32>
			{
				if(GetPixelState(i) == TurnedOff && m_tmrs[i] == 0)
					op++;
			}

		while(pixels > 0 && op > 0)
     984:	61 15       	cp	r22, r1
     986:	71 05       	cpc	r23, r1
     988:	09 f4       	brne	.+2      	; 0x98c <_ZN9NeoPixels16StartRandomPixelEj+0x7e>
     98a:	66 c0       	rjmp	.+204    	; 0xa58 <_ZN9NeoPixels16StartRandomPixelEj+0x14a>
     98c:	01 15       	cp	r16, r1
     98e:	11 05       	cpc	r17, r1
     990:	09 f4       	brne	.+2      	; 0x994 <_ZN9NeoPixels16StartRandomPixelEj+0x86>
     992:	62 c0       	rjmp	.+196    	; 0xa58 <_ZN9NeoPixels16StartRandomPixelEj+0x14a>
     994:	ec 01       	movw	r28, r24
     996:	c8 01       	movw	r24, r16
     998:	86 1b       	sub	r24, r22
     99a:	97 0b       	sbc	r25, r23
     99c:	9c 01       	movw	r18, r24
     99e:	2f 5f       	subi	r18, 0xFF	; 255
     9a0:	3f 4f       	sbci	r19, 0xFF	; 255
     9a2:	49 01       	movw	r8, r18
     9a4:	ce 01       	movw	r24, r28
     9a6:	80 5f       	subi	r24, 0xF0	; 240
     9a8:	9e 4f       	sbci	r25, 0xFE	; 254
     9aa:	5c 01       	movw	r10, r24
void NeoPixels::SetPixelState(size_t idx,NeoPixelState state)
	{
		byte x = ((byte)state) & 0x03;
		byte mask = 0x03;
		x <<= 2 * (idx % 4);
		mask <<= 2 * (idx % 4);
     9ac:	23 e0       	ldi	r18, 0x03	; 3
     9ae:	c2 2e       	mov	r12, r18
     9b0:	d1 2c       	mov	r13, r1

void NeoPixels::SetPixelState(size_t idx,NeoPixelState state)
	{
		byte x = ((byte)state) & 0x03;
		byte mask = 0x03;
		x <<= 2 * (idx % 4);
     9b2:	ee 24       	eor	r14, r14
     9b4:	e3 94       	inc	r14
     9b6:	f1 2c       	mov	r15, r1
			while(b)
				{
					if(GetPixelState(idx) == TurnedOff && (m_tmrs[idx] == 0))
						b = false;
					else
						idx = random() % m_cfg.m_pixels;
     9b8:	0e 94 b2 11 	call	0x2364	; 0x2364 <random>
     9bc:	28 81       	ld	r18, Y
     9be:	39 81       	ldd	r19, Y+1	; 0x01
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	0e 94 cc 10 	call	0x2198	; 0x2198 <__divmodsi4>
		m_status_bits[idx/4] = v;
	}

NeoPixelState NeoPixels::GetPixelState(size_t idx)
	{
		byte x = m_status_bits[idx/4];
     9c8:	fb 01       	movw	r30, r22
     9ca:	f6 95       	lsr	r31
     9cc:	e7 95       	ror	r30
     9ce:	f6 95       	lsr	r31
     9d0:	e7 95       	ror	r30
     9d2:	ec 0f       	add	r30, r28
     9d4:	fd 1f       	adc	r31, r29
     9d6:	e1 53       	subi	r30, 0x31	; 49
     9d8:	ff 4f       	sbci	r31, 0xFF	; 255
     9da:	40 81       	ld	r20, Z
		x >>= 2*(idx % 4);
     9dc:	9b 01       	movw	r18, r22
     9de:	23 70       	andi	r18, 0x03	; 3
     9e0:	33 27       	eor	r19, r19
     9e2:	22 0f       	add	r18, r18
     9e4:	33 1f       	adc	r19, r19
     9e6:	84 2f       	mov	r24, r20
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	02 2e       	mov	r0, r18
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <_ZN9NeoPixels16StartRandomPixelEj+0xe4>
     9ee:	95 95       	asr	r25
     9f0:	87 95       	ror	r24
     9f2:	0a 94       	dec	r0
     9f4:	e2 f7       	brpl	.-8      	; 0x9ee <_ZN9NeoPixels16StartRandomPixelEj+0xe0>
		NeoPixelState ret = (NeoPixelState)(x & 0x03);
     9f6:	83 70       	andi	r24, 0x03	; 3
			{
			size_t idx = random() % m_cfg.m_pixels;
			bool b = true;
			while(b)
				{
					if(GetPixelState(idx) == TurnedOff && (m_tmrs[idx] == 0))
     9f8:	f9 f6       	brne	.-66     	; 0x9b8 <_ZN9NeoPixels16StartRandomPixelEj+0xaa>
     9fa:	6c 0f       	add	r22, r28
     9fc:	7d 1f       	adc	r23, r29
     9fe:	db 01       	movw	r26, r22
     a00:	a4 52       	subi	r26, 0x24	; 36
     a02:	bf 4f       	sbci	r27, 0xFF	; 255
     a04:	8c 91       	ld	r24, X
     a06:	81 11       	cpse	r24, r1
     a08:	d7 cf       	rjmp	.-82     	; 0x9b8 <_ZN9NeoPixels16StartRandomPixelEj+0xaa>
void NeoPixels::SetPixelState(size_t idx,NeoPixelState state)
	{
		byte x = ((byte)state) & 0x03;
		byte mask = 0x03;
		x <<= 2 * (idx % 4);
		mask <<= 2 * (idx % 4);
     a0a:	c6 01       	movw	r24, r12
     a0c:	02 2e       	mov	r0, r18
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <_ZN9NeoPixels16StartRandomPixelEj+0x104>
     a10:	88 0f       	add	r24, r24
     a12:	0a 94       	dec	r0
     a14:	ea f7       	brpl	.-6      	; 0xa10 <_ZN9NeoPixels16StartRandomPixelEj+0x102>
		mask = ~mask;
     a16:	80 95       	com	r24
		byte v = m_status_bits[idx/4] & mask;
     a18:	48 23       	and	r20, r24

void NeoPixels::SetPixelState(size_t idx,NeoPixelState state)
	{
		byte x = ((byte)state) & 0x03;
		byte mask = 0x03;
		x <<= 2 * (idx % 4);
     a1a:	c7 01       	movw	r24, r14
     a1c:	01 c0       	rjmp	.+2      	; 0xa20 <_ZN9NeoPixels16StartRandomPixelEj+0x112>
     a1e:	88 0f       	add	r24, r24
     a20:	2a 95       	dec	r18
     a22:	ea f7       	brpl	.-6      	; 0xa1e <_ZN9NeoPixels16StartRandomPixelEj+0x110>
		mask <<= 2 * (idx % 4);
		mask = ~mask;
		byte v = m_status_bits[idx/4] & mask;
		v |= x;
     a24:	48 2b       	or	r20, r24
		m_status_bits[idx/4] = v;
     a26:	40 83       	st	Z, r20
						b = false;
					else
						idx = random() % m_cfg.m_pixels;
				}
			SetPixelState(idx,Attacking);
			m_tmrs[idx] = m_cfg.m_attack > 255 ? 255 : (byte)m_cfg.m_attack;
     a28:	8a 81       	ldd	r24, Y+2	; 0x02
     a2a:	9b 81       	ldd	r25, Y+3	; 0x03
     a2c:	8f 3f       	cpi	r24, 0xFF	; 255
     a2e:	91 05       	cpc	r25, r1
     a30:	11 f0       	breq	.+4      	; 0xa36 <_ZN9NeoPixels16StartRandomPixelEj+0x128>
     a32:	08 f0       	brcs	.+2      	; 0xa36 <_ZN9NeoPixels16StartRandomPixelEj+0x128>
     a34:	8f ef       	ldi	r24, 0xFF	; 255
     a36:	fb 01       	movw	r30, r22
     a38:	e4 52       	subi	r30, 0x24	; 36
     a3a:	ff 4f       	sbci	r31, 0xFF	; 255
     a3c:	80 83       	st	Z, r24
			pixels--;
			m_active++;
     a3e:	f5 01       	movw	r30, r10
     a40:	80 81       	ld	r24, Z
     a42:	91 81       	ldd	r25, Z+1	; 0x01
     a44:	01 96       	adiw	r24, 0x01	; 1
     a46:	91 83       	std	Z+1, r25	; 0x01
     a48:	80 83       	st	Z, r24
			{
				if(GetPixelState(i) == TurnedOff && m_tmrs[i] == 0)
					op++;
			}

		while(pixels > 0 && op > 0)
     a4a:	08 15       	cp	r16, r8
     a4c:	19 05       	cpc	r17, r9
     a4e:	21 f0       	breq	.+8      	; 0xa58 <_ZN9NeoPixels16StartRandomPixelEj+0x14a>
     a50:	01 50       	subi	r16, 0x01	; 1
     a52:	11 09       	sbc	r17, r1
     a54:	09 f0       	breq	.+2      	; 0xa58 <_ZN9NeoPixels16StartRandomPixelEj+0x14a>
     a56:	b0 cf       	rjmp	.-160    	; 0x9b8 <_ZN9NeoPixels16StartRandomPixelEj+0xaa>
			pixels--;
			m_active++;
			op--;
			}

	}
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	ff 90       	pop	r15
     a62:	ef 90       	pop	r14
     a64:	df 90       	pop	r13
     a66:	cf 90       	pop	r12
     a68:	bf 90       	pop	r11
     a6a:	af 90       	pop	r10
     a6c:	9f 90       	pop	r9
     a6e:	8f 90       	pop	r8
     a70:	08 95       	ret

00000a72 <_ZN9NeoPixels11initTwinkleEv>:

void NeoPixels::initTwinkle()
	{
     a72:	cf 92       	push	r12
     a74:	df 92       	push	r13
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	8c 01       	movw	r16, r24
		memset(m_arry,0,sizeof(m_arry));
     a84:	7c 01       	movw	r14, r24
     a86:	89 e3       	ldi	r24, 0x39	; 57
     a88:	e8 0e       	add	r14, r24
     a8a:	f1 1c       	adc	r15, r1
     a8c:	86 e9       	ldi	r24, 0x96	; 150
     a8e:	d7 01       	movw	r26, r14
     a90:	1d 92       	st	X+, r1
     a92:	8a 95       	dec	r24
     a94:	e9 f7       	brne	.-6      	; 0xa90 <_ZN9NeoPixels11initTwinkleEv+0x1e>
		memset(m_status_bits,0,sizeof(m_status_bits));
     a96:	f8 01       	movw	r30, r16
     a98:	e1 53       	subi	r30, 0x31	; 49
     a9a:	ff 4f       	sbci	r31, 0xFF	; 255
     a9c:	8d e0       	ldi	r24, 0x0D	; 13
     a9e:	df 01       	movw	r26, r30
     aa0:	1d 92       	st	X+, r1
     aa2:	8a 95       	dec	r24
     aa4:	e9 f7       	brne	.-6      	; 0xaa0 <_ZN9NeoPixels11initTwinkleEv+0x2e>

		for(size_t i=0;i<m_cfg.m_pixels;i++)
     aa6:	f8 01       	movw	r30, r16
     aa8:	80 81       	ld	r24, Z
     aaa:	91 81       	ldd	r25, Z+1	; 0x01
     aac:	00 97       	sbiw	r24, 0x00	; 0
     aae:	b1 f0       	breq	.+44     	; 0xadc <_ZN9NeoPixels11initTwinkleEv+0x6a>
     ab0:	68 01       	movw	r12, r16
     ab2:	fc ed       	ldi	r31, 0xDC	; 220
     ab4:	cf 0e       	add	r12, r31
     ab6:	d1 1c       	adc	r13, r1
     ab8:	c0 e0       	ldi	r28, 0x00	; 0
     aba:	d0 e0       	ldi	r29, 0x00	; 0
			m_tmrs[i] = RandomOffset(m_cfg.m_off);
     abc:	d8 01       	movw	r26, r16
     abe:	18 96       	adiw	r26, 0x08	; 8
     ac0:	8d 91       	ld	r24, X+
     ac2:	9c 91       	ld	r25, X
     ac4:	19 97       	sbiw	r26, 0x09	; 9
     ac6:	7c dd       	rcall	.-1288   	; 0x5c0 <_Z12RandomOffsetj>
     ac8:	f6 01       	movw	r30, r12
     aca:	81 93       	st	Z+, r24
     acc:	6f 01       	movw	r12, r30
     ace:	21 96       	adiw	r28, 0x01	; 1
void NeoPixels::initTwinkle()
	{
		memset(m_arry,0,sizeof(m_arry));
		memset(m_status_bits,0,sizeof(m_status_bits));

		for(size_t i=0;i<m_cfg.m_pixels;i++)
     ad0:	d8 01       	movw	r26, r16
     ad2:	8d 91       	ld	r24, X+
     ad4:	9c 91       	ld	r25, X
     ad6:	c8 17       	cp	r28, r24
     ad8:	d9 07       	cpc	r29, r25
     ada:	80 f3       	brcs	.-32     	; 0xabc <_ZN9NeoPixels11initTwinkleEv+0x4a>
     adc:	f8 01       	movw	r30, r16
			m_tmrs[i] = RandomOffset(m_cfg.m_off);

		m_lit = m_cfg.m_pixels * m_cfg.m_density / 100;
     ade:	65 85       	ldd	r22, Z+13	; 0x0d
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__mulhi3>
     ae6:	64 e6       	ldi	r22, 0x64	; 100
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	0e 94 83 10 	call	0x2106	; 0x2106 <__udivmodhi4>
     aee:	eb 01       	movw	r28, r22
     af0:	e2 5f       	subi	r30, 0xF2	; 242
     af2:	fe 4f       	sbci	r31, 0xFE	; 254
     af4:	71 83       	std	Z+1, r23	; 0x01
     af6:	60 83       	st	Z, r22
     af8:	32 96       	adiw	r30, 0x02	; 2
		m_active = 0;
     afa:	11 82       	std	Z+1, r1	; 0x01
     afc:	10 82       	st	Z, r1
     afe:	20 97       	sbiw	r28, 0x00	; 0
		size_t x = m_lit;
		while(x > 0)
     b00:	a1 f0       	breq	.+40     	; 0xb2a <_ZN9NeoPixels11initTwinkleEv+0xb8>
     b02:	0e 94 b2 11 	call	0x2364	; 0x2364 <random>
			{
				size_t idx = random() % m_cfg.m_pixels;
     b06:	d8 01       	movw	r26, r16
     b08:	2d 91       	ld	r18, X+
     b0a:	3c 91       	ld	r19, X
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	0e 94 cc 10 	call	0x2198	; 0x2198 <__divmodsi4>
     b14:	60 0f       	add	r22, r16
				if(m_tmrs[idx] != 0)
     b16:	71 1f       	adc	r23, r17
     b18:	fb 01       	movw	r30, r22
     b1a:	e4 52       	subi	r30, 0x24	; 36
     b1c:	ff 4f       	sbci	r31, 0xFF	; 255
     b1e:	80 81       	ld	r24, Z
     b20:	88 23       	and	r24, r24
     b22:	79 f3       	breq	.-34     	; 0xb02 <_ZN9NeoPixels11initTwinkleEv+0x90>
     b24:	10 82       	st	Z, r1
					{
						m_tmrs[idx] = 0;
     b26:	21 97       	sbiw	r28, 0x01	; 1
						x--;
     b28:	ea cf       	rjmp	.-44     	; 0xafe <_ZN9NeoPixels11initTwinkleEv+0x8c>
     b2a:	62 e3       	ldi	r22, 0x32	; 50
					}
			}
		sendPixels(m_arry,PIXELS);
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	c7 01       	movw	r24, r14
     b30:	df 91       	pop	r29
	}
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	df 90       	pop	r13
     b3e:	cf 90       	pop	r12
     b40:	29 ce       	rjmp	.-942    	; 0x794 <_Z10sendPixelsP13NeoPixelColorj>

00000b42 <_ZN13NeoPixelColorC1Ev>:
	{
		colors[2] = v;
	}


NeoPixelColor::NeoPixelColor()
     b42:	fc 01       	movw	r30, r24



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     b44:	80 91 12 01 	lds	r24, 0x0112
     b48:	81 30       	cpi	r24, 0x01	; 1
     b4a:	21 f4       	brne	.+8      	; 0xb54 <_ZN13NeoPixelColorC1Ev+0x12>
			{
		case GRB:
			colors[1] = v;
     b4c:	11 82       	std	Z+1, r1	; 0x01
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     b4e:	10 82       	st	Z, r1
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     b50:	12 82       	std	Z+2, r1	; 0x02
     b52:	08 95       	ret
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     b54:	10 82       	st	Z, r1
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     b56:	11 82       	std	Z+1, r1	; 0x01
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     b58:	12 82       	std	Z+2, r1	; 0x02
     b5a:	08 95       	ret

00000b5c <_ZN13NeoPixelColorC1Ehhh>:
		setRed(0);
		setGreen(0);
		setBlue(0);
	}

NeoPixelColor::NeoPixelColor(byte r, byte g, byte b)
     b5c:	fc 01       	movw	r30, r24



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
     b5e:	80 91 12 01 	lds	r24, 0x0112
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	21 f4       	brne	.+8      	; 0xb6e <_ZN13NeoPixelColorC1Ehhh+0x12>
			{
		case GRB:
			colors[1] = v;
     b66:	61 83       	std	Z+1, r22	; 0x01
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     b68:	40 83       	st	Z, r20
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     b6a:	22 83       	std	Z+2, r18	; 0x02
     b6c:	08 95       	ret
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     b6e:	60 83       	st	Z, r22
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     b70:	41 83       	std	Z+1, r20	; 0x01
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     b72:	22 83       	std	Z+2, r18	; 0x02
     b74:	08 95       	ret

00000b76 <_ZN13NeoPixelColorC1ERKS_>:
		setRed(r);
		setGreen(g);
		setBlue(b);
	}

NeoPixelColor::NeoPixelColor(const NeoPixelColor &r)
     b76:	fc 01       	movw	r30, r24
     b78:	db 01       	movw	r26, r22

NeoColorOrder NeoPixelColor::m_color_order = RGB;

byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
     b7a:	80 91 12 01 	lds	r24, 0x0112
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	51 f4       	brne	.+20     	; 0xb96 <_ZN13NeoPixelColorC1ERKS_+0x20>
			{
		case GRB:
			return colors[1];
     b82:	11 96       	adiw	r26, 0x01	; 1
     b84:	8c 91       	ld	r24, X
     b86:	11 97       	sbiw	r26, 0x01	; 1
void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[1] = v;
     b88:	81 83       	std	Z+1, r24	; 0x01
byte NeoPixelColor::getGreen()
	{
		switch(m_color_order)
			{
		case GRB:
			return colors[0];
     b8a:	8c 91       	ld	r24, X
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     b8c:	80 83       	st	Z, r24
	}


byte NeoPixelColor::getBlue()
	{
		return colors[2];
     b8e:	12 96       	adiw	r26, 0x02	; 2
     b90:	8c 91       	ld	r24, X
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     b92:	82 83       	std	Z+2, r24	; 0x02
     b94:	08 95       	ret
		case GRB:
			return colors[1];
			break;
		case RGB:
		default:
			return colors[0];
     b96:	8c 91       	ld	r24, X
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     b98:	80 83       	st	Z, r24
		case GRB:
			return colors[0];
			break;
		case RGB:
		default:
			return colors[1];
     b9a:	11 96       	adiw	r26, 0x01	; 1
     b9c:	8c 91       	ld	r24, X
     b9e:	11 97       	sbiw	r26, 0x01	; 1
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     ba0:	81 83       	std	Z+1, r24	; 0x01
	}


byte NeoPixelColor::getBlue()
	{
		return colors[2];
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8c 91       	ld	r24, X
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     ba6:	82 83       	std	Z+2, r24	; 0x02
     ba8:	08 95       	ret

00000baa <_ZN13NeoPixelColoraSERKS_>:
		setGreen(r.getGreen());
		setBlue(r.getBlue());
	}

NeoPixelColor & NeoPixelColor::operator=(const NeoPixelColor &r)
	{
     baa:	fb 01       	movw	r30, r22

NeoColorOrder NeoPixelColor::m_color_order = RGB;

byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
     bac:	20 91 12 01 	lds	r18, 0x0112
     bb0:	21 30       	cpi	r18, 0x01	; 1
     bb2:	59 f4       	brne	.+22     	; 0xbca <_ZN13NeoPixelColoraSERKS_+0x20>
			{
		case GRB:
			return colors[1];
     bb4:	21 81       	ldd	r18, Z+1	; 0x01
void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[1] = v;
     bb6:	dc 01       	movw	r26, r24
     bb8:	11 96       	adiw	r26, 0x01	; 1
     bba:	2c 93       	st	X, r18
     bbc:	11 97       	sbiw	r26, 0x01	; 1
byte NeoPixelColor::getGreen()
	{
		switch(m_color_order)
			{
		case GRB:
			return colors[0];
     bbe:	20 81       	ld	r18, Z
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     bc0:	2c 93       	st	X, r18
	}


byte NeoPixelColor::getBlue()
	{
		return colors[2];
     bc2:	22 81       	ldd	r18, Z+2	; 0x02
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     bc4:	fc 01       	movw	r30, r24
     bc6:	22 83       	std	Z+2, r18	; 0x02
	{
		setRed(r.getRed());
		setGreen(r.getGreen());
		setBlue(r.getBlue());
		return *this;
	}
     bc8:	08 95       	ret
		case GRB:
			return colors[1];
			break;
		case RGB:
		default:
			return colors[0];
     bca:	20 81       	ld	r18, Z
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     bcc:	dc 01       	movw	r26, r24
     bce:	2c 93       	st	X, r18
		case GRB:
			return colors[0];
			break;
		case RGB:
		default:
			return colors[1];
     bd0:	21 81       	ldd	r18, Z+1	; 0x01
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     bd2:	11 96       	adiw	r26, 0x01	; 1
     bd4:	2c 93       	st	X, r18
	}


byte NeoPixelColor::getBlue()
	{
		return colors[2];
     bd6:	22 81       	ldd	r18, Z+2	; 0x02
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
     bd8:	fc 01       	movw	r30, r24
     bda:	22 83       	std	Z+2, r18	; 0x02
	{
		setRed(r.getRed());
		setGreen(r.getGreen());
		setBlue(r.getBlue());
		return *this;
	}
     bdc:	08 95       	ret

00000bde <_ZN9NeoPixels10fillPixelsE13NeoPixelColor>:
  }
}


void NeoPixels::fillPixels(NeoPixelColor c)
	{
     bde:	af 92       	push	r10
     be0:	bf 92       	push	r11
     be2:	cf 92       	push	r12
     be4:	df 92       	push	r13
     be6:	ef 92       	push	r14
     be8:	ff 92       	push	r15
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
		for (size_t i = 0; i < m_cfg.m_pixels; i++)
     bf2:	fc 01       	movw	r30, r24
     bf4:	20 81       	ld	r18, Z
     bf6:	31 81       	ldd	r19, Z+1	; 0x01
     bf8:	21 15       	cp	r18, r1
     bfa:	31 05       	cpc	r19, r1
     bfc:	11 f1       	breq	.+68     	; 0xc42 <_ZN9NeoPixels10fillPixelsE13NeoPixelColor+0x64>
     bfe:	6b 01       	movw	r12, r22
     c00:	7c 01       	movw	r14, r24
     c02:	5c 01       	movw	r10, r24
     c04:	59 e3       	ldi	r21, 0x39	; 57
     c06:	a5 0e       	add	r10, r21
     c08:	b1 1c       	adc	r11, r1
     c0a:	85 01       	movw	r16, r10
     c0c:	c0 e0       	ldi	r28, 0x00	; 0
     c0e:	d0 e0       	ldi	r29, 0x00	; 0
			{
				m_arry[i] = c;
     c10:	b6 01       	movw	r22, r12
     c12:	c8 01       	movw	r24, r16
     c14:	ca df       	rcall	.-108    	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
     c16:	21 96       	adiw	r28, 0x01	; 1
}


void NeoPixels::fillPixels(NeoPixelColor c)
	{
		for (size_t i = 0; i < m_cfg.m_pixels; i++)
     c18:	f7 01       	movw	r30, r14
     c1a:	20 81       	ld	r18, Z
     c1c:	31 81       	ldd	r19, Z+1	; 0x01
     c1e:	0d 5f       	subi	r16, 0xFD	; 253
     c20:	1f 4f       	sbci	r17, 0xFF	; 255
     c22:	c2 17       	cp	r28, r18
     c24:	d3 07       	cpc	r29, r19
     c26:	a0 f3       	brcs	.-24     	; 0xc10 <_ZN9NeoPixels10fillPixelsE13NeoPixelColor+0x32>
     c28:	b9 01       	movw	r22, r18
			{
				m_arry[i] = c;
			}
		sendPixels(m_arry,m_cfg.m_pixels);
     c2a:	c5 01       	movw	r24, r10
     c2c:	df 91       	pop	r29
	}
     c2e:	cf 91       	pop	r28
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	ff 90       	pop	r15
     c36:	ef 90       	pop	r14
     c38:	df 90       	pop	r13
     c3a:	cf 90       	pop	r12
     c3c:	bf 90       	pop	r11
     c3e:	af 90       	pop	r10
     c40:	a9 cd       	rjmp	.-1198   	; 0x794 <_Z10sendPixelsP13NeoPixelColorj>
	{
		for (size_t i = 0; i < m_cfg.m_pixels; i++)
			{
				m_arry[i] = c;
			}
		sendPixels(m_arry,m_cfg.m_pixels);
     c42:	ac 01       	movw	r20, r24
     c44:	47 5c       	subi	r20, 0xC7	; 199
     c46:	5f 4f       	sbci	r21, 0xFF	; 255
     c48:	5a 01       	movw	r10, r20
     c4a:	ee cf       	rjmp	.-36     	; 0xc28 <_ZN9NeoPixels10fillPixelsE13NeoPixelColor+0x4a>

00000c4c <_ZN9NeoPixels4initEv>:
		init();
		Update();
	}

void NeoPixels::init()
	{
     c4c:	af 92       	push	r10
     c4e:	bf 92       	push	r11
     c50:	cf 92       	push	r12
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	00 d0       	rcall	.+0      	; 0xc62 <_ZN9NeoPixels4initEv+0x16>
     c62:	00 d0       	rcall	.+0      	; 0xc64 <_ZN9NeoPixels4initEv+0x18>
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	8c 01       	movw	r16, r24
		switch (m_cfg.m_effect)
     c6a:	dc 01       	movw	r26, r24
     c6c:	1a 96       	adiw	r26, 0x0a	; 10
     c6e:	2c 91       	ld	r18, X
     c70:	23 30       	cpi	r18, 0x03	; 3
     c72:	09 f4       	brne	.+2      	; 0xc76 <_ZN9NeoPixels4initEv+0x2a>
     c74:	85 c0       	rjmp	.+266    	; 0xd80 <_ZN9NeoPixels4initEv+0x134>
     c76:	40 f0       	brcs	.+16     	; 0xc88 <_ZN9NeoPixels4initEv+0x3c>
     c78:	25 30       	cpi	r18, 0x05	; 5
     c7a:	d1 f0       	breq	.+52     	; 0xcb0 <_ZN9NeoPixels4initEv+0x64>
     c7c:	08 f4       	brcc	.+2      	; 0xc80 <_ZN9NeoPixels4initEv+0x34>
     c7e:	47 c0       	rjmp	.+142    	; 0xd0e <_ZN9NeoPixels4initEv+0xc2>
     c80:	26 30       	cpi	r18, 0x06	; 6
     c82:	39 f5       	brne	.+78     	; 0xcd2 <_ZN9NeoPixels4initEv+0x86>
			{
		case effectCandle:
			initCandle();
     c84:	90 da       	rcall	.-2784   	; 0x1a6 <_ZN9NeoPixels10initCandleEv>
     c86:	05 c0       	rjmp	.+10     	; 0xc92 <_ZN9NeoPixels4initEv+0x46>
			break;
     c88:	21 30       	cpi	r18, 0x01	; 1
		Update();
	}

void NeoPixels::init()
	{
		switch (m_cfg.m_effect)
     c8a:	79 f1       	breq	.+94     	; 0xcea <_ZN9NeoPixels4initEv+0x9e>
     c8c:	22 30       	cpi	r18, 0x02	; 2
     c8e:	09 f5       	brne	.+66     	; 0xcd2 <_ZN9NeoPixels4initEv+0x86>
     c90:	f0 de       	rcall	.-544    	; 0xa72 <_ZN9NeoPixels11initTwinkleEv>
			{
		case effectCandle:
			initCandle();
			break;
		case effectTwinkle:
			initTwinkle();
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
		default:
			memset(m_arry,0,sizeof(m_arry));
			m_tmrs[1] = 1;
			break;
			}
	}
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	ff 90       	pop	r15
     ca4:	ef 90       	pop	r14
     ca6:	df 90       	pop	r13
     ca8:	cf 90       	pop	r12
     caa:	bf 90       	pop	r11
     cac:	af 90       	pop	r10
     cae:	08 95       	ret
     cb0:	fc 01       	movw	r30, r24
     cb2:	e4 52       	subi	r30, 0x24	; 36
	}


void NeoPixels::initRainbow()
	{
		m_tmrs[0] = m_cfg.m_sustain;
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	dc 01       	movw	r26, r24
     cb8:	14 96       	adiw	r26, 0x04	; 4
     cba:	8c 91       	ld	r24, X
     cbc:	80 83       	st	Z, r24
     cbe:	31 96       	adiw	r30, 0x01	; 1
     cc0:	10 82       	st	Z, r1
		m_tmrs[1] = 0;
     cc2:	e4 5a       	subi	r30, 0xA4	; 164
     cc4:	f1 09       	sbc	r31, r1
		memset(m_arry,0,sizeof(m_arry));
     cc6:	86 e9       	ldi	r24, 0x96	; 150
     cc8:	df 01       	movw	r26, r30
     cca:	1d 92       	st	X+, r1
     ccc:	8a 95       	dec	r24
     cce:	e9 f7       	brne	.-6      	; 0xcca <_ZN9NeoPixels4initEv+0x7e>
     cd0:	e0 cf       	rjmp	.-64     	; 0xc92 <_ZN9NeoPixels4initEv+0x46>
     cd2:	f8 01       	movw	r30, r16
     cd4:	f9 96       	adiw	r30, 0x39	; 57
		case effectRainbow:
			initRainbow();
			break;
		case effectOff:
		default:
			memset(m_arry,0,sizeof(m_arry));
     cd6:	86 e9       	ldi	r24, 0x96	; 150
     cd8:	df 01       	movw	r26, r30
     cda:	1d 92       	st	X+, r1
     cdc:	8a 95       	dec	r24
     cde:	e9 f7       	brne	.-6      	; 0xcda <_ZN9NeoPixels4initEv+0x8e>
     ce0:	ec 55       	subi	r30, 0x5C	; 92
     ce2:	ff 4f       	sbci	r31, 0xFF	; 255
			m_tmrs[1] = 1;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	80 83       	st	Z, r24
     ce8:	d4 cf       	rjmp	.-88     	; 0xc92 <_ZN9NeoPixels4initEv+0x46>
     cea:	bc 01       	movw	r22, r24
			break;
     cec:	61 5f       	subi	r22, 0xF1	; 241
			break;
		case effectTheaterChase:
			initTheaterChase();
			break;
		case effectAllOn:
			fillPixels(m_cfg.m_pattern[0]);
     cee:	7f 4f       	sbci	r23, 0xFF	; 255
     cf0:	ce 01       	movw	r24, r28
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	2c 83       	std	Y+4, r18	; 0x04
     cf6:	3f df       	rcall	.-386    	; 0xb76 <_ZN13NeoPixelColorC1ERKS_>
     cf8:	be 01       	movw	r22, r28
     cfa:	6f 5f       	subi	r22, 0xFF	; 255
     cfc:	7f 4f       	sbci	r23, 0xFF	; 255
     cfe:	c8 01       	movw	r24, r16
     d00:	6e df       	rcall	.-292    	; 0xbde <_ZN9NeoPixels10fillPixelsE13NeoPixelColor>
     d02:	f8 01       	movw	r30, r16
     d04:	e3 52       	subi	r30, 0x23	; 35
     d06:	ff 4f       	sbci	r31, 0xFF	; 255
     d08:	2c 81       	ldd	r18, Y+4	; 0x04
			m_tmrs[1] = 1;
     d0a:	20 83       	st	Z, r18
     d0c:	c2 cf       	rjmp	.-124    	; 0xc92 <_ZN9NeoPixels4initEv+0x46>
     d0e:	fc 01       	movw	r30, r24
     d10:	f9 96       	adiw	r30, 0x39	; 57
     d12:	86 e9       	ldi	r24, 0x96	; 150
			break;
     d14:	df 01       	movw	r26, r30
		case effectPattern:
			memset(m_arry,0,sizeof(m_arry));
     d16:	1d 92       	st	X+, r1
     d18:	8a 95       	dec	r24
     d1a:	e9 f7       	brne	.-6      	; 0xd16 <_ZN9NeoPixels4initEv+0xca>
     d1c:	d8 01       	movw	r26, r16
     d1e:	8d 91       	ld	r24, X+
     d20:	9c 91       	ld	r25, X
     d22:	89 2b       	or	r24, r25
			for(uint16_t i=0;i<m_cfg.m_pixels;i++)
     d24:	39 f1       	breq	.+78     	; 0xd74 <_ZN9NeoPixels4initEv+0x128>
     d26:	7f 01       	movw	r14, r30
     d28:	a1 2c       	mov	r10, r1
     d2a:	b1 2c       	mov	r11, r1
     d2c:	8c e3       	ldi	r24, 0x3C	; 60
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	6c 01       	movw	r12, r24
     d32:	ce 1a       	sub	r12, r30
     d34:	df 0a       	sbc	r13, r31
     d36:	04 c0       	rjmp	.+8      	; 0xd40 <_ZN9NeoPixels4initEv+0xf4>
     d38:	ec 0c       	add	r14, r12
     d3a:	fd 1c       	adc	r15, r13
     d3c:	e0 0e       	add	r14, r16
     d3e:	f1 1e       	adc	r15, r17
     d40:	f8 01       	movw	r30, r16
     d42:	66 85       	ldd	r22, Z+14	; 0x0e
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	c5 01       	movw	r24, r10
				{
					uint16_t x = i % m_cfg.m_pattern_size;
     d48:	0e 94 83 10 	call	0x2106	; 0x2106 <__udivmodhi4>
     d4c:	bc 01       	movw	r22, r24
     d4e:	66 0f       	add	r22, r22
     d50:	77 1f       	adc	r23, r23
     d52:	68 0f       	add	r22, r24
					m_arry[i] = m_cfg.m_pattern[x];
     d54:	79 1f       	adc	r23, r25
     d56:	61 5f       	subi	r22, 0xF1	; 241
     d58:	7f 4f       	sbci	r23, 0xFF	; 255
     d5a:	60 0f       	add	r22, r16
     d5c:	71 1f       	adc	r23, r17
     d5e:	c7 01       	movw	r24, r14
     d60:	24 df       	rcall	.-440    	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
     d62:	ff ef       	ldi	r31, 0xFF	; 255
     d64:	af 1a       	sub	r10, r31
     d66:	bf 0a       	sbc	r11, r31
     d68:	d8 01       	movw	r26, r16
     d6a:	8d 91       	ld	r24, X+
			fillPixels(m_cfg.m_pattern[0]);
			m_tmrs[1] = 1;
			break;
		case effectPattern:
			memset(m_arry,0,sizeof(m_arry));
			for(uint16_t i=0;i<m_cfg.m_pixels;i++)
     d6c:	9c 91       	ld	r25, X
     d6e:	a8 16       	cp	r10, r24
     d70:	b9 06       	cpc	r11, r25
     d72:	10 f3       	brcs	.-60     	; 0xd38 <_ZN9NeoPixels4initEv+0xec>
     d74:	f8 01       	movw	r30, r16
     d76:	e3 52       	subi	r30, 0x23	; 35
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	80 83       	st	Z, r24
				{
					uint16_t x = i % m_cfg.m_pattern_size;
					m_arry[i] = m_cfg.m_pattern[x];
				}
			m_tmrs[1] = 1;
     d7e:	89 cf       	rjmp	.-238    	; 0xc92 <_ZN9NeoPixels4initEv+0x46>
     d80:	13 db       	rcall	.-2522   	; 0x3a8 <_ZN9NeoPixels16initTheaterChaseEv>
     d82:	87 cf       	rjmp	.-242    	; 0xc92 <_ZN9NeoPixels4initEv+0x46>

00000d84 <_ZN9NeoPixels13RainbowEffectEv.part.2>:
		m_tmrs[0] = m_cfg.m_sustain;
		m_tmrs[1] = 0;
		memset(m_arry,0,sizeof(m_arry));
	}

void NeoPixels::RainbowEffect()
     d84:	8f 92       	push	r8
     d86:	9f 92       	push	r9
     d88:	af 92       	push	r10
     d8a:	bf 92       	push	r11
     d8c:	cf 92       	push	r12
     d8e:	df 92       	push	r13
     d90:	ef 92       	push	r14
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <_ZN9NeoPixels13RainbowEffectEv.part.2+0x1a>
     d9e:	1f 92       	push	r1
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	6c 01       	movw	r12, r24
	{
		m_tmrs[0]--;
		if(m_tmrs[0] == 0)
			{
			for(size_t i=0;i<m_cfg.m_pixels;i++)
     da6:	dc 01       	movw	r26, r24
     da8:	6d 91       	ld	r22, X+
     daa:	7c 91       	ld	r23, X
     dac:	61 15       	cp	r22, r1
     dae:	71 05       	cpc	r23, r1
     db0:	09 f4       	brne	.+2      	; 0xdb4 <_ZN9NeoPixels13RainbowEffectEv.part.2+0x30>
     db2:	3e c0       	rjmp	.+124    	; 0xe30 <_ZN9NeoPixels13RainbowEffectEv.part.2+0xac>
     db4:	4c 01       	movw	r8, r24
     db6:	99 e3       	ldi	r25, 0x39	; 57
     db8:	89 0e       	add	r8, r25
     dba:	91 1c       	adc	r9, r1
     dbc:	74 01       	movw	r14, r8
     dbe:	00 e0       	ldi	r16, 0x00	; 0
     dc0:	10 e0       	ldi	r17, 0x00	; 0
     dc2:	d6 01       	movw	r26, r12
     dc4:	a3 52       	subi	r26, 0x23	; 35
     dc6:	bf 4f       	sbci	r27, 0xFF	; 255
     dc8:	5d 01       	movw	r10, r26
				{
					m_arry[i] = Wheel((byte)((i+m_tmrs[1])&0xff));
     dca:	f5 01       	movw	r30, r10
     dcc:	60 81       	ld	r22, Z
     dce:	60 0f       	add	r22, r16
     dd0:	ce 01       	movw	r24, r28
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	04 dd       	rcall	.-1528   	; 0x7de <_Z5Wheelh>
     dd6:	be 01       	movw	r22, r28
     dd8:	6f 5f       	subi	r22, 0xFF	; 255
     dda:	7f 4f       	sbci	r23, 0xFF	; 255
     ddc:	c7 01       	movw	r24, r14
     dde:	e5 de       	rcall	.-566    	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
     de0:	0f 5f       	subi	r16, 0xFF	; 255
     de2:	1f 4f       	sbci	r17, 0xFF	; 255
void NeoPixels::RainbowEffect()
	{
		m_tmrs[0]--;
		if(m_tmrs[0] == 0)
			{
			for(size_t i=0;i<m_cfg.m_pixels;i++)
     de4:	d6 01       	movw	r26, r12
     de6:	6d 91       	ld	r22, X+
     de8:	7c 91       	ld	r23, X
     dea:	b3 e0       	ldi	r27, 0x03	; 3
     dec:	eb 0e       	add	r14, r27
     dee:	f1 1c       	adc	r15, r1
     df0:	06 17       	cp	r16, r22
     df2:	17 07       	cpc	r17, r23
     df4:	50 f3       	brcs	.-44     	; 0xdca <_ZN9NeoPixels13RainbowEffectEv.part.2+0x46>
     df6:	f5 01       	movw	r30, r10
     df8:	80 81       	ld	r24, Z
				{
					m_arry[i] = Wheel((byte)((i+m_tmrs[1])&0xff));
				}
			m_tmrs[1]++;
     dfa:	8f 5f       	subi	r24, 0xFF	; 255
     dfc:	80 83       	st	Z, r24
     dfe:	f6 01       	movw	r30, r12
     e00:	e4 52       	subi	r30, 0x24	; 36
			m_tmrs[0] = m_cfg.m_sustain;
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	d6 01       	movw	r26, r12
     e06:	14 96       	adiw	r26, 0x04	; 4
     e08:	8c 91       	ld	r24, X
     e0a:	80 83       	st	Z, r24
     e0c:	c4 01       	movw	r24, r8
     e0e:	c2 dc       	rcall	.-1660   	; 0x794 <_Z10sendPixelsP13NeoPixelColorj>
			sendPixels(m_arry,m_cfg.m_pixels);
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
			}
	}
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	ff 90       	pop	r15
     e20:	ef 90       	pop	r14
     e22:	df 90       	pop	r13
     e24:	cf 90       	pop	r12
     e26:	bf 90       	pop	r11
     e28:	af 90       	pop	r10
     e2a:	9f 90       	pop	r9
     e2c:	8f 90       	pop	r8
     e2e:	08 95       	ret
     e30:	fc 01       	movw	r30, r24
     e32:	f9 96       	adiw	r30, 0x39	; 57
     e34:	4f 01       	movw	r8, r30
     e36:	83 52       	subi	r24, 0x23	; 35
     e38:	9f 4f       	sbci	r25, 0xFF	; 255
     e3a:	5c 01       	movw	r10, r24
     e3c:	dc cf       	rjmp	.-72     	; 0xdf6 <_ZN9NeoPixels13RainbowEffectEv.part.2+0x72>

00000e3e <_ZN9NeoPixels9SetConfigER9NeoConfig>:
		if (millis() > m_timer)
			Update();
	}

void NeoPixels::SetConfig(NeoConfig &cfg)
	{
     e3e:	cf 92       	push	r12
     e40:	df 92       	push	r13
     e42:	ef 92       	push	r14
     e44:	ff 92       	push	r15
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	7c 01       	movw	r14, r24
     e50:	eb 01       	movw	r28, r22
	// Set intensity based on scale of 0-255
	NeoPixelColor operator *(byte b);

	};

class NeoConfig
     e52:	88 81       	ld	r24, Y
     e54:	99 81       	ldd	r25, Y+1	; 0x01
     e56:	f7 01       	movw	r30, r14
     e58:	91 83       	std	Z+1, r25	; 0x01
     e5a:	80 83       	st	Z, r24
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	9b 81       	ldd	r25, Y+3	; 0x03
     e60:	93 83       	std	Z+3, r25	; 0x03
     e62:	82 83       	std	Z+2, r24	; 0x02
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	9d 81       	ldd	r25, Y+5	; 0x05
     e68:	95 83       	std	Z+5, r25	; 0x05
     e6a:	84 83       	std	Z+4, r24	; 0x04
     e6c:	8e 81       	ldd	r24, Y+6	; 0x06
     e6e:	9f 81       	ldd	r25, Y+7	; 0x07
     e70:	97 83       	std	Z+7, r25	; 0x07
     e72:	86 83       	std	Z+6, r24	; 0x06
     e74:	88 85       	ldd	r24, Y+8	; 0x08
     e76:	99 85       	ldd	r25, Y+9	; 0x09
     e78:	91 87       	std	Z+9, r25	; 0x09
     e7a:	80 87       	std	Z+8, r24	; 0x08
     e7c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e7e:	82 87       	std	Z+10, r24	; 0x0a
     e80:	8b 85       	ldd	r24, Y+11	; 0x0b
     e82:	83 87       	std	Z+11, r24	; 0x0b
     e84:	8c 85       	ldd	r24, Y+12	; 0x0c
     e86:	84 87       	std	Z+12, r24	; 0x0c
     e88:	8d 85       	ldd	r24, Y+13	; 0x0d
     e8a:	85 87       	std	Z+13, r24	; 0x0d
     e8c:	8e 85       	ldd	r24, Y+14	; 0x0e
     e8e:	86 87       	std	Z+14, r24	; 0x0e
     e90:	87 01       	movw	r16, r14
     e92:	01 5f       	subi	r16, 0xF1	; 241
     e94:	1f 4f       	sbci	r17, 0xFF	; 255
     e96:	2f 96       	adiw	r28, 0x0f	; 15
     e98:	67 01       	movw	r12, r14
     e9a:	fd e2       	ldi	r31, 0x2D	; 45
     e9c:	cf 0e       	add	r12, r31
     e9e:	d1 1c       	adc	r13, r1
     ea0:	be 01       	movw	r22, r28
     ea2:	c8 01       	movw	r24, r16
     ea4:	82 de       	rcall	.-764    	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
     ea6:	0d 5f       	subi	r16, 0xFD	; 253
     ea8:	1f 4f       	sbci	r17, 0xFF	; 255
     eaa:	23 96       	adiw	r28, 0x03	; 3
     eac:	0c 15       	cp	r16, r12
     eae:	1d 05       	cpc	r17, r13
     eb0:	b9 f7       	brne	.-18     	; 0xea0 <_ZN9NeoPixels9SetConfigER9NeoConfig+0x62>
     eb2:	c7 01       	movw	r24, r14
		m_cfg = cfg;
		init();
     eb4:	df 91       	pop	r29
	}
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	df 90       	pop	r13
     ec2:	cf 90       	pop	r12
     ec4:	c3 ce       	rjmp	.-634    	; 0xc4c <_ZN9NeoPixels4initEv>

00000ec6 <_ZN13NeoPixelColormlEh>:
		setBlue(r.getBlue());
		return *this;
	}

NeoPixelColor NeoPixelColor::operator *(byte b)
	{
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	1f 92       	push	r1
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	8c 01       	movw	r16, r24
		NeoPixelColor ret = *this;
     ed6:	49 83       	std	Y+1, r20	; 0x01
     ed8:	4e de       	rcall	.-868    	; 0xb76 <_ZN13NeoPixelColorC1ERKS_>
     eda:	80 91 12 01 	lds	r24, 0x0112

NeoColorOrder NeoPixelColor::m_color_order = RGB;

byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
     ede:	49 81       	ldd	r20, Y+1	; 0x01
     ee0:	d8 01       	movw	r26, r16
	}

NeoPixelColor NeoPixelColor::operator *(byte b)
	{
		NeoPixelColor ret = *this;
		unsigned int x = ret.getRed();
     ee2:	81 30       	cpi	r24, 0x01	; 1

NeoColorOrder NeoPixelColor::m_color_order = RGB;

byte NeoPixelColor::getRed()
	{
		switch(m_color_order)
     ee4:	81 f5       	brne	.+96     	; 0xf46 <_ZN13NeoPixelColormlEh+0x80>
     ee6:	11 96       	adiw	r26, 0x01	; 1
	}

NeoPixelColor NeoPixelColor::operator *(byte b)
	{
		NeoPixelColor ret = *this;
		unsigned int x = ret.getRed();
     ee8:	6c 91       	ld	r22, X
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	24 2f       	mov	r18, r20
		x *= b;
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	c9 01       	movw	r24, r18
     ef2:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__mulhi3>
     ef6:	ef ef       	ldi	r30, 0xFF	; 255
		x /= 255;
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	bf 01       	movw	r22, r30
     efc:	0e 94 83 10 	call	0x2106	; 0x2106 <__udivmodhi4>
     f00:	d8 01       	movw	r26, r16
void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[1] = v;
     f02:	11 96       	adiw	r26, 0x01	; 1
     f04:	6c 93       	st	X, r22
     f06:	11 97       	sbiw	r26, 0x01	; 1
     f08:	4c 91       	ld	r20, X
		x /= 255;
		if(x > 255)
			x = 255;
		ret.setRed(x);

		x = ret.getGreen();
     f0a:	64 2f       	mov	r22, r20
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	c9 01       	movw	r24, r18
		x *= b;
     f10:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__mulhi3>
     f14:	bf 01       	movw	r22, r30
		x /= 255;
     f16:	0e 94 83 10 	call	0x2106	; 0x2106 <__udivmodhi4>
     f1a:	f8 01       	movw	r30, r16
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
     f1c:	60 83       	st	Z, r22
     f1e:	d8 01       	movw	r26, r16
		x /= 255;
		if(x > 255)
			x = 255;
		ret.setGreen(x);

		x = ret.getBlue();
     f20:	12 96       	adiw	r26, 0x02	; 2
     f22:	6c 91       	ld	r22, X
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	c9 01       	movw	r24, r18
		x *= b;
     f28:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__mulhi3>
     f2c:	6f ef       	ldi	r22, 0xFF	; 255
		x /= 255;
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	0e 94 83 10 	call	0x2106	; 0x2106 <__udivmodhi4>
     f34:	f8 01       	movw	r30, r16
		if(x > 255)
			x = 255;
		ret.setBlue(x);
     f36:	62 83       	std	Z+2, r22	; 0x02
     f38:	c8 01       	movw	r24, r16

		return ret;
	}
     f3a:	0f 90       	pop	r0
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	08 95       	ret
     f46:	6c 91       	ld	r22, X
	}

NeoPixelColor NeoPixelColor::operator *(byte b)
	{
		NeoPixelColor ret = *this;
		unsigned int x = ret.getRed();
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	24 2f       	mov	r18, r20
		x *= b;
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	c9 01       	movw	r24, r18
     f50:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__mulhi3>
     f54:	ef ef       	ldi	r30, 0xFF	; 255
		x /= 255;
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	bf 01       	movw	r22, r30
     f5a:	0e 94 83 10 	call	0x2106	; 0x2106 <__udivmodhi4>
     f5e:	d8 01       	movw	r26, r16
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
     f60:	6c 93       	st	X, r22
     f62:	11 96       	adiw	r26, 0x01	; 1
		x /= 255;
		if(x > 255)
			x = 255;
		ret.setRed(x);

		x = ret.getGreen();
     f64:	4c 91       	ld	r20, X
     f66:	64 2f       	mov	r22, r20
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	c9 01       	movw	r24, r18
		x *= b;
     f6c:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__mulhi3>
     f70:	bf 01       	movw	r22, r30
		x /= 255;
     f72:	0e 94 83 10 	call	0x2106	; 0x2106 <__udivmodhi4>
     f76:	f8 01       	movw	r30, r16
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
     f78:	61 83       	std	Z+1, r22	; 0x01
     f7a:	d1 cf       	rjmp	.-94     	; 0xf1e <_ZN13NeoPixelColormlEh+0x58>

00000f7c <_ZN9NeoPixels19TwinkleSingleEffectEv>:
		NeoPixelState ret = (NeoPixelState)(x & 0x03);
		return ret;
	}

void NeoPixels::TwinkleSingleEffect()
	{
     f7c:	2f 92       	push	r2
     f7e:	3f 92       	push	r3
     f80:	4f 92       	push	r4
     f82:	5f 92       	push	r5
     f84:	6f 92       	push	r6
     f86:	7f 92       	push	r7
     f88:	8f 92       	push	r8
     f8a:	9f 92       	push	r9
     f8c:	af 92       	push	r10
     f8e:	bf 92       	push	r11
     f90:	cf 92       	push	r12
     f92:	df 92       	push	r13
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	27 97       	sbiw	r28, 0x07	; 7
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	5c 01       	movw	r10, r24
		size_t idx;
		for(idx = 0;idx < m_cfg.m_pixels;idx++)
     fb2:	fc 01       	movw	r30, r24
     fb4:	60 81       	ld	r22, Z
     fb6:	71 81       	ldd	r23, Z+1	; 0x01
     fb8:	61 15       	cp	r22, r1
     fba:	71 05       	cpc	r23, r1
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x44>
     fbe:	f2 c0       	rjmp	.+484    	; 0x11a4 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x228>
     fc0:	6c 01       	movw	r12, r24
     fc2:	fc ed       	ldi	r31, 0xDC	; 220
     fc4:	cf 0e       	add	r12, r31
     fc6:	d1 1c       	adc	r13, r1
     fc8:	c9 96       	adiw	r24, 0x39	; 57
     fca:	9f 83       	std	Y+7, r25	; 0x07
     fcc:	8e 83       	std	Y+6, r24	; 0x06
     fce:	3c 01       	movw	r6, r24
     fd0:	e1 2c       	mov	r14, r1
     fd2:	f1 2c       	mov	r15, r1
     fd4:	f5 01       	movw	r30, r10
     fd6:	e0 5f       	subi	r30, 0xF0	; 240
     fd8:	fe 4f       	sbci	r31, 0xFE	; 254
     fda:	fd 83       	std	Y+5, r31	; 0x05
     fdc:	ec 83       	std	Y+4, r30	; 0x04
								//m_arry[idx] = NeoPixelColor(255,0,0) * (byte)(x);
								m_arry[idx] = m_cfg.m_pattern[0] * (byte)(x);
								}
							break;
						case Sustaining:
							m_arry[idx] = m_cfg.m_pattern[0];
     fde:	15 01       	movw	r2, r10
     fe0:	ff e0       	ldi	r31, 0x0F	; 15
     fe2:	2f 0e       	add	r2, r31
     fe4:	31 1c       	adc	r3, r1

void NeoPixels::SetPixelState(size_t idx,NeoPixelState state)
	{
		byte x = ((byte)state) & 0x03;
		byte mask = 0x03;
		x <<= 2 * (idx % 4);
     fe6:	23 e0       	ldi	r18, 0x03	; 3
     fe8:	82 2e       	mov	r8, r18
     fea:	91 2c       	mov	r9, r1
     fec:	1f c0       	rjmp	.+62     	; 0x102c <_ZN9NeoPixels19TwinkleSingleEffectEv+0xb0>
		for(idx = 0;idx < m_cfg.m_pixels;idx++)
			{
				NeoPixelState ps = GetPixelState(idx);
				if(m_tmrs[idx] == 0)
					{
						switch(ps)
     fee:	82 30       	cpi	r24, 0x02	; 2
     ff0:	09 f4       	brne	.+2      	; 0xff4 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x78>
     ff2:	c5 c0       	rjmp	.+394    	; 0x117e <_ZN9NeoPixels19TwinkleSingleEffectEv+0x202>
     ff4:	83 30       	cpi	r24, 0x03	; 3
     ff6:	09 f4       	brne	.+2      	; 0xffa <_ZN9NeoPixels19TwinkleSingleEffectEv+0x7e>
     ff8:	a3 c0       	rjmp	.+326    	; 0x1140 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x1c4>
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x84>
     ffe:	82 c0       	rjmp	.+260    	; 0x1104 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x188>
							{
						case TurnedOff:
							if(m_active > 0)
    1000:	ec 81       	ldd	r30, Y+4	; 0x04
    1002:	fd 81       	ldd	r31, Y+5	; 0x05
    1004:	80 81       	ld	r24, Z
    1006:	91 81       	ldd	r25, Z+1	; 0x01
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	19 f0       	breq	.+6      	; 0x1012 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x96>
								m_active--;
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	91 83       	std	Z+1, r25	; 0x01
    1010:	80 83       	st	Z, r24
	}

void NeoPixels::TwinkleSingleEffect()
	{
		size_t idx;
		for(idx = 0;idx < m_cfg.m_pixels;idx++)
    1012:	ff ef       	ldi	r31, 0xFF	; 255
    1014:	ef 1a       	sub	r14, r31
    1016:	ff 0a       	sbc	r15, r31
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	c8 1a       	sub	r12, r24
    101c:	d8 0a       	sbc	r13, r24
    101e:	93 e0       	ldi	r25, 0x03	; 3
    1020:	69 0e       	add	r6, r25
    1022:	71 1c       	adc	r7, r1
    1024:	e6 16       	cp	r14, r22
    1026:	f7 06       	cpc	r15, r23
    1028:	08 f0       	brcs	.+2      	; 0x102c <_ZN9NeoPixels19TwinkleSingleEffectEv+0xb0>
    102a:	c3 c0       	rjmp	.+390    	; 0x11b2 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x236>
		m_status_bits[idx/4] = v;
	}

NeoPixelState NeoPixels::GetPixelState(size_t idx)
	{
		byte x = m_status_bits[idx/4];
    102c:	87 01       	movw	r16, r14
    102e:	16 95       	lsr	r17
    1030:	07 95       	ror	r16
    1032:	16 95       	lsr	r17
    1034:	07 95       	ror	r16
    1036:	0a 0d       	add	r16, r10
    1038:	1b 1d       	adc	r17, r11
    103a:	01 53       	subi	r16, 0x31	; 49
    103c:	1f 4f       	sbci	r17, 0xFF	; 255
    103e:	f8 01       	movw	r30, r16
    1040:	20 81       	ld	r18, Z
		x >>= 2*(idx % 4);
    1042:	27 01       	movw	r4, r14
    1044:	f3 e0       	ldi	r31, 0x03	; 3
    1046:	4f 22       	and	r4, r31
    1048:	55 24       	eor	r5, r5
    104a:	44 0c       	add	r4, r4
    104c:	55 1c       	adc	r5, r5
    104e:	82 2f       	mov	r24, r18
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	04 2c       	mov	r0, r4
    1054:	02 c0       	rjmp	.+4      	; 0x105a <_ZN9NeoPixels19TwinkleSingleEffectEv+0xde>
    1056:	95 95       	asr	r25
    1058:	87 95       	ror	r24
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <_ZN9NeoPixels19TwinkleSingleEffectEv+0xda>
		NeoPixelState ret = (NeoPixelState)(x & 0x03);
    105e:	83 70       	andi	r24, 0x03	; 3
	{
		size_t idx;
		for(idx = 0;idx < m_cfg.m_pixels;idx++)
			{
				NeoPixelState ps = GetPixelState(idx);
				if(m_tmrs[idx] == 0)
    1060:	f6 01       	movw	r30, r12
    1062:	40 81       	ld	r20, Z
    1064:	44 23       	and	r20, r20
    1066:	19 f2       	breq	.-122    	; 0xfee <_ZN9NeoPixels19TwinkleSingleEffectEv+0x72>
							break;
							}
					}
				else
					{
						m_tmrs[idx]--;
    1068:	41 50       	subi	r20, 0x01	; 1
    106a:	f6 01       	movw	r30, r12
    106c:	40 83       	st	Z, r20
						size_t x;
						switch(ps)
    106e:	82 30       	cpi	r24, 0x02	; 2
    1070:	41 f0       	breq	.+16     	; 0x1082 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x106>
							break;
						case Sustaining:
							m_arry[idx] = m_cfg.m_pattern[0];
							break;
						case Decaying:
							if(m_cfg.m_decay > 0)
    1072:	f5 01       	movw	r30, r10
					}
				else
					{
						m_tmrs[idx]--;
						size_t x;
						switch(ps)
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	69 f1       	breq	.+90     	; 0x10d2 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x156>
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	51 f0       	breq	.+20     	; 0x1090 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x114>
    107c:	60 81       	ld	r22, Z
    107e:	71 81       	ldd	r23, Z+1	; 0x01
    1080:	c8 cf       	rjmp	.-112    	; 0x1012 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x96>
								//m_arry[idx] = NeoPixelColor(255,0,0) * (byte)(x);
								m_arry[idx] = m_cfg.m_pattern[0] * (byte)(x);
								}
							break;
						case Sustaining:
							m_arry[idx] = m_cfg.m_pattern[0];
    1082:	b1 01       	movw	r22, r2
    1084:	c3 01       	movw	r24, r6
    1086:	91 dd       	rcall	.-1246   	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
    1088:	f5 01       	movw	r30, r10
    108a:	60 81       	ld	r22, Z
    108c:	71 81       	ldd	r23, Z+1	; 0x01
    108e:	c1 cf       	rjmp	.-126    	; 0x1012 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x96>
							break;
    1090:	22 81       	ldd	r18, Z+2	; 0x02
						switch(ps)
							{
						case TurnedOff:
							break;
						case Attacking:
							if(m_cfg.m_attack > 0)
    1092:	33 81       	ldd	r19, Z+3	; 0x03
    1094:	21 15       	cp	r18, r1
    1096:	31 05       	cpc	r19, r1
    1098:	89 f3       	breq	.-30     	; 0x107c <_ZN9NeoPixels19TwinkleSingleEffectEv+0x100>
    109a:	80 e0       	ldi	r24, 0x00	; 0
								{
								x = 256 / m_cfg.m_attack;
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	b9 01       	movw	r22, r18
    10a0:	0e 94 83 10 	call	0x2106	; 0x2106 <__udivmodhi4>
    10a4:	c9 01       	movw	r24, r18
								x *= m_cfg.m_attack - m_tmrs[idx];
    10a6:	84 1b       	sub	r24, r20
    10a8:	91 09       	sbc	r25, r1
    10aa:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__mulhi3>
    10ae:	8f 3f       	cpi	r24, 0xFF	; 255
    10b0:	91 05       	cpc	r25, r1
    10b2:	19 f0       	breq	.+6      	; 0x10ba <_ZN9NeoPixels19TwinkleSingleEffectEv+0x13e>
    10b4:	10 f0       	brcs	.+4      	; 0x10ba <_ZN9NeoPixels19TwinkleSingleEffectEv+0x13e>
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	48 2f       	mov	r20, r24
								if(x > 255)
									x = 255;
								//m_arry[idx] = NeoPixelColor(255,0,0) * (byte)(x);
								m_arry[idx] = m_cfg.m_pattern[0] * (byte)(x);
    10bc:	b1 01       	movw	r22, r2
								x *= m_cfg.m_decay - m_tmrs[idx];
								x = 256 - x;
								if(x > 255)
									x = 255;
								//m_arry[idx] = NeoPixelColor(0,255,0) * (byte)(x);
								m_arry[idx] = m_cfg.m_pattern[0] * (byte)(x);
    10be:	ce 01       	movw	r24, r28
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	01 df       	rcall	.-510    	; 0xec6 <_ZN13NeoPixelColormlEh>
    10c4:	be 01       	movw	r22, r28
    10c6:	6f 5f       	subi	r22, 0xFF	; 255
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	c3 01       	movw	r24, r6
    10cc:	6e dd       	rcall	.-1316   	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
    10ce:	f5 01       	movw	r30, r10
    10d0:	d5 cf       	rjmp	.-86     	; 0x107c <_ZN9NeoPixels19TwinkleSingleEffectEv+0x100>
    10d2:	26 81       	ldd	r18, Z+6	; 0x06
    10d4:	37 81       	ldd	r19, Z+7	; 0x07
    10d6:	21 15       	cp	r18, r1
							break;
						case Sustaining:
							m_arry[idx] = m_cfg.m_pattern[0];
							break;
						case Decaying:
							if(m_cfg.m_decay > 0)
    10d8:	31 05       	cpc	r19, r1
    10da:	81 f2       	breq	.-96     	; 0x107c <_ZN9NeoPixels19TwinkleSingleEffectEv+0x100>
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	91 e0       	ldi	r25, 0x01	; 1
    10e0:	b9 01       	movw	r22, r18
								{
								x = 256 / m_cfg.m_decay;
    10e2:	0e 94 83 10 	call	0x2106	; 0x2106 <__udivmodhi4>
    10e6:	c9 01       	movw	r24, r18
    10e8:	84 1b       	sub	r24, r20
    10ea:	91 09       	sbc	r25, r1
								x *= m_cfg.m_decay - m_tmrs[idx];
    10ec:	fb d7       	rcall	.+4086   	; 0x20e4 <__mulhi3>
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	51 e0       	ldi	r21, 0x01	; 1
    10f2:	48 1b       	sub	r20, r24
    10f4:	59 0b       	sbc	r21, r25
    10f6:	4f 3f       	cpi	r20, 0xFF	; 255
    10f8:	51 05       	cpc	r21, r1
    10fa:	01 f3       	breq	.-64     	; 0x10bc <_ZN9NeoPixels19TwinkleSingleEffectEv+0x140>
    10fc:	f8 f2       	brcs	.-66     	; 0x10bc <_ZN9NeoPixels19TwinkleSingleEffectEv+0x140>
    10fe:	4f ef       	ldi	r20, 0xFF	; 255
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	dc cf       	rjmp	.-72     	; 0x10bc <_ZN9NeoPixels19TwinkleSingleEffectEv+0x140>
    1104:	b1 01       	movw	r22, r2
    1106:	c3 01       	movw	r24, r6
    1108:	50 dd       	rcall	.-1376   	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
    110a:	c4 01       	movw	r24, r8
						case TurnedOff:
							if(m_active > 0)
								m_active--;
							break;
						case Attacking:
							m_arry[idx] = m_cfg.m_pattern[0];
    110c:	04 2c       	mov	r0, r4
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x196>
    1110:	88 0f       	add	r24, r24
    1112:	0a 94       	dec	r0
void NeoPixels::SetPixelState(size_t idx,NeoPixelState state)
	{
		byte x = ((byte)state) & 0x03;
		byte mask = 0x03;
		x <<= 2 * (idx % 4);
		mask <<= 2 * (idx % 4);
    1114:	ea f7       	brpl	.-6      	; 0x1110 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x194>
    1116:	80 95       	com	r24
    1118:	f8 01       	movw	r30, r16
    111a:	90 81       	ld	r25, Z
    111c:	28 2f       	mov	r18, r24
    111e:	29 23       	and	r18, r25
		mask = ~mask;
    1120:	82 e0       	ldi	r24, 0x02	; 2
		byte v = m_status_bits[idx/4] & mask;
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x1ac>
    1126:	88 0f       	add	r24, r24
    1128:	4a 94       	dec	r4

void NeoPixels::SetPixelState(size_t idx,NeoPixelState state)
	{
		byte x = ((byte)state) & 0x03;
		byte mask = 0x03;
		x <<= 2 * (idx % 4);
    112a:	ea f7       	brpl	.-6      	; 0x1126 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x1aa>
    112c:	82 2b       	or	r24, r18
    112e:	80 83       	st	Z, r24
    1130:	f5 01       	movw	r30, r10
    1132:	84 81       	ldd	r24, Z+4	; 0x04
    1134:	f6 01       	movw	r30, r12
		mask <<= 2 * (idx % 4);
		mask = ~mask;
		byte v = m_status_bits[idx/4] & mask;
		v |= x;
    1136:	80 83       	st	Z, r24
		m_status_bits[idx/4] = v;
    1138:	f5 01       	movw	r30, r10
							break;
						case Attacking:
							m_arry[idx] = m_cfg.m_pattern[0];
							SetPixelState(idx,Sustaining);
							//m_tmrs[idx] = RandomOffset(m_sustain);
							m_tmrs[idx] = (byte) m_cfg.m_sustain > 255 ? 255 : m_cfg.m_sustain;
    113a:	60 81       	ld	r22, Z
    113c:	71 81       	ldd	r23, Z+1	; 0x01
    113e:	69 cf       	rjmp	.-302    	; 0x1012 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x96>
    1140:	c4 01       	movw	r24, r8
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x1ca>
    1144:	88 0f       	add	r24, r24
    1146:	4a 94       	dec	r4
							break;
    1148:	ea f7       	brpl	.-6      	; 0x1144 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x1c8>
void NeoPixels::SetPixelState(size_t idx,NeoPixelState state)
	{
		byte x = ((byte)state) & 0x03;
		byte mask = 0x03;
		x <<= 2 * (idx % 4);
		mask <<= 2 * (idx % 4);
    114a:	80 95       	com	r24
    114c:	28 23       	and	r18, r24
    114e:	f8 01       	movw	r30, r16
    1150:	20 83       	st	Z, r18
    1152:	80 91 12 01 	lds	r24, 0x0112
		mask = ~mask;
		byte v = m_status_bits[idx/4] & mask;
    1156:	81 30       	cpi	r24, 0x01	; 1
		v |= x;
		m_status_bits[idx/4] = v;
    1158:	11 f5       	brne	.+68     	; 0x119e <_ZN9NeoPixels19TwinkleSingleEffectEv+0x222>
    115a:	1a 82       	std	Y+2, r1	; 0x02



void NeoPixelColor::setRed(byte v)
	{
		switch(m_color_order)
    115c:	19 82       	std	Y+1, r1	; 0x01
    115e:	1b 82       	std	Y+3, r1	; 0x03
    1160:	be 01       	movw	r22, r28
    1162:	6f 5f       	subi	r22, 0xFF	; 255
			{
		case GRB:
			colors[1] = v;
    1164:	7f 4f       	sbci	r23, 0xFF	; 255
void NeoPixelColor::setGreen(byte v)
	{
		switch(m_color_order)
			{
		case GRB:
			colors[0] = v;
    1166:	c3 01       	movw	r24, r6
	}


void NeoPixelColor::setBlue(byte v)
	{
		colors[2] = v;
    1168:	20 dd       	rcall	.-1472   	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
							SetPixelState(idx,Decaying);
							m_tmrs[idx] = (byte) m_cfg.m_decay > 255 ? 255 : m_cfg.m_decay;
							break;
						case Decaying:
							SetPixelState(idx,TurnedOff);
							m_arry[idx] = NeoPixelColor(0,0,0);
    116a:	f5 01       	movw	r30, r10
    116c:	80 85       	ldd	r24, Z+8	; 0x08
    116e:	91 85       	ldd	r25, Z+9	; 0x09
    1170:	27 da       	rcall	.-2994   	; 0x5c0 <_Z12RandomOffsetj>
    1172:	f6 01       	movw	r30, r12
    1174:	80 83       	st	Z, r24
							m_tmrs[idx] = RandomOffset(m_cfg.m_off);//(byte) m_off > 255 ? 255 : m_off;
    1176:	f5 01       	movw	r30, r10
    1178:	60 81       	ld	r22, Z
    117a:	71 81       	ldd	r23, Z+1	; 0x01
    117c:	4a cf       	rjmp	.-364    	; 0x1012 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x96>
    117e:	c4 01       	movw	r24, r8
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x208>
    1182:	88 0f       	add	r24, r24
    1184:	4a 94       	dec	r4
    1186:	ea f7       	brpl	.-6      	; 0x1182 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x206>
    1188:	28 2b       	or	r18, r24
							break;
    118a:	f8 01       	movw	r30, r16

void NeoPixels::SetPixelState(size_t idx,NeoPixelState state)
	{
		byte x = ((byte)state) & 0x03;
		byte mask = 0x03;
		x <<= 2 * (idx % 4);
    118c:	20 83       	st	Z, r18
    118e:	f5 01       	movw	r30, r10
    1190:	86 81       	ldd	r24, Z+6	; 0x06
    1192:	f6 01       	movw	r30, r12
    1194:	80 83       	st	Z, r24
		mask <<= 2 * (idx % 4);
		mask = ~mask;
		byte v = m_status_bits[idx/4] & mask;
		v |= x;
    1196:	f5 01       	movw	r30, r10
		m_status_bits[idx/4] = v;
    1198:	60 81       	ld	r22, Z
    119a:	71 81       	ldd	r23, Z+1	; 0x01
							//m_tmrs[idx] = RandomOffset(m_sustain);
							m_tmrs[idx] = (byte) m_cfg.m_sustain > 255 ? 255 : m_cfg.m_sustain;
							break;
						case Sustaining:
							SetPixelState(idx,Decaying);
							m_tmrs[idx] = (byte) m_cfg.m_decay > 255 ? 255 : m_cfg.m_decay;
    119c:	3a cf       	rjmp	.-396    	; 0x1012 <_ZN9NeoPixels19TwinkleSingleEffectEv+0x96>
    119e:	19 82       	std	Y+1, r1	; 0x01
    11a0:	1a 82       	std	Y+2, r1	; 0x02
    11a2:	dd cf       	rjmp	.-70     	; 0x115e <_ZN9NeoPixels19TwinkleSingleEffectEv+0x1e2>
    11a4:	80 5f       	subi	r24, 0xF0	; 240
    11a6:	9e 4f       	sbci	r25, 0xFE	; 254
    11a8:	9d 83       	std	Y+5, r25	; 0x05
							break;
    11aa:	8c 83       	std	Y+4, r24	; 0x04
		case GRB:
			colors[1] = v;
			break;
		case RGB:
		default:
			colors[0] = v;
    11ac:	f9 96       	adiw	r30, 0x39	; 57
		case GRB:
			colors[0] = v;
			break;
		case RGB:
		default:
			colors[1] = v;
    11ae:	ff 83       	std	Y+7, r31	; 0x07
    11b0:	ee 83       	std	Y+6, r30	; 0x06
    11b2:	ec 81       	ldd	r30, Y+4	; 0x04
    11b4:	fd 81       	ldd	r31, Y+5	; 0x05
    11b6:	20 81       	ld	r18, Z
    11b8:	31 81       	ldd	r19, Z+1	; 0x01
    11ba:	f5 01       	movw	r30, r10
    11bc:	e2 5f       	subi	r30, 0xF2	; 242
    11be:	fe 4f       	sbci	r31, 0xFE	; 254
								}
							break;
							}
					}
			}
		if(m_active < m_lit)
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	28 17       	cp	r18, r24
    11c6:	39 07       	cpc	r19, r25
    11c8:	40 f4       	brcc	.+16     	; 0x11da <_ZN9NeoPixels19TwinkleSingleEffectEv+0x25e>
    11ca:	bc 01       	movw	r22, r24
    11cc:	62 1b       	sub	r22, r18
    11ce:	73 0b       	sbc	r23, r19
    11d0:	c5 01       	movw	r24, r10
    11d2:	9d db       	rcall	.-2246   	; 0x90e <_ZN9NeoPixels16StartRandomPixelEj>
    11d4:	f5 01       	movw	r30, r10
    11d6:	60 81       	ld	r22, Z
			StartRandomPixel(m_lit - m_active);
    11d8:	71 81       	ldd	r23, Z+1	; 0x01
    11da:	8e 81       	ldd	r24, Y+6	; 0x06
    11dc:	9f 81       	ldd	r25, Y+7	; 0x07
    11de:	da da       	rcall	.-2636   	; 0x794 <_Z10sendPixelsP13NeoPixelColorj>
    11e0:	27 96       	adiw	r28, 0x07	; 7
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
		sendPixels(m_arry,m_cfg.m_pixels);
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
	}
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	df 90       	pop	r13
    11fa:	cf 90       	pop	r12
    11fc:	bf 90       	pop	r11
    11fe:	af 90       	pop	r10
    1200:	9f 90       	pop	r9
    1202:	8f 90       	pop	r8
    1204:	7f 90       	pop	r7
    1206:	6f 90       	pop	r6
    1208:	5f 90       	pop	r5
    120a:	4f 90       	pop	r4
    120c:	3f 90       	pop	r3
    120e:	2f 90       	pop	r2
    1210:	08 95       	ret

00001212 <_ZN9NeoPixels6UpdateEv>:

void NeoPixels::Update()
	{
    1212:	0f 93       	push	r16
    1214:	1f 93       	push	r17
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	ec 01       	movw	r28, r24

		switch (m_cfg.m_effect)
    121c:	9a 85       	ldd	r25, Y+10	; 0x0a
    121e:	93 30       	cpi	r25, 0x03	; 3
    1220:	b9 f1       	breq	.+110    	; 0x1290 <_ZN9NeoPixels6UpdateEv+0x7e>
    1222:	48 f0       	brcs	.+18     	; 0x1236 <_ZN9NeoPixels6UpdateEv+0x24>
    1224:	95 30       	cpi	r25, 0x05	; 5
    1226:	71 f0       	breq	.+28     	; 0x1244 <_ZN9NeoPixels6UpdateEv+0x32>
    1228:	b0 f1       	brcs	.+108    	; 0x1296 <_ZN9NeoPixels6UpdateEv+0x84>
    122a:	96 30       	cpi	r25, 0x06	; 6
    122c:	11 f5       	brne	.+68     	; 0x1272 <_ZN9NeoPixels6UpdateEv+0x60>
			{
		case effectCandle:
			CandleEffect();
    122e:	ce 01       	movw	r24, r28
    1230:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_ZN9NeoPixels12CandleEffectEv>
			break;
    1234:	0f c0       	rjmp	.+30     	; 0x1254 <_ZN9NeoPixels6UpdateEv+0x42>
	}

void NeoPixels::Update()
	{

		switch (m_cfg.m_effect)
    1236:	91 30       	cpi	r25, 0x01	; 1
    1238:	71 f1       	breq	.+92     	; 0x1296 <_ZN9NeoPixels6UpdateEv+0x84>
    123a:	92 30       	cpi	r25, 0x02	; 2
    123c:	d1 f4       	brne	.+52     	; 0x1272 <_ZN9NeoPixels6UpdateEv+0x60>
			{
		case effectCandle:
			CandleEffect();
			break;
		case effectTwinkle:
			TwinkleSingleEffect();
    123e:	ce 01       	movw	r24, r28
    1240:	9d de       	rcall	.-710    	; 0xf7c <_ZN9NeoPixels19TwinkleSingleEffectEv>
    1242:	08 c0       	rjmp	.+16     	; 0x1254 <_ZN9NeoPixels6UpdateEv+0x42>
			break;
    1244:	fe 01       	movw	r30, r28
		memset(m_arry,0,sizeof(m_arry));
	}

void NeoPixels::RainbowEffect()
	{
		m_tmrs[0]--;
    1246:	e4 52       	subi	r30, 0x24	; 36
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	80 81       	ld	r24, Z
    124c:	81 50       	subi	r24, 0x01	; 1
    124e:	80 83       	st	Z, r24
    1250:	88 23       	and	r24, r24
		if(m_tmrs[0] == 0)
    1252:	81 f1       	breq	.+96     	; 0x12b4 <_ZN9NeoPixels6UpdateEv+0xa2>
    1254:	b3 d6       	rcall	.+3430   	; 0x1fbc <_Z6millisv>
				sendPixels(m_arry,PIXELS);
				m_tmrs[1] = 0;
				}
			break;
			}
		m_timer = millis() + 10;
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	0a 96       	adiw	r24, 0x0a	; 10
    125c:	a1 1d       	adc	r26, r1
    125e:	b1 1d       	adc	r27, r1
    1260:	8d a7       	std	Y+45, r24	; 0x2d
    1262:	9e a7       	std	Y+46, r25	; 0x2e
    1264:	af a7       	std	Y+47, r26	; 0x2f
    1266:	b8 ab       	std	Y+48, r27	; 0x30
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
	}
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	08 95       	ret
    1272:	26 e9       	ldi	r18, 0x96	; 150
    1274:	ce 01       	movw	r24, r28
			break;
		case effectOff:
		default:
			//if(m_tmrs[1])
				{
				memset(m_arry,0,sizeof(m_arry));
    1276:	c9 96       	adiw	r24, 0x39	; 57
    1278:	fc 01       	movw	r30, r24
    127a:	11 92       	st	Z+, r1
    127c:	2a 95       	dec	r18
    127e:	e9 f7       	brne	.-6      	; 0x127a <_ZN9NeoPixels6UpdateEv+0x68>
    1280:	62 e3       	ldi	r22, 0x32	; 50
    1282:	70 e0       	ldi	r23, 0x00	; 0
				sendPixels(m_arry,PIXELS);
    1284:	87 da       	rcall	.-2802   	; 0x794 <_Z10sendPixelsP13NeoPixelColorj>
    1286:	fe 01       	movw	r30, r28
    1288:	e3 52       	subi	r30, 0x23	; 35
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
				m_tmrs[1] = 0;
    128c:	10 82       	st	Z, r1
    128e:	e2 cf       	rjmp	.-60     	; 0x1254 <_ZN9NeoPixels6UpdateEv+0x42>
    1290:	ce 01       	movw	r24, r28
    1292:	a5 d8       	rcall	.-3766   	; 0x3de <_ZN9NeoPixels18TheaterChaseEffectEv>
				}
			break;
    1294:	df cf       	rjmp	.-66     	; 0x1254 <_ZN9NeoPixels6UpdateEv+0x42>
			break;
		case effectTwinkle:
			TwinkleSingleEffect();
			break;
		case effectTheaterChase:
			TheaterChaseEffect();
    1296:	8e 01       	movw	r16, r28
    1298:	03 52       	subi	r16, 0x23	; 35
    129a:	1f 4f       	sbci	r17, 0xFF	; 255
			break;
    129c:	f8 01       	movw	r30, r16
		case effectRainbow:
			RainbowEffect();
			break;
		case effectAllOn:
		case effectPattern:
			if(m_tmrs[1])
    129e:	80 81       	ld	r24, Z
    12a0:	88 23       	and	r24, r24
    12a2:	c1 f2       	breq	.-80     	; 0x1254 <_ZN9NeoPixels6UpdateEv+0x42>
    12a4:	62 e3       	ldi	r22, 0x32	; 50
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	ce 01       	movw	r24, r28
    12aa:	c9 96       	adiw	r24, 0x39	; 57
				{
				sendPixels(m_arry,PIXELS);
    12ac:	73 da       	rcall	.-2842   	; 0x794 <_Z10sendPixelsP13NeoPixelColorj>
    12ae:	f8 01       	movw	r30, r16
    12b0:	10 82       	st	Z, r1
    12b2:	d0 cf       	rjmp	.-96     	; 0x1254 <_ZN9NeoPixels6UpdateEv+0x42>
    12b4:	ce 01       	movw	r24, r28
    12b6:	66 dd       	rcall	.-1332   	; 0xd84 <_ZN9NeoPixels13RainbowEffectEv.part.2>
				m_tmrs[1] = 0;
    12b8:	cd cf       	rjmp	.-102    	; 0x1254 <_ZN9NeoPixels6UpdateEv+0x42>

000012ba <_ZN9NeoPixels5beginEv>:
		spacing = 2;
		memset(m_arry,0,sizeof(m_arry));
	}

void NeoPixels::begin()
	{
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	ec 01       	movw	r28, r24
		m_timer = millis();
    12c0:	7d d6       	rcall	.+3322   	; 0x1fbc <_Z6millisv>
    12c2:	6d a7       	std	Y+45, r22	; 0x2d
    12c4:	7e a7       	std	Y+46, r23	; 0x2e
    12c6:	8f a7       	std	Y+47, r24	; 0x2f
    12c8:	98 ab       	std	Y+48, r25	; 0x30
    12ca:	ce 01       	movw	r24, r28
		init();
    12cc:	bf dc       	rcall	.-1666   	; 0xc4c <_ZN9NeoPixels4initEv>
    12ce:	ce 01       	movw	r24, r28
    12d0:	df 91       	pop	r29
		Update();
    12d2:	cf 91       	pop	r28
	}
    12d4:	9e cf       	rjmp	.-196    	; 0x1212 <_ZN9NeoPixels6UpdateEv>

000012d6 <_ZN9NeoPixels4TaskEv>:
			sendPixels(m_arry,m_cfg.m_pixels);
			}
	}

void NeoPixels::Task()
	{
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	ec 01       	movw	r28, r24
		if (millis() > m_timer)
    12e0:	6d d6       	rcall	.+3290   	; 0x1fbc <_Z6millisv>
    12e2:	0d a5       	ldd	r16, Y+45	; 0x2d
    12e4:	1e a5       	ldd	r17, Y+46	; 0x2e
    12e6:	2f a5       	ldd	r18, Y+47	; 0x2f
    12e8:	38 a9       	ldd	r19, Y+48	; 0x30
    12ea:	06 17       	cp	r16, r22
    12ec:	17 07       	cpc	r17, r23
    12ee:	28 07       	cpc	r18, r24
    12f0:	39 07       	cpc	r19, r25
    12f2:	28 f0       	brcs	.+10     	; 0x12fe <_ZN9NeoPixels4TaskEv+0x28>
    12f4:	df 91       	pop	r29
			Update();
	}
    12f6:	cf 91       	pop	r28
    12f8:	1f 91       	pop	r17
    12fa:	0f 91       	pop	r16
    12fc:	08 95       	ret
    12fe:	ce 01       	movw	r24, r28
	}

void NeoPixels::Task()
	{
		if (millis() > m_timer)
			Update();
    1300:	df 91       	pop	r29
	}
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	84 cf       	rjmp	.-248    	; 0x1212 <_ZN9NeoPixels6UpdateEv>

0000130a <_ZN6MyMqttC1Ev>:
#define debug_P(x)
#define debug(x)
#define debug_char(x)
#endif

MyMqtt::MyMqtt()
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	ec 01       	movw	r28, r24
    1310:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN9NeoConfigC1Ev>
	{
		m_flags.reg = 0;
    1314:	1d a6       	std	Y+45, r1	; 0x2d
		cmdbuf = localbuf;
    1316:	ce 01       	movw	r24, r28
    1318:	c2 96       	adiw	r24, 0x32	; 50
    131a:	9f a7       	std	Y+47, r25	; 0x2f
    131c:	8e a7       	std	Y+46, r24	; 0x2e
		cmdbuflen = sizeof(localbuf);
    131e:	80 e4       	ldi	r24, 0x40	; 64
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	99 ab       	std	Y+49, r25	; 0x31
    1324:	88 ab       	std	Y+48, r24	; 0x30
		cmd_idx = 0;
    1326:	ce 58       	subi	r28, 0x8E	; 142
    1328:	df 4f       	sbci	r29, 0xFF	; 255
    132a:	19 82       	std	Y+1, r1	; 0x01
    132c:	18 82       	st	Y, r1

	}
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	08 95       	ret

00001334 <_ZN6MyMqtt9SetBufferEPcj>:

void MyMqtt::SetBuffer(char *buf,size_t len)
	{
    1334:	fc 01       	movw	r30, r24
		if(buf == NULL)
    1336:	61 15       	cp	r22, r1
    1338:	71 05       	cpc	r23, r1
    133a:	69 f0       	breq	.+26     	; 0x1356 <_ZN6MyMqtt9SetBufferEPcj+0x22>
				cmdbuf = localbuf;
				cmdbuflen = sizeof(localbuf);
			}
		else
			{
				cmdbuf = buf;
    133c:	77 a7       	std	Z+47, r23	; 0x2f
    133e:	66 a7       	std	Z+46, r22	; 0x2e
				cmdbuflen = len;
    1340:	40 ab       	std	Z+48, r20	; 0x30
    1342:	51 ab       	std	Z+49, r21	; 0x31
    1344:	cb 01       	movw	r24, r22
			}
		cmd_idx = 0;
    1346:	ee 58       	subi	r30, 0x8E	; 142
    1348:	ff 4f       	sbci	r31, 0xFF	; 255
    134a:	11 82       	std	Z+1, r1	; 0x01
    134c:	10 82       	st	Z, r1
		memset(cmdbuf,0,cmdbuflen);
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	0c 94 17 12 	jmp	0x242e	; 0x242e <memset>

void MyMqtt::SetBuffer(char *buf,size_t len)
	{
		if(buf == NULL)
			{
				cmdbuf = localbuf;
    1356:	c2 96       	adiw	r24, 0x32	; 50
    1358:	97 a7       	std	Z+47, r25	; 0x2f
    135a:	86 a7       	std	Z+46, r24	; 0x2e
				cmdbuflen = sizeof(localbuf);
    135c:	20 e4       	ldi	r18, 0x40	; 64
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	31 ab       	std	Z+49, r19	; 0x31
    1362:	20 ab       	std	Z+48, r18	; 0x30
    1364:	40 e4       	ldi	r20, 0x40	; 64
    1366:	50 e0       	ldi	r21, 0x00	; 0
		else
			{
				cmdbuf = buf;
				cmdbuflen = len;
			}
		cmd_idx = 0;
    1368:	ee 58       	subi	r30, 0x8E	; 142
    136a:	ff 4f       	sbci	r31, 0xFF	; 255
    136c:	11 82       	std	Z+1, r1	; 0x01
    136e:	10 82       	st	Z, r1
		memset(cmdbuf,0,cmdbuflen);
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	0c 94 17 12 	jmp	0x242e	; 0x242e <memset>

00001378 <_ZN6MyMqtt7OnTopicEPcS0_>:
//					}
//			}
//	}

void MyMqtt::OnTopic(char *topic, char *payload)
	{
    1378:	8f 92       	push	r8
    137a:	9f 92       	push	r9
    137c:	af 92       	push	r10
    137e:	bf 92       	push	r11
    1380:	cf 92       	push	r12
    1382:	df 92       	push	r13
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	00 d0       	rcall	.+0      	; 0x1392 <_ZN6MyMqtt7OnTopicEPcS0_+0x1a>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <_ZN6MyMqtt7OnTopicEPcS0_+0x1c>
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	8c 01       	movw	r16, r24
    139a:	6b 01       	movw	r12, r22
    139c:	7a 01       	movw	r14, r20
		USBSerial.SendStr_P(DarkYellow,PSTR("'\n"));
#endif
		byte r, g, b;
		uint16_t v;
		char *p = payload;
		m_flags.flags.update = 1;
    139e:	fc 01       	movw	r30, r24
    13a0:	95 a5       	ldd	r25, Z+45	; 0x2d
    13a2:	90 62       	ori	r25, 0x20	; 32
    13a4:	95 a7       	std	Z+45, r25	; 0x2d
		if (strstr_P((char *) topic, PSTR("pcolor")) != NULL)
    13a6:	6b ec       	ldi	r22, 0xCB	; 203
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	c6 01       	movw	r24, r12
    13ac:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <strstr_P>
    13b0:	89 2b       	or	r24, r25
    13b2:	89 f1       	breq	.+98     	; 0x1416 <_ZN6MyMqtt7OnTopicEPcS0_+0x9e>
			{
				r = atoi(p) & 0xff;
    13b4:	c7 01       	movw	r24, r14
    13b6:	e2 d7       	rcall	.+4036   	; 0x237c <atoi>
    13b8:	d8 2e       	mov	r13, r24
    13ba:	6c e2       	ldi	r22, 0x2C	; 44
				p = strchr(p, ',') + 1;
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	c7 01       	movw	r24, r14
    13c0:	0e 94 1e 12 	call	0x243c	; 0x243c <strchr>
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	7c 01       	movw	r14, r24
    13c8:	d9 d7       	rcall	.+4018   	; 0x237c <atoi>
				g = atoi(p) & 0xff;
    13ca:	48 2f       	mov	r20, r24
    13cc:	6c e2       	ldi	r22, 0x2C	; 44
    13ce:	70 e0       	ldi	r23, 0x00	; 0
				p = strchr(p, ',') + 1;
    13d0:	c7 01       	movw	r24, r14
    13d2:	4c 83       	std	Y+4, r20	; 0x04
    13d4:	0e 94 1e 12 	call	0x243c	; 0x243c <strchr>
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	d0 d7       	rcall	.+4000   	; 0x237c <atoi>
				b = atoi(p) & 0xff;
    13dc:	28 2f       	mov	r18, r24
    13de:	4c 81       	ldd	r20, Y+4	; 0x04
    13e0:	6d 2d       	mov	r22, r13
				m_cfg.m_pattern[0] = NeoPixelColor(r, g, b);
    13e2:	ce 01       	movw	r24, r28
    13e4:	01 96       	adiw	r24, 0x01	; 1
    13e6:	ba db       	rcall	.-2188   	; 0xb5c <_ZN13NeoPixelColorC1Ehhh>
    13e8:	be 01       	movw	r22, r28
    13ea:	6f 5f       	subi	r22, 0xFF	; 255
    13ec:	7f 4f       	sbci	r23, 0xFF	; 255
    13ee:	c8 01       	movw	r24, r16
    13f0:	0f 96       	adiw	r24, 0x0f	; 15
    13f2:	db db       	rcall	.-2122   	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	df 91       	pop	r29
			}
		else
			{
			}

	}
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	df 90       	pop	r13
    140a:	cf 90       	pop	r12
    140c:	bf 90       	pop	r11
    140e:	af 90       	pop	r10
    1410:	9f 90       	pop	r9
    1412:	8f 90       	pop	r8
    1414:	08 95       	ret
    1416:	64 ec       	ldi	r22, 0xC4	; 196
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	c6 01       	movw	r24, r12
    141c:	e5 d7       	rcall	.+4042   	; 0x23e8 <strstr_P>
    141e:	89 2b       	or	r24, r25
				g = atoi(p) & 0xff;
				p = strchr(p, ',') + 1;
				b = atoi(p) & 0xff;
				m_cfg.m_pattern[0] = NeoPixelColor(r, g, b);
			}
		else if (strstr_P((char *) topic, PSTR("scolor")) != NULL)
    1420:	01 f1       	breq	.+64     	; 0x1462 <_ZN6MyMqtt7OnTopicEPcS0_+0xea>
    1422:	c7 01       	movw	r24, r14
    1424:	ab d7       	rcall	.+3926   	; 0x237c <atoi>
    1426:	d8 2e       	mov	r13, r24
    1428:	6c e2       	ldi	r22, 0x2C	; 44
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	c7 01       	movw	r24, r14
			{
				r = atoi(p) & 0xff;
    142e:	0e 94 1e 12 	call	0x243c	; 0x243c <strchr>
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	7c 01       	movw	r14, r24
				p = strchr(p, ',') + 1;
    1436:	a2 d7       	rcall	.+3908   	; 0x237c <atoi>
    1438:	48 2f       	mov	r20, r24
    143a:	6c e2       	ldi	r22, 0x2C	; 44
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	c7 01       	movw	r24, r14
    1440:	4c 83       	std	Y+4, r20	; 0x04
    1442:	fc d7       	rcall	.+4088   	; 0x243c <strchr>
				g = atoi(p) & 0xff;
    1444:	01 96       	adiw	r24, 0x01	; 1
    1446:	9a d7       	rcall	.+3892   	; 0x237c <atoi>
    1448:	28 2f       	mov	r18, r24
				p = strchr(p, ',') + 1;
    144a:	4c 81       	ldd	r20, Y+4	; 0x04
    144c:	6d 2d       	mov	r22, r13
    144e:	ce 01       	movw	r24, r28
    1450:	01 96       	adiw	r24, 0x01	; 1
    1452:	84 db       	rcall	.-2296   	; 0xb5c <_ZN13NeoPixelColorC1Ehhh>
    1454:	be 01       	movw	r22, r28
				b = atoi(p) & 0xff;
    1456:	6f 5f       	subi	r22, 0xFF	; 255
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	c8 01       	movw	r24, r16
				m_cfg.m_pattern[1] = NeoPixelColor(r, g, b);
    145c:	42 96       	adiw	r24, 0x12	; 18
    145e:	a5 db       	rcall	.-2230   	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
    1460:	c9 cf       	rjmp	.-110    	; 0x13f4 <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    1462:	6d eb       	ldi	r22, 0xBD	; 189
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	c6 01       	movw	r24, r12
    1468:	bf d7       	rcall	.+3966   	; 0x23e8 <strstr_P>
    146a:	89 2b       	or	r24, r25
    146c:	f9 f0       	breq	.+62     	; 0x14ac <_ZN6MyMqtt7OnTopicEPcS0_+0x134>
    146e:	c7 01       	movw	r24, r14
    1470:	85 d7       	rcall	.+3850   	; 0x237c <atoi>
    1472:	d8 2e       	mov	r13, r24
    1474:	6c e2       	ldi	r22, 0x2C	; 44
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	c7 01       	movw	r24, r14
			}
		else if (strstr_P((char *) topic, PSTR("tcolor")) != NULL)
    147a:	e0 d7       	rcall	.+4032   	; 0x243c <strchr>
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	7c 01       	movw	r14, r24
    1480:	7d d7       	rcall	.+3834   	; 0x237c <atoi>
    1482:	48 2f       	mov	r20, r24
    1484:	6c e2       	ldi	r22, 0x2C	; 44
    1486:	70 e0       	ldi	r23, 0x00	; 0
			{
				r = atoi(p) & 0xff;
    1488:	c7 01       	movw	r24, r14
    148a:	4c 83       	std	Y+4, r20	; 0x04
    148c:	d7 d7       	rcall	.+4014   	; 0x243c <strchr>
    148e:	01 96       	adiw	r24, 0x01	; 1
				p = strchr(p, ',') + 1;
    1490:	75 d7       	rcall	.+3818   	; 0x237c <atoi>
    1492:	28 2f       	mov	r18, r24
    1494:	4c 81       	ldd	r20, Y+4	; 0x04
    1496:	6d 2d       	mov	r22, r13
    1498:	ce 01       	movw	r24, r28
    149a:	01 96       	adiw	r24, 0x01	; 1
    149c:	5f db       	rcall	.-2370   	; 0xb5c <_ZN13NeoPixelColorC1Ehhh>
				g = atoi(p) & 0xff;
    149e:	be 01       	movw	r22, r28
    14a0:	6f 5f       	subi	r22, 0xFF	; 255
    14a2:	7f 4f       	sbci	r23, 0xFF	; 255
				p = strchr(p, ',') + 1;
    14a4:	c8 01       	movw	r24, r16
    14a6:	45 96       	adiw	r24, 0x15	; 21
    14a8:	80 db       	rcall	.-2304   	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
    14aa:	a4 cf       	rjmp	.-184    	; 0x13f4 <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    14ac:	67 eb       	ldi	r22, 0xB7	; 183
    14ae:	70 e0       	ldi	r23, 0x00	; 0
				b = atoi(p) & 0xff;
    14b0:	c6 01       	movw	r24, r12
    14b2:	9a d7       	rcall	.+3892   	; 0x23e8 <strstr_P>
    14b4:	89 2b       	or	r24, r25
				m_cfg.m_pattern[2] = NeoPixelColor(r, g, b);
    14b6:	29 f0       	breq	.+10     	; 0x14c2 <_ZN6MyMqtt7OnTopicEPcS0_+0x14a>
    14b8:	c7 01       	movw	r24, r14
    14ba:	60 d7       	rcall	.+3776   	; 0x237c <atoi>
    14bc:	80 93 12 01 	sts	0x0112, r24
    14c0:	99 cf       	rjmp	.-206    	; 0x13f4 <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    14c2:	61 eb       	ldi	r22, 0xB1	; 177
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	c6 01       	movw	r24, r12
    14c8:	8f d7       	rcall	.+3870   	; 0x23e8 <strstr_P>
    14ca:	89 2b       	or	r24, r25
    14cc:	29 f0       	breq	.+10     	; 0x14d8 <_ZN6MyMqtt7OnTopicEPcS0_+0x160>
    14ce:	c7 01       	movw	r24, r14
    14d0:	55 d7       	rcall	.+3754   	; 0x237c <atoi>
    14d2:	f8 01       	movw	r30, r16
			}
		else if (strstr_P((char *) topic, PSTR("order")) != NULL)
    14d4:	83 87       	std	Z+11, r24	; 0x0b
    14d6:	8e cf       	rjmp	.-228    	; 0x13f4 <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    14d8:	6a ea       	ldi	r22, 0xAA	; 170
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	c6 01       	movw	r24, r12
    14de:	84 d7       	rcall	.+3848   	; 0x23e8 <strstr_P>
    14e0:	89 2b       	or	r24, r25
			{
				v = atoi(p);
    14e2:	29 f0       	breq	.+10     	; 0x14ee <_ZN6MyMqtt7OnTopicEPcS0_+0x176>
    14e4:	c7 01       	movw	r24, r14
    14e6:	4a d7       	rcall	.+3732   	; 0x237c <atoi>
				NeoPixelColor::m_color_order = (NeoColorOrder)v;
    14e8:	f8 01       	movw	r30, r16
    14ea:	82 87       	std	Z+10, r24	; 0x0a
    14ec:	83 cf       	rjmp	.-250    	; 0x13f4 <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
			}
		else if (strstr_P((char *) topic, PSTR("cmode")) != NULL)
    14ee:	64 ea       	ldi	r22, 0xA4	; 164
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	c6 01       	movw	r24, r12
    14f4:	79 d7       	rcall	.+3826   	; 0x23e8 <strstr_P>
    14f6:	89 2b       	or	r24, r25
    14f8:	29 f0       	breq	.+10     	; 0x1504 <_ZN6MyMqtt7OnTopicEPcS0_+0x18c>
    14fa:	c7 01       	movw	r24, r14
			{
				v = atoi(p);
    14fc:	3f d7       	rcall	.+3710   	; 0x237c <atoi>
    14fe:	f8 01       	movw	r30, r16
    1500:	84 87       	std	Z+12, r24	; 0x0c
				m_cfg.m_colormode = (NeoPixelColorMode) (v);
    1502:	78 cf       	rjmp	.-272    	; 0x13f4 <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    1504:	6c e9       	ldi	r22, 0x9C	; 156
    1506:	70 e0       	ldi	r23, 0x00	; 0
			}
		else if (strstr_P((char *) topic, PSTR("effect")) != NULL)
    1508:	c6 01       	movw	r24, r12
    150a:	6e d7       	rcall	.+3804   	; 0x23e8 <strstr_P>
    150c:	89 2b       	or	r24, r25
    150e:	29 f0       	breq	.+10     	; 0x151a <_ZN6MyMqtt7OnTopicEPcS0_+0x1a2>
    1510:	c7 01       	movw	r24, r14
    1512:	34 d7       	rcall	.+3688   	; 0x237c <atoi>
    1514:	f8 01       	movw	r30, r16
			{
				v = atoi(p);
    1516:	85 87       	std	Z+13, r24	; 0x0d
    1518:	6d cf       	rjmp	.-294    	; 0x13f4 <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    151a:	65 e9       	ldi	r22, 0x95	; 149
				m_cfg.m_effect = (NeoPixelEffect) v;
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	c6 01       	movw	r24, r12
    1520:	63 d7       	rcall	.+3782   	; 0x23e8 <strstr_P>
			}
		else if (strstr_P((char *) topic, PSTR("smode")) != NULL)
    1522:	89 2b       	or	r24, r25
    1524:	31 f0       	breq	.+12     	; 0x1532 <_ZN6MyMqtt7OnTopicEPcS0_+0x1ba>
    1526:	c7 01       	movw	r24, r14
    1528:	29 d7       	rcall	.+3666   	; 0x237c <atoi>
    152a:	f8 01       	movw	r30, r16
    152c:	93 83       	std	Z+3, r25	; 0x03
    152e:	82 83       	std	Z+2, r24	; 0x02
			{
				v = atoi(p);
    1530:	61 cf       	rjmp	.-318    	; 0x13f4 <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    1532:	6d e8       	ldi	r22, 0x8D	; 141
    1534:	70 e0       	ldi	r23, 0x00	; 0
				m_cfg.m_strandmode = (NeoPixelStrandMode) (v);
    1536:	c6 01       	movw	r24, r12
    1538:	57 d7       	rcall	.+3758   	; 0x23e8 <strstr_P>
    153a:	89 2b       	or	r24, r25
			}
		else if (strstr_P((char *) topic, PSTR("density")) != NULL)
    153c:	31 f0       	breq	.+12     	; 0x154a <_ZN6MyMqtt7OnTopicEPcS0_+0x1d2>
    153e:	c7 01       	movw	r24, r14
    1540:	1d d7       	rcall	.+3642   	; 0x237c <atoi>
    1542:	f8 01       	movw	r30, r16
    1544:	95 83       	std	Z+5, r25	; 0x05
    1546:	84 83       	std	Z+4, r24	; 0x04
    1548:	55 cf       	rjmp	.-342    	; 0x13f4 <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
			{
				v = atoi(p);
    154a:	67 e8       	ldi	r22, 0x87	; 135
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	c6 01       	movw	r24, r12
				m_cfg.m_density = v;
    1550:	4b d7       	rcall	.+3734   	; 0x23e8 <strstr_P>
    1552:	89 2b       	or	r24, r25
    1554:	31 f0       	breq	.+12     	; 0x1562 <_ZN6MyMqtt7OnTopicEPcS0_+0x1ea>
			}
		else if (strstr_P((char *) topic, PSTR("attack")) != NULL)
    1556:	c7 01       	movw	r24, r14
    1558:	11 d7       	rcall	.+3618   	; 0x237c <atoi>
    155a:	f8 01       	movw	r30, r16
    155c:	97 83       	std	Z+7, r25	; 0x07
    155e:	86 83       	std	Z+6, r24	; 0x06
    1560:	49 cf       	rjmp	.-366    	; 0x13f4 <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    1562:	63 e8       	ldi	r22, 0x83	; 131
			{
				v = atoi(p);
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	c6 01       	movw	r24, r12
    1568:	3f d7       	rcall	.+3710   	; 0x23e8 <strstr_P>
				m_cfg.m_attack = v;
    156a:	89 2b       	or	r24, r25
    156c:	31 f0       	breq	.+12     	; 0x157a <_ZN6MyMqtt7OnTopicEPcS0_+0x202>
    156e:	c7 01       	movw	r24, r14
    1570:	05 d7       	rcall	.+3594   	; 0x237c <atoi>
			}
		else if (strstr_P((char *) topic, PSTR("sustain")) != NULL)
    1572:	f8 01       	movw	r30, r16
    1574:	91 87       	std	Z+9, r25	; 0x09
    1576:	80 87       	std	Z+8, r24	; 0x08
    1578:	3d cf       	rjmp	.-390    	; 0x13f4 <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    157a:	6c e7       	ldi	r22, 0x7C	; 124
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	c6 01       	movw	r24, r12
			{
				v = atoi(p);
    1580:	33 d7       	rcall	.+3686   	; 0x23e8 <strstr_P>
    1582:	89 2b       	or	r24, r25
    1584:	31 f0       	breq	.+12     	; 0x1592 <_ZN6MyMqtt7OnTopicEPcS0_+0x21a>
				m_cfg.m_sustain = v;
    1586:	c7 01       	movw	r24, r14
    1588:	f9 d6       	rcall	.+3570   	; 0x237c <atoi>
    158a:	f8 01       	movw	r30, r16
    158c:	91 83       	std	Z+1, r25	; 0x01
			}
		else if (strstr_P((char *) topic, PSTR("decay")) != NULL)
    158e:	80 83       	st	Z, r24
    1590:	31 cf       	rjmp	.-414    	; 0x13f4 <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    1592:	64 e7       	ldi	r22, 0x74	; 116
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	c6 01       	movw	r24, r12
    1598:	27 d7       	rcall	.+3662   	; 0x23e8 <strstr_P>
    159a:	89 2b       	or	r24, r25
			{
				v = atoi(p);
    159c:	09 f4       	brne	.+2      	; 0x15a0 <_ZN6MyMqtt7OnTopicEPcS0_+0x228>
    159e:	2a cf       	rjmp	.-428    	; 0x13f4 <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
    15a0:	68 01       	movw	r12, r16
				m_cfg.m_decay = v;
    15a2:	ff e0       	ldi	r31, 0x0F	; 15
    15a4:	cf 0e       	add	r12, r31
    15a6:	d1 1c       	adc	r13, r1
    15a8:	91 2c       	mov	r9, r1
			}
		else if (strstr_P((char *) topic, PSTR("off")) != NULL)
    15aa:	e1 14       	cp	r14, r1
    15ac:	f1 04       	cpc	r15, r1
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <_ZN6MyMqtt7OnTopicEPcS0_+0x23a>
    15b0:	39 c0       	rjmp	.+114    	; 0x1624 <_ZN6MyMqtt7OnTopicEPcS0_+0x2ac>
    15b2:	c7 01       	movw	r24, r14
    15b4:	e3 d6       	rcall	.+3526   	; 0x237c <atoi>
    15b6:	88 2e       	mov	r8, r24
			{
				v = atoi(p);
    15b8:	6c e2       	ldi	r22, 0x2C	; 44
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	c7 01       	movw	r24, r14
				m_cfg.m_off = v;
    15be:	3e d7       	rcall	.+3708   	; 0x243c <strchr>
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	99 f1       	breq	.+102    	; 0x162a <_ZN6MyMqtt7OnTopicEPcS0_+0x2b2>
    15c4:	7c 01       	movw	r14, r24
			}
		else if (strstr_P((char *) topic, PSTR("pixels")) != NULL)
    15c6:	2f ef       	ldi	r18, 0xFF	; 255
    15c8:	e2 1a       	sub	r14, r18
    15ca:	f2 0a       	sbc	r15, r18
    15cc:	c7 01       	movw	r24, r14
    15ce:	d6 d6       	rcall	.+3500   	; 0x237c <atoi>
    15d0:	b8 2e       	mov	r11, r24
    15d2:	6c e2       	ldi	r22, 0x2C	; 44
			{
				v = atoi(p);
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	c7 01       	movw	r24, r14
    15d8:	31 d7       	rcall	.+3682   	; 0x243c <strchr>
				m_cfg.m_pixels = v;
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	31 f1       	breq	.+76     	; 0x162a <_ZN6MyMqtt7OnTopicEPcS0_+0x2b2>
    15de:	7c 01       	movw	r14, r24
    15e0:	ef ef       	ldi	r30, 0xFF	; 255
			}
		else if (strstr_P((char *) topic, PSTR("pattern")) != NULL)
    15e2:	ee 1a       	sub	r14, r30
    15e4:	fe 0a       	sbc	r15, r30
    15e6:	c7 01       	movw	r24, r14
    15e8:	c9 d6       	rcall	.+3474   	; 0x237c <atoi>
    15ea:	a8 2e       	mov	r10, r24
    15ec:	6c e2       	ldi	r22, 0x2C	; 44
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	c7 01       	movw	r24, r14
    15f2:	24 d7       	rcall	.+3656   	; 0x243c <strchr>
    15f4:	7c 01       	movw	r14, r24
    15f6:	89 2b       	or	r24, r25
    15f8:	19 f0       	breq	.+6      	; 0x1600 <_ZN6MyMqtt7OnTopicEPcS0_+0x288>
    15fa:	ff ef       	ldi	r31, 0xFF	; 255
			{
				byte idx = 0;
				while(idx < sizeof(m_cfg.m_pattern)/sizeof(m_cfg.m_pattern[0]) && p != NULL)
    15fc:	ef 1a       	sub	r14, r31
    15fe:	ff 0a       	sbc	r15, r31
    1600:	2a 2d       	mov	r18, r10
    1602:	4b 2d       	mov	r20, r11
					{
					r = atoi(p) & 0xff;
    1604:	68 2d       	mov	r22, r8
    1606:	ce 01       	movw	r24, r28
    1608:	01 96       	adiw	r24, 0x01	; 1
    160a:	a8 da       	rcall	.-2736   	; 0xb5c <_ZN13NeoPixelColorC1Ehhh>
					p = strchr(p, ',');
    160c:	be 01       	movw	r22, r28
    160e:	6f 5f       	subi	r22, 0xFF	; 255
    1610:	7f 4f       	sbci	r23, 0xFF	; 255
    1612:	c6 01       	movw	r24, r12
    1614:	ca da       	rcall	.-2668   	; 0xbaa <_ZN13NeoPixelColoraSERKS_>
					if(p != NULL)
    1616:	93 94       	inc	r9
    1618:	23 e0       	ldi	r18, 0x03	; 3
						{
							p++;
    161a:	c2 0e       	add	r12, r18
    161c:	d1 1c       	adc	r13, r1
    161e:	8a e0       	ldi	r24, 0x0A	; 10
    1620:	98 12       	cpse	r9, r24
							g = atoi(p) & 0xff;
    1622:	c3 cf       	rjmp	.-122    	; 0x15aa <_ZN6MyMqtt7OnTopicEPcS0_+0x232>
    1624:	f8 01       	movw	r30, r16
    1626:	96 86       	std	Z+14, r9	; 0x0e
    1628:	e5 ce       	rjmp	.-566    	; 0x13f4 <_ZN6MyMqtt7OnTopicEPcS0_+0x7c>
							p = strchr(p, ',');
    162a:	e1 2c       	mov	r14, r1
    162c:	f1 2c       	mov	r15, r1
    162e:	e8 cf       	rjmp	.-48     	; 0x1600 <_ZN6MyMqtt7OnTopicEPcS0_+0x288>

00001630 <_ZN6MyMqtt11CheckUpdateEv>:
			}

	}

void MyMqtt::CheckUpdate()
	{
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
		if(m_flags.flags.update != 0)
    1634:	fc 01       	movw	r30, r24
    1636:	25 a5       	ldd	r18, Z+45	; 0x2d
    1638:	25 ff       	sbrs	r18, 5
    163a:	08 c0       	rjmp	.+16     	; 0x164c <_ZN6MyMqtt11CheckUpdateEv+0x1c>
    163c:	ec 01       	movw	r28, r24
			{
				neo.SetConfig(m_cfg);
    163e:	bc 01       	movw	r22, r24
    1640:	87 e8       	ldi	r24, 0x87	; 135
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	fc db       	rcall	.-2056   	; 0xe3e <_ZN9NeoPixels9SetConfigER9NeoConfig>
    1646:	8d a5       	ldd	r24, Y+45	; 0x2d
				m_flags.flags.update = 0;
    1648:	8f 7d       	andi	r24, 0xDF	; 223
    164a:	8d a7       	std	Y+45, r24	; 0x2d
    164c:	df 91       	pop	r29
			}
	}
    164e:	cf 91       	pop	r28
    1650:	08 95       	ret

00001652 <_ZN6MyMqtt5beginEv>:
		cmd_idx = 0;
		memset(cmdbuf,0,cmdbuflen);
	}

void MyMqtt::begin()
	{
    1652:	8f 92       	push	r8
    1654:	9f 92       	push	r9
    1656:	af 92       	push	r10
    1658:	bf 92       	push	r11
    165a:	df 92       	push	r13
    165c:	ef 92       	push	r14
    165e:	ff 92       	push	r15
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	8c 01       	movw	r16, r24
		sbi(E_RST_DDR, E_RST);
    166a:	50 9a       	sbi	0x0a, 0	; 10
		cbi(E_RST_PORT, E_RST);
    166c:	58 98       	cbi	0x0b, 0	; 11
		sbi(E_CH_PD_DDR, E_CH_PD);
    166e:	51 9a       	sbi	0x0a, 1	; 10
		cbi(E_CH_PD_PORT, E_CH_PD);
    1670:	59 98       	cbi	0x0b, 1	; 11
		sbi(E_RX_DDR, E_RX);
    1672:	52 9a       	sbi	0x0a, 2	; 10
		sbi(E_RX_PORT, E_RX);
    1674:	5a 9a       	sbi	0x0b, 2	; 11
		sbi(E_TX_DDR, E_TX);
    1676:	53 9a       	sbi	0x0a, 3	; 10
		sbi(E_TX_PORT, E_TX);
    1678:	5b 9a       	sbi	0x0b, 3	; 11
		delay(1000);
    167a:	68 ee       	ldi	r22, 0xE8	; 232
    167c:	73 e0       	ldi	r23, 0x03	; 3
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	ce d4       	rcall	.+2460   	; 0x2020 <_Z5delaym>
    1684:	52 98       	cbi	0x0a, 2	; 10
		cbi(E_RX_DDR, E_RX);
    1686:	53 98       	cbi	0x0a, 3	; 10
		cbi(E_TX_DDR, E_TX);
    1688:	40 e0       	ldi	r20, 0x00	; 0
		Serial1.begin(115200);
    168a:	52 ec       	ldi	r21, 0xC2	; 194
    168c:	61 e0       	ldi	r22, 0x01	; 1
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	89 e9       	ldi	r24, 0x99	; 153
    1692:	92 e0       	ldi	r25, 0x02	; 2
    1694:	58 d3       	rcall	.+1712   	; 0x1d46 <_ZN9HWSerial15beginEm>
    1696:	59 9a       	sbi	0x0b, 1	; 11
    1698:	68 ee       	ldi	r22, 0xE8	; 232
		sbi(E_CH_PD_PORT, E_CH_PD);
    169a:	73 e0       	ldi	r23, 0x03	; 3
		delay(1000);
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	bf d4       	rcall	.+2430   	; 0x2020 <_Z5delaym>
    16a2:	58 9a       	sbi	0x0b, 0	; 11
    16a4:	78 94       	sei
    16a6:	78 01       	movw	r14, r16
    16a8:	22 e7       	ldi	r18, 0x72	; 114
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    16aa:	e2 0e       	add	r14, r18
		sbi(E_RST_PORT, E_RST);
		GlobalInterruptEnable();

		cmd_idx = 0;
    16ac:	f1 1c       	adc	r15, r1
    16ae:	f7 01       	movw	r30, r14
    16b0:	11 82       	std	Z+1, r1	; 0x01
    16b2:	10 82       	st	Z, r1
    16b4:	f8 01       	movw	r30, r16
    16b6:	40 a9       	ldd	r20, Z+48	; 0x30
    16b8:	51 a9       	ldd	r21, Z+49	; 0x31
		memset(cmdbuf, 0, cmdbuflen);
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	86 a5       	ldd	r24, Z+46	; 0x2e
    16c0:	97 a5       	ldd	r25, Z+47	; 0x2f
    16c2:	b5 d6       	rcall	.+3434   	; 0x242e <memset>
    16c4:	7b d4       	rcall	.+2294   	; 0x1fbc <_Z6millisv>
    16c6:	4b 01       	movw	r8, r22
    16c8:	5c 01       	movw	r10, r24
    16ca:	f8 eb       	ldi	r31, 0xB8	; 184
		unsigned long tmr = millis() + 3000;
    16cc:	8f 0e       	add	r8, r31
    16ce:	fb e0       	ldi	r31, 0x0B	; 11
    16d0:	9f 1e       	adc	r9, r31
    16d2:	a1 1c       	adc	r10, r1
    16d4:	b1 1c       	adc	r11, r1
    16d6:	89 e9       	ldi	r24, 0x99	; 153
    16d8:	92 e0       	ldi	r25, 0x02	; 2
    16da:	9a d2       	rcall	.+1332   	; 0x1c10 <_ZN9HWSerial13getEv>
    16dc:	ec 01       	movw	r28, r24
    16de:	d1 2c       	mov	r13, r1
		int c = Serial1.get();
    16e0:	2e c0       	rjmp	.+92     	; 0x173e <_ZN6MyMqtt5beginEv+0xec>
    16e2:	c3 35       	cpi	r28, 0x53	; 83
    16e4:	d1 05       	cpc	r29, r1
    16e6:	29 f0       	breq	.+10     	; 0x16f2 <_ZN6MyMqtt5beginEv+0xa0>
    16e8:	dd 20       	and	r13, r13
		bool startFill = false;
    16ea:	29 f1       	breq	.+74     	; 0x1736 <_ZN6MyMqtt5beginEv+0xe4>

		debug_P("begin\r\n");
		while (millis() < tmr)
    16ec:	1c 16       	cp	r1, r28
			{
#ifdef DO_USB
				USBSerial.StreamTask();
#endif
				if (c == 'S')
    16ee:	1d 06       	cpc	r1, r29
    16f0:	14 f5       	brge	.+68     	; 0x1736 <_ZN6MyMqtt5beginEv+0xe4>
    16f2:	ce 01       	movw	r24, r28
					startFill = true;

				if (startFill && c > 0 && (isprint(c) || isspace(c)))
    16f4:	62 d6       	rcall	.+3268   	; 0x23ba <isprint>
    16f6:	89 2b       	or	r24, r25
    16f8:	21 f4       	brne	.+8      	; 0x1702 <_ZN6MyMqtt5beginEv+0xb0>
    16fa:	ce 01       	movw	r24, r28
    16fc:	64 d6       	rcall	.+3272   	; 0x23c6 <isspace>
    16fe:	89 2b       	or	r24, r25
    1700:	c1 f0       	breq	.+48     	; 0x1732 <_ZN6MyMqtt5beginEv+0xe0>
    1702:	f8 01       	movw	r30, r16
    1704:	26 a5       	ldd	r18, Z+46	; 0x2e
    1706:	37 a5       	ldd	r19, Z+47	; 0x2f
    1708:	f7 01       	movw	r30, r14
    170a:	80 81       	ld	r24, Z
    170c:	91 81       	ldd	r25, Z+1	; 0x01
    170e:	ac 01       	movw	r20, r24
    1710:	4f 5f       	subi	r20, 0xFF	; 255
					{
						cmdbuf[cmd_idx++] = c;
    1712:	5f 4f       	sbci	r21, 0xFF	; 255
    1714:	51 83       	std	Z+1, r21	; 0x01
    1716:	40 83       	st	Z, r20
    1718:	f9 01       	movw	r30, r18
    171a:	e8 0f       	add	r30, r24
    171c:	f9 1f       	adc	r31, r25
    171e:	c0 83       	st	Z, r28
    1720:	f8 01       	movw	r30, r16
    1722:	c6 a5       	ldd	r28, Z+46	; 0x2e
    1724:	d7 a5       	ldd	r29, Z+47	; 0x2f
    1726:	64 e3       	ldi	r22, 0x34	; 52
    1728:	71 e0       	ldi	r23, 0x01	; 1
    172a:	ce 01       	movw	r24, r28
    172c:	5d d6       	rcall	.+3258   	; 0x23e8 <strstr_P>
    172e:	89 2b       	or	r24, r25
						debug_char(c);
						if (strstr_P(cmdbuf, PSTR("System init done.\r\nReady\r\n")) != NULL)
    1730:	c1 f4       	brne	.+48     	; 0x1762 <_ZN6MyMqtt5beginEv+0x110>
    1732:	dd 24       	eor	r13, r13
    1734:	d3 94       	inc	r13
    1736:	89 e9       	ldi	r24, 0x99	; 153
    1738:	92 e0       	ldi	r25, 0x02	; 2
    173a:	6a d2       	rcall	.+1236   	; 0x1c10 <_ZN9HWSerial13getEv>
    173c:	ec 01       	movw	r28, r24
    173e:	3e d4       	rcall	.+2172   	; 0x1fbc <_Z6millisv>
    1740:	68 15       	cp	r22, r8
    1742:	79 05       	cpc	r23, r9
    1744:	8a 05       	cpc	r24, r10
    1746:	9b 05       	cpc	r25, r11
								memset(cmdbuf, 0, cmdbuflen);
								cmd_idx = 0;
								return;
							}
					}
				c = Serial1.get();
    1748:	60 f2       	brcs	.-104    	; 0x16e2 <_ZN6MyMqtt5beginEv+0x90>
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
		unsigned long tmr = millis() + 3000;
		int c = Serial1.get();
		bool startFill = false;

		debug_P("begin\r\n");
		while (millis() < tmr)
    1752:	ff 90       	pop	r15
    1754:	ef 90       	pop	r14
    1756:	df 90       	pop	r13
    1758:	bf 90       	pop	r11
    175a:	af 90       	pop	r10
    175c:	9f 90       	pop	r9
    175e:	8f 90       	pop	r8
				c = Serial1.get();
			}
		debug_P("Buffer:  '");
		debug(cmdbuf);
		debug_P("'\r\n");
	}
    1760:	08 95       	ret
    1762:	f8 01       	movw	r30, r16
    1764:	40 a9       	ldd	r20, Z+48	; 0x30
    1766:	51 a9       	ldd	r21, Z+49	; 0x31
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	ce 01       	movw	r24, r28
    176e:	5f d6       	rcall	.+3262   	; 0x242e <memset>
    1770:	f7 01       	movw	r30, r14
    1772:	11 82       	std	Z+1, r1	; 0x01
    1774:	10 82       	st	Z, r1
    1776:	e9 cf       	rjmp	.-46     	; 0x174a <_ZN6MyMqtt5beginEv+0xf8>

00001778 <_ZN6MyMqtt9MqttTasksEv>:
#endif


#define TASK_WAIT 5
void MyMqtt::MqttTasks()
	{
    1778:	8f 92       	push	r8
    177a:	9f 92       	push	r9
    177c:	af 92       	push	r10
    177e:	bf 92       	push	r11
    1780:	cf 92       	push	r12
    1782:	df 92       	push	r13
    1784:	ef 92       	push	r14
    1786:	ff 92       	push	r15
    1788:	0f 93       	push	r16
    178a:	1f 93       	push	r17
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	8c 01       	movw	r16, r24
		char *p;
		int c = Serial1.get();
    1792:	89 e9       	ldi	r24, 0x99	; 153
    1794:	92 e0       	ldi	r25, 0x02	; 2
    1796:	3c d2       	rcall	.+1144   	; 0x1c10 <_ZN9HWSerial13getEv>
    1798:	ec 01       	movw	r28, r24
    179a:	10 d4       	rcall	.+2080   	; 0x1fbc <_Z6millisv>
		bool b = true;
		unsigned long tmr = millis() + TASK_WAIT;
    179c:	4b 01       	movw	r8, r22
    179e:	5c 01       	movw	r10, r24
    17a0:	25 e0       	ldi	r18, 0x05	; 5
    17a2:	82 0e       	add	r8, r18
    17a4:	91 1c       	adc	r9, r1
    17a6:	a1 1c       	adc	r10, r1
    17a8:	b1 1c       	adc	r11, r1
    17aa:	d7 fd       	sbrc	r29, 7
    17ac:	ad c0       	rjmp	.+346    	; 0x1908 <_ZN6MyMqtt9MqttTasksEv+0x190>

		if(c < 0)
    17ae:	78 01       	movw	r14, r16
    17b0:	82 e7       	ldi	r24, 0x72	; 114
			return;

		// read chars until none come for 1 ms or buffer fills
		while(millis() < tmr)
			{
				if(c > 0 && cmd_idx < (cmdbuflen - 1))
    17b2:	e8 0e       	add	r14, r24
    17b4:	f1 1c       	adc	r15, r1
    17b6:	12 c0       	rjmp	.+36     	; 0x17dc <_ZN6MyMqtt9MqttTasksEv+0x64>
    17b8:	f7 01       	movw	r30, r14
    17ba:	80 81       	ld	r24, Z
    17bc:	91 81       	ldd	r25, Z+1	; 0x01
    17be:	f8 01       	movw	r30, r16
    17c0:	20 a9       	ldd	r18, Z+48	; 0x30
    17c2:	31 a9       	ldd	r19, Z+49	; 0x31
    17c4:	21 50       	subi	r18, 0x01	; 1
    17c6:	31 09       	sbc	r19, r1
    17c8:	82 17       	cp	r24, r18
    17ca:	93 07       	cpc	r25, r19
    17cc:	d8 f0       	brcs	.+54     	; 0x1804 <_ZN6MyMqtt9MqttTasksEv+0x8c>
    17ce:	f6 d3       	rcall	.+2028   	; 0x1fbc <_Z6millisv>
    17d0:	4b 01       	movw	r8, r22
				if(cmd_idx < (cmdbuflen-1))
					{
					}
				else
					{
						tmr = millis();
    17d2:	5c 01       	movw	r10, r24
    17d4:	89 e9       	ldi	r24, 0x99	; 153
    17d6:	92 e0       	ldi	r25, 0x02	; 2
    17d8:	1b d2       	rcall	.+1078   	; 0x1c10 <_ZN9HWSerial13getEv>
					}
				c = Serial1.get();
    17da:	ec 01       	movw	r28, r24
    17dc:	ef d3       	rcall	.+2014   	; 0x1fbc <_Z6millisv>
    17de:	68 15       	cp	r22, r8
    17e0:	79 05       	cpc	r23, r9
    17e2:	8a 05       	cpc	r24, r10

		if(c < 0)
			return;

		// read chars until none come for 1 ms or buffer fills
		while(millis() < tmr)
    17e4:	9b 05       	cpc	r25, r11
    17e6:	20 f5       	brcc	.+72     	; 0x1830 <_ZN6MyMqtt9MqttTasksEv+0xb8>
    17e8:	1c 16       	cp	r1, r28
    17ea:	1d 06       	cpc	r1, r29
    17ec:	2c f3       	brlt	.-54     	; 0x17b8 <_ZN6MyMqtt9MqttTasksEv+0x40>
    17ee:	f8 01       	movw	r30, r16
    17f0:	80 a9       	ldd	r24, Z+48	; 0x30
			{
				if(c > 0 && cmd_idx < (cmdbuflen - 1))
    17f2:	91 a9       	ldd	r25, Z+49	; 0x31
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	f7 01       	movw	r30, r14
					{
						cmdbuf[cmd_idx++] = c;
						tmr = millis() + TASK_WAIT;
					}
				if(cmd_idx < (cmdbuflen-1))
    17f8:	20 81       	ld	r18, Z
    17fa:	31 81       	ldd	r19, Z+1	; 0x01
    17fc:	28 17       	cp	r18, r24
    17fe:	39 07       	cpc	r19, r25
    1800:	48 f3       	brcs	.-46     	; 0x17d4 <_ZN6MyMqtt9MqttTasksEv+0x5c>
    1802:	e5 cf       	rjmp	.-54     	; 0x17ce <_ZN6MyMqtt9MqttTasksEv+0x56>
    1804:	f8 01       	movw	r30, r16
    1806:	26 a5       	ldd	r18, Z+46	; 0x2e
    1808:	37 a5       	ldd	r19, Z+47	; 0x2f
    180a:	ac 01       	movw	r20, r24
    180c:	4f 5f       	subi	r20, 0xFF	; 255
		// read chars until none come for 1 ms or buffer fills
		while(millis() < tmr)
			{
				if(c > 0 && cmd_idx < (cmdbuflen - 1))
					{
						cmdbuf[cmd_idx++] = c;
    180e:	5f 4f       	sbci	r21, 0xFF	; 255
    1810:	f7 01       	movw	r30, r14
    1812:	51 83       	std	Z+1, r21	; 0x01
    1814:	40 83       	st	Z, r20
    1816:	f9 01       	movw	r30, r18
    1818:	e8 0f       	add	r30, r24
    181a:	f9 1f       	adc	r31, r25
    181c:	c0 83       	st	Z, r28
    181e:	ce d3       	rcall	.+1948   	; 0x1fbc <_Z6millisv>
    1820:	4b 01       	movw	r8, r22
    1822:	5c 01       	movw	r10, r24
    1824:	e5 e0       	ldi	r30, 0x05	; 5
    1826:	8e 0e       	add	r8, r30
						tmr = millis() + TASK_WAIT;
    1828:	91 1c       	adc	r9, r1
    182a:	a1 1c       	adc	r10, r1
    182c:	b1 1c       	adc	r11, r1
    182e:	df cf       	rjmp	.-66     	; 0x17ee <_ZN6MyMqtt9MqttTasksEv+0x76>
    1830:	f8 01       	movw	r30, r16
    1832:	c6 a4       	ldd	r12, Z+46	; 0x2e
    1834:	d7 a4       	ldd	r13, Z+47	; 0x2f
    1836:	f6 01       	movw	r30, r12
    1838:	80 81       	ld	r24, Z
    183a:	88 23       	and	r24, r24
#ifdef DO_USB
						USBSerial.StreamTask();
#endif
			}

		if(strlen(cmdbuf) > 0)
    183c:	09 f4       	brne	.+2      	; 0x1840 <_ZN6MyMqtt9MqttTasksEv+0xc8>
    183e:	64 c0       	rjmp	.+200    	; 0x1908 <_ZN6MyMqtt9MqttTasksEv+0x190>
    1840:	c0 e0       	ldi	r28, 0x00	; 0
			}
		else
			b = false;

		size_t idx = 0;
		while (b)
    1842:	d0 e0       	ldi	r29, 0x00	; 0
    1844:	c8 01       	movw	r24, r16
    1846:	8e 58       	subi	r24, 0x8E	; 142
    1848:	9f 4f       	sbci	r25, 0xFF	; 255
    184a:	5c 01       	movw	r10, r24
    184c:	76 01       	movw	r14, r12
    184e:	ec 0e       	add	r14, r28
    1850:	fd 1e       	adc	r15, r29
    1852:	61 e3       	ldi	r22, 0x31	; 49
    1854:	71 e0       	ldi	r23, 0x01	; 1
    1856:	c7 01       	movw	r24, r14
			{
				p = strstr_P(cmdbuf+idx,PSTR("\r\n"));
    1858:	c7 d5       	rcall	.+2958   	; 0x23e8 <strstr_P>
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	09 f4       	brne	.+2      	; 0x1860 <_ZN6MyMqtt9MqttTasksEv+0xe8>
    185e:	4e c0       	rjmp	.+156    	; 0x18fc <_ZN6MyMqtt9MqttTasksEv+0x184>
    1860:	fc 01       	movw	r30, r24
    1862:	10 82       	st	Z, r1
    1864:	f8 01       	movw	r30, r16
    1866:	c6 a4       	ldd	r12, Z+46	; 0x2e
				if(p != NULL)
    1868:	d7 a4       	ldd	r13, Z+47	; 0x2f
    186a:	76 01       	movw	r14, r12
    186c:	ec 0e       	add	r14, r28
					{
						*p = 0;
    186e:	fd 1e       	adc	r15, r29
    1870:	f7 01       	movw	r30, r14
						char *pcmdbuf = cmdbuf+idx;
    1872:	01 90       	ld	r0, Z+
    1874:	00 20       	and	r0, r0
    1876:	e9 f7       	brne	.-6      	; 0x1872 <_ZN6MyMqtt9MqttTasksEv+0xfa>
    1878:	9f 01       	movw	r18, r30
    187a:	2e 19       	sub	r18, r14
    187c:	3f 09       	sbc	r19, r15
						idx += strlen(pcmdbuf) + 2;
    187e:	2f 5f       	subi	r18, 0xFF	; 255
    1880:	3f 4f       	sbci	r19, 0xFF	; 255
    1882:	c2 0f       	add	r28, r18
    1884:	d3 1f       	adc	r29, r19
    1886:	61 e2       	ldi	r22, 0x21	; 33
    1888:	71 e0       	ldi	r23, 0x01	; 1
    188a:	c7 01       	movw	r24, r14
    188c:	a4 d5       	rcall	.+2888   	; 0x23d6 <strcmp_P>
    188e:	89 2b       	or	r24, r25
    1890:	f9 f4       	brne	.+62     	; 0x18d0 <_ZN6MyMqtt9MqttTasksEv+0x158>
    1892:	f8 01       	movw	r30, r16
						if (strcmp_P(pcmdbuf, PSTR("+MQTT Connected")) == 0)
    1894:	85 a5       	ldd	r24, Z+45	; 0x2d
    1896:	82 60       	ori	r24, 0x02	; 2
    1898:	85 a7       	std	Z+45, r24	; 0x2d
    189a:	f5 01       	movw	r30, r10
    189c:	80 81       	ld	r24, Z
    189e:	91 81       	ldd	r25, Z+1	; 0x01
    18a0:	c8 17       	cp	r28, r24
							{
								m_flags.flags.mqttonline = true;
    18a2:	d9 07       	cpc	r29, r25
    18a4:	98 f2       	brcs	.-90     	; 0x184c <_ZN6MyMqtt9MqttTasksEv+0xd4>
    18a6:	11 82       	std	Z+1, r1	; 0x01
    18a8:	10 82       	st	Z, r1
#ifdef DO_USB
								USBSerial.SendStr_P(Red,PSTR("Got Other!\r\n"));
								USBSerial.SendStr(Red,pcmdbuf);
#endif
							}
						if(idx >= cmd_idx)
    18aa:	f8 01       	movw	r30, r16
    18ac:	40 a9       	ldd	r20, Z+48	; 0x30
    18ae:	51 a9       	ldd	r21, Z+49	; 0x31
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	c6 01       	movw	r24, r12
							{
								b = false;
								cmd_idx = 0;
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
								memset(cmdbuf,0,cmdbuflen);
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	ff 90       	pop	r15
    18c0:	ef 90       	pop	r14
    18c2:	df 90       	pop	r13
    18c4:	cf 90       	pop	r12
//					{
//
//					}
//			}
//#endif
	}
    18c6:	bf 90       	pop	r11
    18c8:	af 90       	pop	r10
    18ca:	9f 90       	pop	r9
    18cc:	8f 90       	pop	r8
    18ce:	af c5       	rjmp	.+2910   	; 0x242e <memset>
    18d0:	6e e0       	ldi	r22, 0x0E	; 14
    18d2:	71 e0       	ldi	r23, 0x01	; 1
    18d4:	c7 01       	movw	r24, r14
    18d6:	7f d5       	rcall	.+2814   	; 0x23d6 <strcmp_P>
    18d8:	89 2b       	or	r24, r25
    18da:	29 f4       	brne	.+10     	; 0x18e6 <_ZN6MyMqtt9MqttTasksEv+0x16e>
    18dc:	f8 01       	movw	r30, r16
						b = false;
						if(idx < cmd_idx)
							{	// chars left over in buffer when full, shift them down
								memcpy(cmdbuf,cmdbuf+idx,cmd_idx-idx);
								cmd_idx -= idx;
								memset(cmdbuf+idx,0,cmdbuflen-idx);
    18de:	85 a5       	ldd	r24, Z+45	; 0x2d
    18e0:	8d 7f       	andi	r24, 0xFD	; 253
								m_flags.flags.mqttonline = true;
#ifdef DO_USB
								USBSerial.SendStr_P(Green,PSTR("MQTT Connected\r\n"));
#endif
							}
						else if (strcmp_P(pcmdbuf, PSTR("+MQTT Disconnected")) == 0)
    18e2:	85 a7       	std	Z+45, r24	; 0x2d
    18e4:	da cf       	rjmp	.-76     	; 0x189a <_ZN6MyMqtt9MqttTasksEv+0x122>
    18e6:	6e ef       	ldi	r22, 0xFE	; 254
    18e8:	70 e0       	ldi	r23, 0x00	; 0
    18ea:	c7 01       	movw	r24, r14
    18ec:	74 d5       	rcall	.+2792   	; 0x23d6 <strcmp_P>
    18ee:	89 2b       	or	r24, r25
							{
								m_flags.flags.mqttonline = false;
    18f0:	c1 f4       	brne	.+48     	; 0x1922 <_ZN6MyMqtt9MqttTasksEv+0x1aa>
    18f2:	f8 01       	movw	r30, r16
    18f4:	85 a5       	ldd	r24, Z+45	; 0x2d
    18f6:	84 60       	ori	r24, 0x04	; 4
    18f8:	85 a7       	std	Z+45, r24	; 0x2d
#ifdef DO_USB
								USBSerial.SendStr_P(Green,PSTR("MQTT Disconnected\r\n"));
#endif
							}
						else if (strcmp_P(pcmdbuf, PSTR("+WIFI Connected")) == 0)
    18fa:	cf cf       	rjmp	.-98     	; 0x189a <_ZN6MyMqtt9MqttTasksEv+0x122>
    18fc:	f5 01       	movw	r30, r10
    18fe:	40 81       	ld	r20, Z
    1900:	51 81       	ldd	r21, Z+1	; 0x01
    1902:	c4 17       	cp	r28, r20
    1904:	d5 07       	cpc	r29, r21
    1906:	18 f1       	brcs	.+70     	; 0x194e <_ZN6MyMqtt9MqttTasksEv+0x1d6>
							{
								m_flags.flags.wifionline = true;
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	1f 91       	pop	r17
    190e:	0f 91       	pop	r16
    1910:	ff 90       	pop	r15
							}
					}
				else
					{
						b = false;
						if(idx < cmd_idx)
    1912:	ef 90       	pop	r14
    1914:	df 90       	pop	r13
    1916:	cf 90       	pop	r12
    1918:	bf 90       	pop	r11
    191a:	af 90       	pop	r10
    191c:	9f 90       	pop	r9
//					{
//
//					}
//			}
//#endif
	}
    191e:	8f 90       	pop	r8
    1920:	08 95       	ret
    1922:	6b ee       	ldi	r22, 0xEB	; 235
    1924:	70 e0       	ldi	r23, 0x00	; 0
    1926:	c7 01       	movw	r24, r14
    1928:	56 d5       	rcall	.+2732   	; 0x23d6 <strcmp_P>
    192a:	89 2b       	or	r24, r25
    192c:	59 f0       	breq	.+22     	; 0x1944 <_ZN6MyMqtt9MqttTasksEv+0x1cc>
    192e:	68 ee       	ldi	r22, 0xE8	; 232
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	c7 01       	movw	r24, r14
    1934:	50 d5       	rcall	.+2720   	; 0x23d6 <strcmp_P>
    1936:	89 2b       	or	r24, r25
								m_flags.flags.wifionline = true;
#ifdef DO_USB
								USBSerial.SendStr_P(Green,PSTR("WIFI Connected\r\n"));
#endif
							}
						else if (strcmp_P(pcmdbuf, PSTR("+WIFI Disconnected")) == 0)
    1938:	11 f5       	brne	.+68     	; 0x197e <_ZN6MyMqtt9MqttTasksEv+0x206>
    193a:	f8 01       	movw	r30, r16
    193c:	85 a5       	ldd	r24, Z+45	; 0x2d
    193e:	88 60       	ori	r24, 0x08	; 8
    1940:	85 a7       	std	Z+45, r24	; 0x2d
    1942:	ab cf       	rjmp	.-170    	; 0x189a <_ZN6MyMqtt9MqttTasksEv+0x122>
    1944:	f8 01       	movw	r30, r16
								m_flags.flags.wifionline = false;
#ifdef DO_USB
								USBSerial.SendStr_P(Green,PSTR("WIFI Disconnected\r\n"));
#endif
							}
						else if (strcmp_P(pcmdbuf, PSTR("OK")) == 0)
    1946:	85 a5       	ldd	r24, Z+45	; 0x2d
    1948:	8b 7f       	andi	r24, 0xFB	; 251
    194a:	85 a7       	std	Z+45, r24	; 0x2d
    194c:	a6 cf       	rjmp	.-180    	; 0x189a <_ZN6MyMqtt9MqttTasksEv+0x122>
    194e:	4c 1b       	sub	r20, r28
    1950:	5d 0b       	sbc	r21, r29
    1952:	b7 01       	movw	r22, r14
							{
								m_flags.flags.got_ok = true;
    1954:	c6 01       	movw	r24, r12
    1956:	62 d5       	rcall	.+2756   	; 0x241c <memcpy>
    1958:	f5 01       	movw	r30, r10
    195a:	80 81       	ld	r24, Z
    195c:	91 81       	ldd	r25, Z+1	; 0x01
								USBSerial.SendStr_P(Green,PSTR("WIFI Connected\r\n"));
#endif
							}
						else if (strcmp_P(pcmdbuf, PSTR("+WIFI Disconnected")) == 0)
							{
								m_flags.flags.wifionline = false;
    195e:	8c 1b       	sub	r24, r28
    1960:	9d 0b       	sbc	r25, r29
    1962:	91 83       	std	Z+1, r25	; 0x01
    1964:	80 83       	st	Z, r24
    1966:	f8 01       	movw	r30, r16
				else
					{
						b = false;
						if(idx < cmd_idx)
							{	// chars left over in buffer when full, shift them down
								memcpy(cmdbuf,cmdbuf+idx,cmd_idx-idx);
    1968:	40 a9       	ldd	r20, Z+48	; 0x30
    196a:	51 a9       	ldd	r21, Z+49	; 0x31
    196c:	4c 1b       	sub	r20, r28
    196e:	5d 0b       	sbc	r21, r29
    1970:	86 a5       	ldd	r24, Z+46	; 0x2e
    1972:	97 a5       	ldd	r25, Z+47	; 0x2f
								cmd_idx -= idx;
    1974:	60 e0       	ldi	r22, 0x00	; 0
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	8c 0f       	add	r24, r28
    197a:	9d 1f       	adc	r25, r29
    197c:	9c cf       	rjmp	.-200    	; 0x18b6 <_ZN6MyMqtt9MqttTasksEv+0x13e>
    197e:	62 ee       	ldi	r22, 0xE2	; 226
    1980:	70 e0       	ldi	r23, 0x00	; 0
								memset(cmdbuf+idx,0,cmdbuflen-idx);
    1982:	c7 01       	movw	r24, r14
    1984:	31 d5       	rcall	.+2658   	; 0x23e8 <strstr_P>
    1986:	89 2b       	or	r24, r25
    1988:	29 f0       	breq	.+10     	; 0x1994 <_ZN6MyMqtt9MqttTasksEv+0x21c>
    198a:	f8 01       	movw	r30, r16
    198c:	85 a5       	ldd	r24, Z+45	; 0x2d
    198e:	80 61       	ori	r24, 0x10	; 16
    1990:	85 a7       	std	Z+45, r24	; 0x2d
    1992:	83 cf       	rjmp	.-250    	; 0x189a <_ZN6MyMqtt9MqttTasksEv+0x122>
    1994:	66 ed       	ldi	r22, 0xD6	; 214
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	c7 01       	movw	r24, r14
								m_flags.flags.got_ok = true;
#ifdef DO_USB
								USBSerial.SendStr_P(Green,PSTR("Got OK\r\n"));
#endif
							}
						else if (strstr_P(pcmdbuf, PSTR("Error")) != NULL)
    199a:	26 d5       	rcall	.+2636   	; 0x23e8 <strstr_P>
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	09 f4       	brne	.+2      	; 0x19a2 <_ZN6MyMqtt9MqttTasksEv+0x22a>
    19a0:	7c cf       	rjmp	.-264    	; 0x189a <_ZN6MyMqtt9MqttTasksEv+0x122>
    19a2:	6c 01       	movw	r12, r24
    19a4:	fb e0       	ldi	r31, 0x0B	; 11
    19a6:	cf 0e       	add	r12, r31
							{
								m_flags.flags.got_error = true;
    19a8:	d1 1c       	adc	r13, r1
    19aa:	f7 01       	movw	r30, r14
    19ac:	10 82       	st	Z, r1
    19ae:	64 ed       	ldi	r22, 0xD4	; 212
    19b0:	70 e0       	ldi	r23, 0x00	; 0
#ifdef DO_USB
								USBSerial.SendStr_P(Red,PSTR("Got Error\r\n"));
#endif
							}
						else if ((p = strstr_P(pcmdbuf, PSTR("+AT+TOPIC=\""))) != NULL)
    19b2:	c6 01       	movw	r24, r12
    19b4:	19 d5       	rcall	.+2610   	; 0x23e8 <strstr_P>
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	71 f0       	breq	.+28     	; 0x19d6 <_ZN6MyMqtt9MqttTasksEv+0x25e>
    19ba:	fc 01       	movw	r30, r24
    19bc:	10 82       	st	Z, r1
    19be:	7c 01       	movw	r14, r24
    19c0:	f3 e0       	ldi	r31, 0x03	; 3
							{
								char *topic = p + 11;
    19c2:	ef 0e       	add	r14, r31
    19c4:	f1 1c       	adc	r15, r1
    19c6:	62 ed       	ldi	r22, 0xD2	; 210
    19c8:	70 e0       	ldi	r23, 0x00	; 0
#ifdef DO_USB
								USBSerial.SendStr_P(Green,PSTR("Got Topic\r\n"));
								USBSerial.SendStr(Green,pcmdbuf);
#endif

								pcmdbuf[0] = 0;
    19ca:	c7 01       	movw	r24, r14
    19cc:	0d d5       	rcall	.+2586   	; 0x23e8 <strstr_P>
								p = strstr_P(topic, PSTR("\""));
    19ce:	00 97       	sbiw	r24, 0x00	; 0
    19d0:	11 f0       	breq	.+4      	; 0x19d6 <_ZN6MyMqtt9MqttTasksEv+0x25e>
    19d2:	fc 01       	movw	r30, r24
    19d4:	10 82       	st	Z, r1
    19d6:	a7 01       	movw	r20, r14
								if (p != NULL)
    19d8:	b6 01       	movw	r22, r12
    19da:	c8 01       	movw	r24, r16
									{
										*p = 0;
    19dc:	cd dc       	rcall	.-1638   	; 0x1378 <_ZN6MyMqtt7OnTopicEPcS0_>
    19de:	f8 01       	movw	r30, r16
										payload = p + 3;
    19e0:	c6 a4       	ldd	r12, Z+46	; 0x2e
    19e2:	d7 a4       	ldd	r13, Z+47	; 0x2f
    19e4:	5a cf       	rjmp	.-332    	; 0x189a <_ZN6MyMqtt9MqttTasksEv+0x122>

000019e6 <_Z14checkSignatureb>:
				char buf[32];
				sprintf_P(buf,PSTR("Stack=%04x\n"), (int) (TrackStack()));
				USBSerial.SendStr(buf);
			}
#endif
		if (StackSignature != SIGNATURE)
    19e6:	80 91 09 03 	lds	r24, 0x0309
    19ea:	90 91 0a 03 	lds	r25, 0x030A
    19ee:	8a 3a       	cpi	r24, 0xAA	; 170
    19f0:	95 45       	sbci	r25, 0x55	; 85
    19f2:	69 f0       	breq	.+26     	; 0x1a0e <_Z14checkSignatureb+0x28>
				while (1)
					{
#ifdef DO_USB
						USBSerial.StreamTask();
#endif
						sbi(PORTB, 7);
    19f4:	2f 9a       	sbi	0x05, 7	; 5
						delay(100);
    19f6:	64 e6       	ldi	r22, 0x64	; 100
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	10 d3       	rcall	.+1568   	; 0x2020 <_Z5delaym>
    1a00:	2f 98       	cbi	0x05, 7	; 5
						cbi(PORTB, 7);
    1a02:	64 e6       	ldi	r22, 0x64	; 100
						delay(100);
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	0a d3       	rcall	.+1556   	; 0x2020 <_Z5delaym>
    1a0c:	f3 cf       	rjmp	.-26     	; 0x19f4 <_Z14checkSignatureb+0xe>
    1a0e:	08 95       	ret

00001a10 <_Z10fillPixelshhhh>:
					}
			}
	}

void fillPixels(byte pixels, byte r, byte g, byte b)
	{
    1a10:	ef 92       	push	r14
    1a12:	ff 92       	push	r15
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    unsigned char sreg;

public:
    InterruptBlocker()
	{
	sreg = SREG;
    1a1c:	ef b6       	in	r14, 0x3f	; 63
	cli();
    1a1e:	f8 94       	cli
		InterruptBlocker ib;
		for (byte i = 0; i < pixels; i++)
    1a20:	88 23       	and	r24, r24
    1a22:	91 f0       	breq	.+36     	; 0x1a48 <_Z10fillPixelshhhh+0x38>
    1a24:	f2 2e       	mov	r15, r18
    1a26:	04 2f       	mov	r16, r20
    1a28:	16 2f       	mov	r17, r22
    1a2a:	d8 2f       	mov	r29, r24
    1a2c:	c0 e0       	ldi	r28, 0x00	; 0
    1a2e:	03 c0       	rjmp	.+6      	; 0x1a36 <_Z10fillPixelshhhh+0x26>
    1a30:	cf 5f       	subi	r28, 0xFF	; 255
    1a32:	cd 17       	cp	r28, r29
    1a34:	49 f0       	breq	.+18     	; 0x1a48 <_Z10fillPixelshhhh+0x38>
			{
				sendPixel(r, g, b);
    1a36:	4f 2d       	mov	r20, r15
    1a38:	60 2f       	mov	r22, r16
    1a3a:	81 2f       	mov	r24, r17
    1a3c:	0e 94 00 03 	call	0x600	; 0x600 <_Z9sendPixelhhh>
				if (tbi(UCSR1A,RXC1))
    1a40:	90 91 c8 00 	lds	r25, 0x00C8
    1a44:	97 ff       	sbrs	r25, 7
    1a46:	f4 cf       	rjmp	.-24     	; 0x1a30 <_Z10fillPixelshhhh+0x20>
	}
    ;

    ~InterruptBlocker()
	{
	SREG = sreg;
    1a48:	ef be       	out	0x3f, r14	; 63
					return;
			}
	}
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	ff 90       	pop	r15
    1a54:	ef 90       	pop	r14
    1a56:	08 95       	ret

00001a58 <_Z11flashPixelshhhhhj>:

void flashPixels(byte pixels, byte r, byte g, byte b, byte times, uint16_t delayrate)
	{
    1a58:	af 92       	push	r10
    1a5a:	bf 92       	push	r11
    1a5c:	cf 92       	push	r12
    1a5e:	df 92       	push	r13
    1a60:	ef 92       	push	r14
    1a62:	ff 92       	push	r15
    1a64:	0f 93       	push	r16
    1a66:	1f 93       	push	r17
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
		for (byte t = 0; t < times; t++)
    1a6c:	00 23       	and	r16, r16
    1a6e:	d9 f0       	breq	.+54     	; 0x1aa6 <_Z11flashPixelshhhhhj+0x4e>
    1a70:	a2 2e       	mov	r10, r18
    1a72:	b4 2e       	mov	r11, r20
    1a74:	16 2f       	mov	r17, r22
    1a76:	d8 2f       	mov	r29, r24
    1a78:	67 01       	movw	r12, r14
    1a7a:	e1 2c       	mov	r14, r1
    1a7c:	f1 2c       	mov	r15, r1
    1a7e:	c0 e0       	ldi	r28, 0x00	; 0
			{
				fillPixels(pixels, r, g, b);
    1a80:	2a 2d       	mov	r18, r10
    1a82:	4b 2d       	mov	r20, r11
    1a84:	61 2f       	mov	r22, r17
    1a86:	8d 2f       	mov	r24, r29
    1a88:	c3 df       	rcall	.-122    	; 0x1a10 <_Z10fillPixelshhhh>
    1a8a:	c7 01       	movw	r24, r14
				delay(delayrate);
    1a8c:	b6 01       	movw	r22, r12
    1a8e:	c8 d2       	rcall	.+1424   	; 0x2020 <_Z5delaym>
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	40 e0       	ldi	r20, 0x00	; 0
				fillPixels(pixels, 0, 0, 0);
    1a94:	60 e0       	ldi	r22, 0x00	; 0
    1a96:	8d 2f       	mov	r24, r29
    1a98:	bb df       	rcall	.-138    	; 0x1a10 <_Z10fillPixelshhhh>
    1a9a:	c7 01       	movw	r24, r14
    1a9c:	b6 01       	movw	r22, r12
    1a9e:	c0 d2       	rcall	.+1408   	; 0x2020 <_Z5delaym>
				delay(delayrate);
    1aa0:	cf 5f       	subi	r28, 0xFF	; 255
    1aa2:	c0 13       	cpse	r28, r16
    1aa4:	ed cf       	rjmp	.-38     	; 0x1a80 <_Z11flashPixelshhhhhj+0x28>
    1aa6:	df 91       	pop	r29
			}
	}

void flashPixels(byte pixels, byte r, byte g, byte b, byte times, uint16_t delayrate)
	{
		for (byte t = 0; t < times; t++)
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
				fillPixels(pixels, r, g, b);
				delay(delayrate);
				fillPixels(pixels, 0, 0, 0);
				delay(delayrate);
			}
	}
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	df 90       	pop	r13
    1ab4:	cf 90       	pop	r12
    1ab6:	bf 90       	pop	r11
    1ab8:	af 90       	pop	r10
    1aba:	08 95       	ret

00001abc <_Z9PixelTesth>:
MyMqtt mqttsock;

#define INTERVAL_PIXEL 10

void PixelTest(byte pixels)
	{
    1abc:	cf 92       	push	r12
    1abe:	df 92       	push	r13
    1ac0:	ef 92       	push	r14
    1ac2:	ff 92       	push	r15
    1ac4:	0f 93       	push	r16
		checkSignature(true);
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	8e df       	rcall	.-228    	; 0x19e6 <_Z14checkSignatureb>
    1aca:	84 ef       	ldi	r24, 0xF4	; 244
		flashPixels(PIXELS, 0, 0, 32, 3, 500);
    1acc:	e8 2e       	mov	r14, r24
    1ace:	ff 24       	eor	r15, r15
    1ad0:	f3 94       	inc	r15
    1ad2:	03 e0       	ldi	r16, 0x03	; 3
    1ad4:	20 e2       	ldi	r18, 0x20	; 32
    1ad6:	40 e0       	ldi	r20, 0x00	; 0
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
    1ada:	82 e3       	ldi	r24, 0x32	; 50
    1adc:	bd df       	rcall	.-134    	; 0x1a58 <_Z11flashPixelshhhhhj>
    1ade:	46 e9       	ldi	r20, 0x96	; 150
    1ae0:	50 e0       	ldi	r21, 0x00	; 0

		//DDRB |= 1;
		mqttsock.SetBuffer((char *)neo.getPixels(),PIXELS * 3);
    1ae2:	60 ec       	ldi	r22, 0xC0	; 192
    1ae4:	71 e0       	ldi	r23, 0x01	; 1
    1ae6:	83 e1       	ldi	r24, 0x13	; 19
    1ae8:	91 e0       	ldi	r25, 0x01	; 1
    1aea:	24 dc       	rcall	.-1976   	; 0x1334 <_ZN6MyMqtt9SetBufferEPcj>
    1aec:	83 e1       	ldi	r24, 0x13	; 19
    1aee:	91 e0       	ldi	r25, 0x01	; 1
    1af0:	b0 dd       	rcall	.-1184   	; 0x1652 <_ZN6MyMqtt5beginEv>
		mqttsock.begin();
    1af2:	64 d2       	rcall	.+1224   	; 0x1fbc <_Z6millisv>
    1af4:	6b 01       	movw	r12, r22
    1af6:	7c 01       	movw	r14, r24
    1af8:	28 e8       	ldi	r18, 0x88	; 136
		//flashPixels(PIXELS, 0, 32, 0, 3, 500);
		unsigned long tmr;
		tmr = millis() + 5000;
    1afa:	c2 0e       	add	r12, r18
    1afc:	23 e1       	ldi	r18, 0x13	; 19
    1afe:	d2 1e       	adc	r13, r18
    1b00:	e1 1c       	adc	r14, r1
    1b02:	f1 1c       	adc	r15, r1
    1b04:	5b d2       	rcall	.+1206   	; 0x1fbc <_Z6millisv>
    1b06:	6c 15       	cp	r22, r12
    1b08:	7d 05       	cpc	r23, r13
    1b0a:	8e 05       	cpc	r24, r14
    1b0c:	9f 05       	cpc	r25, r15
		while (millis() < tmr && mqttsock.IsConnected() == false)
    1b0e:	20 f4       	brcc	.+8      	; 0x1b18 <_Z9PixelTesth+0x5c>
    1b10:	80 91 40 01 	lds	r24, 0x0140
    1b14:	81 ff       	sbrs	r24, 1
    1b16:	37 c0       	rjmp	.+110    	; 0x1b86 <_Z9PixelTesth+0xca>
    1b18:	51 d2       	rcall	.+1186   	; 0x1fbc <_Z6millisv>
    1b1a:	6b 01       	movw	r12, r22
    1b1c:	7c 01       	movw	r14, r24
    1b1e:	28 e8       	ldi	r18, 0x88	; 136
    1b20:	c2 0e       	add	r12, r18
    1b22:	23 e1       	ldi	r18, 0x13	; 19
				mqttsock.MqttTasks();
#ifdef DO_USB
				USBSerial.StreamTask();
#endif
			}
		tmr = millis() + 5000;
    1b24:	d2 1e       	adc	r13, r18
    1b26:	e1 1c       	adc	r14, r1
    1b28:	f1 1c       	adc	r15, r1
    1b2a:	48 d2       	rcall	.+1168   	; 0x1fbc <_Z6millisv>
    1b2c:	6c 15       	cp	r22, r12
    1b2e:	7d 05       	cpc	r23, r13
    1b30:	8e 05       	cpc	r24, r14
    1b32:	9f 05       	cpc	r25, r15
    1b34:	20 f4       	brcc	.+8      	; 0x1b3e <_Z9PixelTesth+0x82>
    1b36:	80 91 40 01 	lds	r24, 0x0140
    1b3a:	81 fd       	sbrc	r24, 1
    1b3c:	28 c0       	rjmp	.+80     	; 0x1b8e <_Z9PixelTesth+0xd2>
    1b3e:	40 e0       	ldi	r20, 0x00	; 0
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	83 e1       	ldi	r24, 0x13	; 19
    1b48:	91 e0       	ldi	r25, 0x01	; 1

		// read any messages that come in fast
		while (millis() < tmr && mqttsock.IsConnected() == true)
    1b4a:	f4 db       	rcall	.-2072   	; 0x1334 <_ZN6MyMqtt9SetBufferEPcj>
    1b4c:	87 e8       	ldi	r24, 0x87	; 135
#ifdef DO_USB
				USBSerial.StreamTask();
#endif
			}

		mqttsock.SetBuffer(NULL,0);
    1b4e:	91 e0       	ldi	r25, 0x01	; 1
    1b50:	b4 db       	rcall	.-2200   	; 0x12ba <_ZN9NeoPixels5beginEv>
    1b52:	0f c0       	rjmp	.+30     	; 0x1b72 <_Z9PixelTesth+0xb6>
    1b54:	83 e1       	ldi	r24, 0x13	; 19
    1b56:	91 e0       	ldi	r25, 0x01	; 1
    1b58:	0f de       	rcall	.-994    	; 0x1778 <_ZN6MyMqtt9MqttTasksEv>
    1b5a:	83 e1       	ldi	r24, 0x13	; 19
    1b5c:	91 e0       	ldi	r25, 0x01	; 1

		neo.begin();
    1b5e:	68 dd       	rcall	.-1328   	; 0x1630 <_ZN6MyMqtt11CheckUpdateEv>
    1b60:	87 e8       	ldi	r24, 0x87	; 135
    1b62:	91 e0       	ldi	r25, 0x01	; 1
    1b64:	b8 db       	rcall	.-2192   	; 0x12d6 <_ZN9NeoPixels4TaskEv>
		while (mqttsock.IsConnected() == true)
    1b66:	2a d2       	rcall	.+1108   	; 0x1fbc <_Z6millisv>
			{
				mqttsock.MqttTasks();
    1b68:	c6 16       	cp	r12, r22
    1b6a:	d7 06       	cpc	r13, r23
    1b6c:	e8 06       	cpc	r14, r24
    1b6e:	f9 06       	cpc	r15, r25
				mqttsock.CheckUpdate();
    1b70:	90 f0       	brcs	.+36     	; 0x1b96 <_Z9PixelTesth+0xda>
    1b72:	80 91 40 01 	lds	r24, 0x0140
    1b76:	81 fd       	sbrc	r24, 1
				neo.Task();
    1b78:	ed cf       	rjmp	.-38     	; 0x1b54 <_Z9PixelTesth+0x98>
    1b7a:	0f 91       	pop	r16
    1b7c:	ff 90       	pop	r15
    1b7e:	ef 90       	pop	r14
    1b80:	df 90       	pop	r13
    1b82:	cf 90       	pop	r12
    1b84:	08 95       	ret
    1b86:	83 e1       	ldi	r24, 0x13	; 19
    1b88:	91 e0       	ldi	r25, 0x01	; 1
    1b8a:	f6 dd       	rcall	.-1044   	; 0x1778 <_ZN6MyMqtt9MqttTasksEv>
    1b8c:	bb cf       	rjmp	.-138    	; 0x1b04 <_Z9PixelTesth+0x48>
    1b8e:	83 e1       	ldi	r24, 0x13	; 19
    1b90:	91 e0       	ldi	r25, 0x01	; 1
			}

		mqttsock.SetBuffer(NULL,0);

		neo.begin();
		while (mqttsock.IsConnected() == true)
    1b92:	f2 dd       	rcall	.-1052   	; 0x1778 <_ZN6MyMqtt9MqttTasksEv>
    1b94:	ca cf       	rjmp	.-108    	; 0x1b2a <_Z9PixelTesth+0x6e>
						checkSignature(true);
						tmr = millis() + 500;
					}

			}
	}
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	26 df       	rcall	.-436    	; 0x19e6 <_Z14checkSignatureb>
    1b9a:	10 d2       	rcall	.+1056   	; 0x1fbc <_Z6millisv>
    1b9c:	6b 01       	movw	r12, r22
    1b9e:	7c 01       	movw	r14, r24
    1ba0:	24 ef       	ldi	r18, 0xF4	; 244
		//flashPixels(PIXELS, 0, 32, 0, 3, 500);
		unsigned long tmr;
		tmr = millis() + 5000;
		while (millis() < tmr && mqttsock.IsConnected() == false)
			{
				mqttsock.MqttTasks();
    1ba2:	c2 0e       	add	r12, r18
    1ba4:	21 e0       	ldi	r18, 0x01	; 1
    1ba6:	d2 1e       	adc	r13, r18
    1ba8:	e1 1c       	adc	r14, r1
    1baa:	f1 1c       	adc	r15, r1
		tmr = millis() + 5000;

		// read any messages that come in fast
		while (millis() < tmr && mqttsock.IsConnected() == true)
			{
				mqttsock.MqttTasks();
    1bac:	e2 cf       	rjmp	.-60     	; 0x1b72 <_Z9PixelTesth+0xb6>

00001bae <main>:
#endif

int main(void)
	{

		initTimer();
    1bae:	60 d2       	rcall	.+1216   	; 0x2070 <_Z9initTimerv>
    1bb0:	27 9a       	sbi	0x04, 7	; 4
		sbi(DDRB, 7);
    1bb2:	2f 9a       	sbi	0x05, 7	; 5
		sbi(PORTB, 7);
    1bb4:	20 9a       	sbi	0x04, 0	; 4
		sbi(DDRB, 0);
    1bb6:	28 9a       	sbi	0x05, 0	; 5
		sbi(PORTB, 0);
    1bb8:	50 9a       	sbi	0x0a, 0	; 10
		sbi(E_RST_DDR, E_RST);
    1bba:	58 98       	cbi	0x0b, 0	; 11
		cbi(E_RST_PORT, E_RST);
    1bbc:	51 9a       	sbi	0x0a, 1	; 10
		sbi(E_CH_PD_DDR, E_CH_PD);
    1bbe:	59 98       	cbi	0x0b, 1	; 11
		cbi(E_CH_PD_PORT, E_CH_PD);
    1bc0:	68 ee       	ldi	r22, 0xE8	; 232
		delay(1000);
    1bc2:	73 e0       	ldi	r23, 0x03	; 3
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	2b d2       	rcall	.+1110   	; 0x2020 <_Z5delaym>
    1bca:	84 ef       	ldi	r24, 0xF4	; 244
    1bcc:	e8 2e       	mov	r14, r24
		flashPixels(PIXELS, 32, 0, 0, 3, 500);
    1bce:	ff 24       	eor	r15, r15
    1bd0:	f3 94       	inc	r15
    1bd2:	03 e0       	ldi	r16, 0x03	; 3
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	40 e0       	ldi	r20, 0x00	; 0
    1bd8:	60 e2       	ldi	r22, 0x20	; 32
    1bda:	82 e3       	ldi	r24, 0x32	; 50
    1bdc:	3d df       	rcall	.-390    	; 0x1a58 <_Z11flashPixelshhhhhj>
    1bde:	8a ea       	ldi	r24, 0xAA	; 170
    1be0:	95 e5       	ldi	r25, 0x55	; 85
    1be2:	90 93 0a 03 	sts	0x030A, r25
		StackSignature = SIGNATURE;
    1be6:	80 93 09 03 	sts	0x0309, r24
    1bea:	78 94       	sei
    1bec:	20 9a       	sbi	0x04, 0	; 4
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
				USBSerial.StreamTask();
				_delay_ms(100);
			}
#endif
		GlobalInterruptEnable();
		sbi(DDRB, 0);
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
		fillPixels(150, 0, 0, 0);
    1bf4:	86 e9       	ldi	r24, 0x96	; 150
    1bf6:	0c df       	rcall	.-488    	; 0x1a10 <_Z10fillPixelshhhh>
    1bf8:	82 e3       	ldi	r24, 0x32	; 50
    1bfa:	60 df       	rcall	.-320    	; 0x1abc <_Z9PixelTesth>
    1bfc:	fd cf       	rjmp	.-6      	; 0x1bf8 <main+0x4a>

00001bfe <_GLOBAL__sub_I_StackSignature>:
			}
	}

volatile bool start = false;

NeoPixels neo(PIXELS);
    1bfe:	62 e3       	ldi	r22, 0x32	; 50
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	87 e8       	ldi	r24, 0x87	; 135
    1c04:	91 e0       	ldi	r25, 0x01	; 1
    1c06:	0e 94 3f 04 	call	0x87e	; 0x87e <_ZN9NeoPixelsC1Ej>
MyMqtt mqttsock;
    1c0a:	83 e1       	ldi	r24, 0x13	; 19
    1c0c:	91 e0       	ldi	r25, 0x01	; 1
    1c0e:	7d cb       	rjmp	.-2310   	; 0x130a <_ZN6MyMqttC1Ev>

00001c10 <_ZN9HWSerial13getEv>:
    1c10:	4f b7       	in	r20, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	fc 01       	movw	r30, r24
    1c16:	ec 59       	subi	r30, 0x9C	; 156
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	20 81       	ld	r18, Z
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	ab 59       	subi	r26, 0x9B	; 155
    1c20:	bf 4f       	sbci	r27, 0xFF	; 255
    1c22:	3c 91       	ld	r19, X
    1c24:	23 17       	cp	r18, r19
    1c26:	71 f0       	breq	.+28     	; 0x1c44 <_ZN9HWSerial13getEv+0x34>
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	a2 0f       	add	r26, r18
    1c2e:	b3 1f       	adc	r27, r19
    1c30:	94 96       	adiw	r26, 0x24	; 36
    1c32:	8c 91       	ld	r24, X
    1c34:	2f 5f       	subi	r18, 0xFF	; 255
    1c36:	3f 4f       	sbci	r19, 0xFF	; 255
    1c38:	2f 73       	andi	r18, 0x3F	; 63
    1c3a:	33 27       	eor	r19, r19
    1c3c:	20 83       	st	Z, r18
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	4f bf       	out	0x3f, r20	; 63
    1c42:	08 95       	ret
    1c44:	8f ef       	ldi	r24, 0xFF	; 255
    1c46:	9f ef       	ldi	r25, 0xFF	; 255
    1c48:	fb cf       	rjmp	.-10     	; 0x1c40 <_ZN9HWSerial13getEv+0x30>

00001c4a <_ZN9HWSerial16putrxcEc>:
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	fc 01       	movw	r30, r24
    1c50:	7f b7       	in	r23, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	dc 01       	movw	r26, r24
    1c56:	ab 59       	subi	r26, 0x9B	; 155
    1c58:	bf 4f       	sbci	r27, 0xFF	; 255
    1c5a:	9c 91       	ld	r25, X
    1c5c:	29 2f       	mov	r18, r25
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	a9 01       	movw	r20, r18
    1c62:	4f 5f       	subi	r20, 0xFF	; 255
    1c64:	5f 4f       	sbci	r21, 0xFF	; 255
    1c66:	4f 73       	andi	r20, 0x3F	; 63
    1c68:	55 27       	eor	r21, r21
    1c6a:	ef 01       	movw	r28, r30
    1c6c:	cc 59       	subi	r28, 0x9C	; 156
    1c6e:	df 4f       	sbci	r29, 0xFF	; 255
    1c70:	88 81       	ld	r24, Y
    1c72:	84 17       	cp	r24, r20
    1c74:	49 f0       	breq	.+18     	; 0x1c88 <_ZN9HWSerial16putrxcEc+0x3e>
    1c76:	e2 0f       	add	r30, r18
    1c78:	f3 1f       	adc	r31, r19
    1c7a:	64 a3       	std	Z+36, r22	; 0x24
    1c7c:	4c 93       	st	X, r20
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	7f bf       	out	0x3f, r23	; 63
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	08 95       	ret
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	7f bf       	out	0x3f, r23	; 63
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	08 95       	ret

00001c92 <_ZN9HWSerial16gettxcEv>:
    1c92:	fc 01       	movw	r30, r24
    1c94:	4f b7       	in	r20, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	22 a1       	ldd	r18, Z+34	; 0x22
    1c9a:	83 a1       	ldd	r24, Z+35	; 0x23
    1c9c:	28 17       	cp	r18, r24
    1c9e:	71 f0       	breq	.+28     	; 0x1cbc <_ZN9HWSerial16gettxcEv+0x2a>
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	df 01       	movw	r26, r30
    1ca4:	a2 0f       	add	r26, r18
    1ca6:	b3 1f       	adc	r27, r19
    1ca8:	12 96       	adiw	r26, 0x02	; 2
    1caa:	8c 91       	ld	r24, X
    1cac:	2f 5f       	subi	r18, 0xFF	; 255
    1cae:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb0:	2f 71       	andi	r18, 0x1F	; 31
    1cb2:	33 27       	eor	r19, r19
    1cb4:	22 a3       	std	Z+34, r18	; 0x22
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	4f bf       	out	0x3f, r20	; 63
    1cba:	08 95       	ret
    1cbc:	8f ef       	ldi	r24, 0xFF	; 255
    1cbe:	9f ef       	ldi	r25, 0xFF	; 255
    1cc0:	fb cf       	rjmp	.-10     	; 0x1cb8 <_ZN9HWSerial16gettxcEv+0x26>

00001cc2 <_ZN9HWSerial17PutCharEcb>:
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	5f b7       	in	r21, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	83 a1       	ldd	r24, Z+35	; 0x23
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	9c 01       	movw	r18, r24
    1cce:	2f 5f       	subi	r18, 0xFF	; 255
    1cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd2:	2f 71       	andi	r18, 0x1F	; 31
    1cd4:	33 27       	eor	r19, r19
    1cd6:	72 a1       	ldd	r23, Z+34	; 0x22
    1cd8:	72 17       	cp	r23, r18
    1cda:	d9 f0       	breq	.+54     	; 0x1d12 <_ZN9HWSerial17PutCharEcb+0x50>
    1cdc:	df 01       	movw	r26, r30
    1cde:	a8 0f       	add	r26, r24
    1ce0:	b9 1f       	adc	r27, r25
    1ce2:	12 96       	adiw	r26, 0x02	; 2
    1ce4:	6c 93       	st	X, r22
    1ce6:	23 a3       	std	Z+35, r18	; 0x23
    1ce8:	5f bf       	out	0x3f, r21	; 63
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	ea 59       	subi	r30, 0x9A	; 154
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	90 81       	ld	r25, Z
    1cf2:	90 fd       	sbrc	r25, 0
    1cf4:	0d c0       	rjmp	.+26     	; 0x1d10 <_ZN9HWSerial17PutCharEcb+0x4e>
    1cf6:	91 60       	ori	r25, 0x01	; 1
    1cf8:	90 83       	st	Z, r25
    1cfa:	90 91 c9 00 	lds	r25, 0x00C9
    1cfe:	90 62       	ori	r25, 0x20	; 32
    1d00:	90 93 c9 00 	sts	0x00C9, r25
    1d04:	90 91 c8 00 	lds	r25, 0x00C8
    1d08:	90 64       	ori	r25, 0x40	; 64
    1d0a:	90 93 c8 00 	sts	0x00C8, r25
    1d0e:	08 95       	ret
    1d10:	08 95       	ret
    1d12:	5f bf       	out	0x3f, r21	; 63
    1d14:	41 11       	cpse	r20, r1
    1d16:	03 c0       	rjmp	.+6      	; 0x1d1e <_ZN9HWSerial17PutCharEcb+0x5c>
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	e8 cf       	rjmp	.-48     	; 0x1cec <_ZN9HWSerial17PutCharEcb+0x2a>
    1d1c:	4f bf       	out	0x3f, r20	; 63
    1d1e:	4f b7       	in	r20, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	83 a1       	ldd	r24, Z+35	; 0x23
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9c 01       	movw	r18, r24
    1d28:	2f 5f       	subi	r18, 0xFF	; 255
    1d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2c:	2f 71       	andi	r18, 0x1F	; 31
    1d2e:	32 a1       	ldd	r19, Z+34	; 0x22
    1d30:	23 17       	cp	r18, r19
    1d32:	a1 f3       	breq	.-24     	; 0x1d1c <_ZN9HWSerial17PutCharEcb+0x5a>
    1d34:	df 01       	movw	r26, r30
    1d36:	a8 0f       	add	r26, r24
    1d38:	b9 1f       	adc	r27, r25
    1d3a:	12 96       	adiw	r26, 0x02	; 2
    1d3c:	6c 93       	st	X, r22
    1d3e:	23 a3       	std	Z+35, r18	; 0x23
    1d40:	4f bf       	out	0x3f, r20	; 63
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	d3 cf       	rjmp	.-90     	; 0x1cec <_ZN9HWSerial17PutCharEcb+0x2a>

00001d46 <_ZN9HWSerial15beginEm>:
    1d46:	cf 92       	push	r12
    1d48:	df 92       	push	r13
    1d4a:	ef 92       	push	r14
    1d4c:	ff 92       	push	r15
    1d4e:	6a 01       	movw	r12, r20
    1d50:	7b 01       	movw	r14, r22
    1d52:	41 15       	cp	r20, r1
    1d54:	51 4e       	sbci	r21, 0xE1	; 225
    1d56:	61 05       	cpc	r22, r1
    1d58:	71 05       	cpc	r23, r1
    1d5a:	d1 f0       	breq	.+52     	; 0x1d90 <_ZN9HWSerial15beginEm+0x4a>
    1d5c:	80 91 c8 00 	lds	r24, 0x00C8
    1d60:	82 60       	ori	r24, 0x02	; 2
    1d62:	80 93 c8 00 	sts	0x00C8, r24
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	79 e0       	ldi	r23, 0x09	; 9
    1d6a:	8d e3       	ldi	r24, 0x3D	; 61
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a7 01       	movw	r20, r14
    1d70:	96 01       	movw	r18, r12
    1d72:	f0 d1       	rcall	.+992    	; 0x2154 <__udivmodsi4>
    1d74:	da 01       	movw	r26, r20
    1d76:	c9 01       	movw	r24, r18
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	a1 09       	sbc	r26, r1
    1d7c:	b1 09       	sbc	r27, r1
    1d7e:	b6 95       	lsr	r27
    1d80:	a7 95       	ror	r26
    1d82:	97 95       	ror	r25
    1d84:	87 95       	ror	r24
    1d86:	9c 01       	movw	r18, r24
    1d88:	21 15       	cp	r18, r1
    1d8a:	80 e1       	ldi	r24, 0x10	; 16
    1d8c:	38 07       	cpc	r19, r24
    1d8e:	b0 f0       	brcs	.+44     	; 0x1dbc <_ZN9HWSerial15beginEm+0x76>
    1d90:	80 91 c8 00 	lds	r24, 0x00C8
    1d94:	8d 7f       	andi	r24, 0xFD	; 253
    1d96:	80 93 c8 00 	sts	0x00C8, r24
    1d9a:	60 e8       	ldi	r22, 0x80	; 128
    1d9c:	74 e8       	ldi	r23, 0x84	; 132
    1d9e:	8e e1       	ldi	r24, 0x1E	; 30
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	a7 01       	movw	r20, r14
    1da4:	96 01       	movw	r18, r12
    1da6:	d6 d1       	rcall	.+940    	; 0x2154 <__udivmodsi4>
    1da8:	da 01       	movw	r26, r20
    1daa:	c9 01       	movw	r24, r18
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	a1 09       	sbc	r26, r1
    1db0:	b1 09       	sbc	r27, r1
    1db2:	b6 95       	lsr	r27
    1db4:	a7 95       	ror	r26
    1db6:	97 95       	ror	r25
    1db8:	87 95       	ror	r24
    1dba:	9c 01       	movw	r18, r24
    1dbc:	30 93 cd 00 	sts	0x00CD, r19
    1dc0:	20 93 cc 00 	sts	0x00CC, r18
    1dc4:	80 91 c9 00 	lds	r24, 0x00C9
    1dc8:	80 61       	ori	r24, 0x10	; 16
    1dca:	80 93 c9 00 	sts	0x00C9, r24
    1dce:	80 91 c9 00 	lds	r24, 0x00C9
    1dd2:	88 60       	ori	r24, 0x08	; 8
    1dd4:	80 93 c9 00 	sts	0x00C9, r24
    1dd8:	80 91 c9 00 	lds	r24, 0x00C9
    1ddc:	80 68       	ori	r24, 0x80	; 128
    1dde:	80 93 c9 00 	sts	0x00C9, r24
    1de2:	80 91 c9 00 	lds	r24, 0x00C9
    1de6:	8f 7d       	andi	r24, 0xDF	; 223
    1de8:	80 93 c9 00 	sts	0x00C9, r24
    1dec:	78 94       	sei
    1dee:	ff 90       	pop	r15
    1df0:	ef 90       	pop	r14
    1df2:	df 90       	pop	r13
    1df4:	cf 90       	pop	r12
    1df6:	08 95       	ret

00001df8 <__vector_24>:
    1df8:	1f 92       	push	r1
    1dfa:	0f 92       	push	r0
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	0f 92       	push	r0
    1e00:	11 24       	eor	r1, r1
    1e02:	2f 93       	push	r18
    1e04:	3f 93       	push	r19
    1e06:	8f 93       	push	r24
    1e08:	9f 93       	push	r25
    1e0a:	ef 93       	push	r30
    1e0c:	ff 93       	push	r31
    1e0e:	2f b7       	in	r18, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	80 91 bb 02 	lds	r24, 0x02BB
    1e16:	90 91 bc 02 	lds	r25, 0x02BC
    1e1a:	89 17       	cp	r24, r25
    1e1c:	c1 f0       	breq	.+48     	; 0x1e4e <__vector_24+0x56>
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	fc 01       	movw	r30, r24
    1e22:	e7 56       	subi	r30, 0x67	; 103
    1e24:	fd 4f       	sbci	r31, 0xFD	; 253
    1e26:	32 81       	ldd	r19, Z+2	; 0x02
    1e28:	01 96       	adiw	r24, 0x01	; 1
    1e2a:	8f 71       	andi	r24, 0x1F	; 31
    1e2c:	99 27       	eor	r25, r25
    1e2e:	80 93 bb 02 	sts	0x02BB, r24
    1e32:	2f bf       	out	0x3f, r18	; 63
    1e34:	30 93 ce 00 	sts	0x00CE, r19
    1e38:	ff 91       	pop	r31
    1e3a:	ef 91       	pop	r30
    1e3c:	9f 91       	pop	r25
    1e3e:	8f 91       	pop	r24
    1e40:	3f 91       	pop	r19
    1e42:	2f 91       	pop	r18
    1e44:	0f 90       	pop	r0
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	0f 90       	pop	r0
    1e4a:	1f 90       	pop	r1
    1e4c:	18 95       	reti
    1e4e:	2f bf       	out	0x3f, r18	; 63
    1e50:	80 91 c9 00 	lds	r24, 0x00C9
    1e54:	8f 7d       	andi	r24, 0xDF	; 223
    1e56:	80 93 c9 00 	sts	0x00C9, r24
    1e5a:	80 91 ff 02 	lds	r24, 0x02FF
    1e5e:	8e 7f       	andi	r24, 0xFE	; 254
    1e60:	80 93 ff 02 	sts	0x02FF, r24
    1e64:	e9 cf       	rjmp	.-46     	; 0x1e38 <__vector_24+0x40>

00001e66 <__vector_23>:
    1e66:	1f 92       	push	r1
    1e68:	0f 92       	push	r0
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	0f 92       	push	r0
    1e6e:	11 24       	eor	r1, r1
    1e70:	2f 93       	push	r18
    1e72:	3f 93       	push	r19
    1e74:	4f 93       	push	r20
    1e76:	5f 93       	push	r21
    1e78:	6f 93       	push	r22
    1e7a:	8f 93       	push	r24
    1e7c:	9f 93       	push	r25
    1e7e:	ef 93       	push	r30
    1e80:	ff 93       	push	r31
    1e82:	80 91 c8 00 	lds	r24, 0x00C8
    1e86:	82 fd       	sbrc	r24, 2
    1e88:	18 c0       	rjmp	.+48     	; 0x1eba <__vector_23+0x54>
    1e8a:	60 91 ce 00 	lds	r22, 0x00CE
    1e8e:	4f b7       	in	r20, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	80 91 fe 02 	lds	r24, 0x02FE
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9c 01       	movw	r18, r24
    1e9a:	2f 5f       	subi	r18, 0xFF	; 255
    1e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9e:	2f 73       	andi	r18, 0x3F	; 63
    1ea0:	33 27       	eor	r19, r19
    1ea2:	50 91 fd 02 	lds	r21, 0x02FD
    1ea6:	52 17       	cp	r21, r18
    1ea8:	c1 f0       	breq	.+48     	; 0x1eda <__vector_23+0x74>
    1eaa:	fc 01       	movw	r30, r24
    1eac:	e7 56       	subi	r30, 0x67	; 103
    1eae:	fd 4f       	sbci	r31, 0xFD	; 253
    1eb0:	64 a3       	std	Z+36, r22	; 0x24
    1eb2:	20 93 fe 02 	sts	0x02FE, r18
    1eb6:	4f bf       	out	0x3f, r20	; 63
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <__vector_23+0x58>
    1eba:	80 91 ce 00 	lds	r24, 0x00CE
    1ebe:	ff 91       	pop	r31
    1ec0:	ef 91       	pop	r30
    1ec2:	9f 91       	pop	r25
    1ec4:	8f 91       	pop	r24
    1ec6:	6f 91       	pop	r22
    1ec8:	5f 91       	pop	r21
    1eca:	4f 91       	pop	r20
    1ecc:	3f 91       	pop	r19
    1ece:	2f 91       	pop	r18
    1ed0:	0f 90       	pop	r0
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	0f 90       	pop	r0
    1ed6:	1f 90       	pop	r1
    1ed8:	18 95       	reti
    1eda:	4f bf       	out	0x3f, r20	; 63
    1edc:	80 91 ff 02 	lds	r24, 0x02FF
    1ee0:	82 60       	ori	r24, 0x02	; 2
    1ee2:	80 93 ff 02 	sts	0x02FF, r24
    1ee6:	eb cf       	rjmp	.-42     	; 0x1ebe <__vector_23+0x58>

00001ee8 <_GLOBAL__sub_I_Serial1>:
    1ee8:	e9 e9       	ldi	r30, 0x99	; 153
    1eea:	f2 e0       	ldi	r31, 0x02	; 2
    1eec:	13 a2       	std	Z+35, r1	; 0x23
    1eee:	12 a2       	std	Z+34, r1	; 0x22
    1ef0:	10 92 fe 02 	sts	0x02FE, r1
    1ef4:	10 92 fd 02 	sts	0x02FD, r1
    1ef8:	8a e0       	ldi	r24, 0x0A	; 10
    1efa:	91 e0       	ldi	r25, 0x01	; 1
    1efc:	91 83       	std	Z+1, r25	; 0x01
    1efe:	80 83       	st	Z, r24
    1f00:	ef ef       	ldi	r30, 0xFF	; 255
    1f02:	f2 e0       	ldi	r31, 0x02	; 2
    1f04:	80 81       	ld	r24, Z
    1f06:	8e 7f       	andi	r24, 0xFE	; 254
    1f08:	8d 7f       	andi	r24, 0xFD	; 253
    1f0a:	80 83       	st	Z, r24
    1f0c:	08 95       	ret

00001f0e <__vector_21>:
    1f0e:	1f 92       	push	r1
    1f10:	0f 92       	push	r0
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	0f 92       	push	r0
    1f16:	11 24       	eor	r1, r1
    1f18:	2f 93       	push	r18
    1f1a:	3f 93       	push	r19
    1f1c:	4f 93       	push	r20
    1f1e:	5f 93       	push	r21
    1f20:	6f 93       	push	r22
    1f22:	7f 93       	push	r23
    1f24:	8f 93       	push	r24
    1f26:	9f 93       	push	r25
    1f28:	af 93       	push	r26
    1f2a:	bf 93       	push	r27
    1f2c:	ef 93       	push	r30
    1f2e:	ff 93       	push	r31
    1f30:	80 91 01 03 	lds	r24, 0x0301
    1f34:	90 91 02 03 	lds	r25, 0x0302
    1f38:	a0 91 03 03 	lds	r26, 0x0303
    1f3c:	b0 91 04 03 	lds	r27, 0x0304
    1f40:	30 91 00 03 	lds	r19, 0x0300
    1f44:	23 e0       	ldi	r18, 0x03	; 3
    1f46:	23 0f       	add	r18, r19
    1f48:	2d 37       	cpi	r18, 0x7D	; 125
    1f4a:	a0 f1       	brcs	.+104    	; 0x1fb4 <__vector_21+0xa6>
    1f4c:	26 e8       	ldi	r18, 0x86	; 134
    1f4e:	23 0f       	add	r18, r19
    1f50:	02 96       	adiw	r24, 0x02	; 2
    1f52:	a1 1d       	adc	r26, r1
    1f54:	b1 1d       	adc	r27, r1
    1f56:	20 93 00 03 	sts	0x0300, r18
    1f5a:	80 93 01 03 	sts	0x0301, r24
    1f5e:	90 93 02 03 	sts	0x0302, r25
    1f62:	a0 93 03 03 	sts	0x0303, r26
    1f66:	b0 93 04 03 	sts	0x0304, r27
    1f6a:	80 91 05 03 	lds	r24, 0x0305
    1f6e:	90 91 06 03 	lds	r25, 0x0306
    1f72:	a0 91 07 03 	lds	r26, 0x0307
    1f76:	b0 91 08 03 	lds	r27, 0x0308
    1f7a:	01 96       	adiw	r24, 0x01	; 1
    1f7c:	a1 1d       	adc	r26, r1
    1f7e:	b1 1d       	adc	r27, r1
    1f80:	80 93 05 03 	sts	0x0305, r24
    1f84:	90 93 06 03 	sts	0x0306, r25
    1f88:	a0 93 07 03 	sts	0x0307, r26
    1f8c:	b0 93 08 03 	sts	0x0308, r27
    1f90:	99 d0       	rcall	.+306    	; 0x20c4 <_Z10TrackStackv>
    1f92:	ff 91       	pop	r31
    1f94:	ef 91       	pop	r30
    1f96:	bf 91       	pop	r27
    1f98:	af 91       	pop	r26
    1f9a:	9f 91       	pop	r25
    1f9c:	8f 91       	pop	r24
    1f9e:	7f 91       	pop	r23
    1fa0:	6f 91       	pop	r22
    1fa2:	5f 91       	pop	r21
    1fa4:	4f 91       	pop	r20
    1fa6:	3f 91       	pop	r19
    1fa8:	2f 91       	pop	r18
    1faa:	0f 90       	pop	r0
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	0f 90       	pop	r0
    1fb0:	1f 90       	pop	r1
    1fb2:	18 95       	reti
    1fb4:	01 96       	adiw	r24, 0x01	; 1
    1fb6:	a1 1d       	adc	r26, r1
    1fb8:	b1 1d       	adc	r27, r1
    1fba:	cd cf       	rjmp	.-102    	; 0x1f56 <__vector_21+0x48>

00001fbc <_Z6millisv>:
    1fbc:	2f b7       	in	r18, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	60 91 01 03 	lds	r22, 0x0301
    1fc4:	70 91 02 03 	lds	r23, 0x0302
    1fc8:	80 91 03 03 	lds	r24, 0x0303
    1fcc:	90 91 04 03 	lds	r25, 0x0304
    1fd0:	2f bf       	out	0x3f, r18	; 63
    1fd2:	08 95       	ret

00001fd4 <_Z6microsv>:
    1fd4:	3f b7       	in	r19, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	80 91 05 03 	lds	r24, 0x0305
    1fdc:	90 91 06 03 	lds	r25, 0x0306
    1fe0:	a0 91 07 03 	lds	r26, 0x0307
    1fe4:	b0 91 08 03 	lds	r27, 0x0308
    1fe8:	26 b5       	in	r18, 0x26	; 38
    1fea:	a8 9b       	sbis	0x15, 0	; 21
    1fec:	05 c0       	rjmp	.+10     	; 0x1ff8 <_Z6microsv+0x24>
    1fee:	2f 3f       	cpi	r18, 0xFF	; 255
    1ff0:	19 f0       	breq	.+6      	; 0x1ff8 <_Z6microsv+0x24>
    1ff2:	01 96       	adiw	r24, 0x01	; 1
    1ff4:	a1 1d       	adc	r26, r1
    1ff6:	b1 1d       	adc	r27, r1
    1ff8:	3f bf       	out	0x3f, r19	; 63
    1ffa:	ba 2f       	mov	r27, r26
    1ffc:	a9 2f       	mov	r26, r25
    1ffe:	98 2f       	mov	r25, r24
    2000:	88 27       	eor	r24, r24
    2002:	82 0f       	add	r24, r18
    2004:	91 1d       	adc	r25, r1
    2006:	a1 1d       	adc	r26, r1
    2008:	b1 1d       	adc	r27, r1
    200a:	bc 01       	movw	r22, r24
    200c:	cd 01       	movw	r24, r26
    200e:	66 0f       	add	r22, r22
    2010:	77 1f       	adc	r23, r23
    2012:	88 1f       	adc	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	66 0f       	add	r22, r22
    2018:	77 1f       	adc	r23, r23
    201a:	88 1f       	adc	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	08 95       	ret

00002020 <_Z5delaym>:
    2020:	cf 92       	push	r12
    2022:	df 92       	push	r13
    2024:	ef 92       	push	r14
    2026:	ff 92       	push	r15
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	6b 01       	movw	r12, r22
    202e:	7c 01       	movw	r14, r24
    2030:	d1 df       	rcall	.-94     	; 0x1fd4 <_Z6microsv>
    2032:	eb 01       	movw	r28, r22
    2034:	c1 14       	cp	r12, r1
    2036:	d1 04       	cpc	r13, r1
    2038:	e1 04       	cpc	r14, r1
    203a:	f1 04       	cpc	r15, r1
    203c:	91 f0       	breq	.+36     	; 0x2062 <_Z5delaym+0x42>
    203e:	ca df       	rcall	.-108    	; 0x1fd4 <_Z6microsv>
    2040:	6c 1b       	sub	r22, r28
    2042:	7d 0b       	sbc	r23, r29
    2044:	68 3e       	cpi	r22, 0xE8	; 232
    2046:	73 40       	sbci	r23, 0x03	; 3
    2048:	d0 f3       	brcs	.-12     	; 0x203e <_Z5delaym+0x1e>
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	c8 1a       	sub	r12, r24
    204e:	d1 08       	sbc	r13, r1
    2050:	e1 08       	sbc	r14, r1
    2052:	f1 08       	sbc	r15, r1
    2054:	c8 51       	subi	r28, 0x18	; 24
    2056:	dc 4f       	sbci	r29, 0xFC	; 252
    2058:	c1 14       	cp	r12, r1
    205a:	d1 04       	cpc	r13, r1
    205c:	e1 04       	cpc	r14, r1
    205e:	f1 04       	cpc	r15, r1
    2060:	71 f7       	brne	.-36     	; 0x203e <_Z5delaym+0x1e>
    2062:	df 91       	pop	r29
    2064:	cf 91       	pop	r28
    2066:	ff 90       	pop	r15
    2068:	ef 90       	pop	r14
    206a:	df 90       	pop	r13
    206c:	cf 90       	pop	r12
    206e:	08 95       	ret

00002070 <_Z9initTimerv>:
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	80 e8       	ldi	r24, 0x80	; 128
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	80 93 61 00 	sts	0x0061, r24
    207c:	90 93 61 00 	sts	0x0061, r25
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	78 94       	sei
    2084:	84 b5       	in	r24, 0x24	; 36
    2086:	82 60       	ori	r24, 0x02	; 2
    2088:	84 bd       	out	0x24, r24	; 36
    208a:	84 b5       	in	r24, 0x24	; 36
    208c:	81 60       	ori	r24, 0x01	; 1
    208e:	84 bd       	out	0x24, r24	; 36
    2090:	85 b5       	in	r24, 0x25	; 37
    2092:	82 60       	ori	r24, 0x02	; 2
    2094:	85 bd       	out	0x25, r24	; 37
    2096:	85 b5       	in	r24, 0x25	; 37
    2098:	81 60       	ori	r24, 0x01	; 1
    209a:	85 bd       	out	0x25, r24	; 37
    209c:	ee e6       	ldi	r30, 0x6E	; 110
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	81 60       	ori	r24, 0x01	; 1
    20a4:	80 83       	st	Z, r24
    20a6:	e1 e8       	ldi	r30, 0x81	; 129
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	10 82       	st	Z, r1
    20ac:	80 81       	ld	r24, Z
    20ae:	82 60       	ori	r24, 0x02	; 2
    20b0:	80 83       	st	Z, r24
    20b2:	80 81       	ld	r24, Z
    20b4:	81 60       	ori	r24, 0x01	; 1
    20b6:	80 83       	st	Z, r24
    20b8:	e0 e8       	ldi	r30, 0x80	; 128
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	81 60       	ori	r24, 0x01	; 1
    20c0:	80 83       	st	Z, r24
    20c2:	08 95       	ret

000020c4 <_Z10TrackStackv>:
    20c4:	2d b7       	in	r18, 0x3d	; 61
    20c6:	3e b7       	in	r19, 0x3e	; 62
    20c8:	80 91 04 01 	lds	r24, 0x0104
    20cc:	90 91 05 01 	lds	r25, 0x0105
    20d0:	28 17       	cp	r18, r24
    20d2:	39 07       	cpc	r19, r25
    20d4:	30 f4       	brcc	.+12     	; 0x20e2 <_Z10TrackStackv+0x1e>
    20d6:	8d b7       	in	r24, 0x3d	; 61
    20d8:	9e b7       	in	r25, 0x3e	; 62
    20da:	90 93 05 01 	sts	0x0105, r25
    20de:	80 93 04 01 	sts	0x0104, r24
    20e2:	08 95       	ret

000020e4 <__mulhi3>:
    20e4:	00 24       	eor	r0, r0
    20e6:	55 27       	eor	r21, r21
    20e8:	04 c0       	rjmp	.+8      	; 0x20f2 <__mulhi3+0xe>
    20ea:	08 0e       	add	r0, r24
    20ec:	59 1f       	adc	r21, r25
    20ee:	88 0f       	add	r24, r24
    20f0:	99 1f       	adc	r25, r25
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	29 f0       	breq	.+10     	; 0x2100 <__mulhi3+0x1c>
    20f6:	76 95       	lsr	r23
    20f8:	67 95       	ror	r22
    20fa:	b8 f3       	brcs	.-18     	; 0x20ea <__mulhi3+0x6>
    20fc:	71 05       	cpc	r23, r1
    20fe:	b9 f7       	brne	.-18     	; 0x20ee <__mulhi3+0xa>
    2100:	80 2d       	mov	r24, r0
    2102:	95 2f       	mov	r25, r21
    2104:	08 95       	ret

00002106 <__udivmodhi4>:
    2106:	aa 1b       	sub	r26, r26
    2108:	bb 1b       	sub	r27, r27
    210a:	51 e1       	ldi	r21, 0x11	; 17
    210c:	07 c0       	rjmp	.+14     	; 0x211c <__udivmodhi4_ep>

0000210e <__udivmodhi4_loop>:
    210e:	aa 1f       	adc	r26, r26
    2110:	bb 1f       	adc	r27, r27
    2112:	a6 17       	cp	r26, r22
    2114:	b7 07       	cpc	r27, r23
    2116:	10 f0       	brcs	.+4      	; 0x211c <__udivmodhi4_ep>
    2118:	a6 1b       	sub	r26, r22
    211a:	b7 0b       	sbc	r27, r23

0000211c <__udivmodhi4_ep>:
    211c:	88 1f       	adc	r24, r24
    211e:	99 1f       	adc	r25, r25
    2120:	5a 95       	dec	r21
    2122:	a9 f7       	brne	.-22     	; 0x210e <__udivmodhi4_loop>
    2124:	80 95       	com	r24
    2126:	90 95       	com	r25
    2128:	bc 01       	movw	r22, r24
    212a:	cd 01       	movw	r24, r26
    212c:	08 95       	ret

0000212e <__divmodhi4>:
    212e:	97 fb       	bst	r25, 7
    2130:	07 2e       	mov	r0, r23
    2132:	16 f4       	brtc	.+4      	; 0x2138 <__divmodhi4+0xa>
    2134:	00 94       	com	r0
    2136:	06 d0       	rcall	.+12     	; 0x2144 <__divmodhi4_neg1>
    2138:	77 fd       	sbrc	r23, 7
    213a:	08 d0       	rcall	.+16     	; 0x214c <__divmodhi4_neg2>
    213c:	e4 df       	rcall	.-56     	; 0x2106 <__udivmodhi4>
    213e:	07 fc       	sbrc	r0, 7
    2140:	05 d0       	rcall	.+10     	; 0x214c <__divmodhi4_neg2>
    2142:	3e f4       	brtc	.+14     	; 0x2152 <__divmodhi4_exit>

00002144 <__divmodhi4_neg1>:
    2144:	90 95       	com	r25
    2146:	81 95       	neg	r24
    2148:	9f 4f       	sbci	r25, 0xFF	; 255
    214a:	08 95       	ret

0000214c <__divmodhi4_neg2>:
    214c:	70 95       	com	r23
    214e:	61 95       	neg	r22
    2150:	7f 4f       	sbci	r23, 0xFF	; 255

00002152 <__divmodhi4_exit>:
    2152:	08 95       	ret

00002154 <__udivmodsi4>:
    2154:	a1 e2       	ldi	r26, 0x21	; 33
    2156:	1a 2e       	mov	r1, r26
    2158:	aa 1b       	sub	r26, r26
    215a:	bb 1b       	sub	r27, r27
    215c:	fd 01       	movw	r30, r26
    215e:	0d c0       	rjmp	.+26     	; 0x217a <__udivmodsi4_ep>

00002160 <__udivmodsi4_loop>:
    2160:	aa 1f       	adc	r26, r26
    2162:	bb 1f       	adc	r27, r27
    2164:	ee 1f       	adc	r30, r30
    2166:	ff 1f       	adc	r31, r31
    2168:	a2 17       	cp	r26, r18
    216a:	b3 07       	cpc	r27, r19
    216c:	e4 07       	cpc	r30, r20
    216e:	f5 07       	cpc	r31, r21
    2170:	20 f0       	brcs	.+8      	; 0x217a <__udivmodsi4_ep>
    2172:	a2 1b       	sub	r26, r18
    2174:	b3 0b       	sbc	r27, r19
    2176:	e4 0b       	sbc	r30, r20
    2178:	f5 0b       	sbc	r31, r21

0000217a <__udivmodsi4_ep>:
    217a:	66 1f       	adc	r22, r22
    217c:	77 1f       	adc	r23, r23
    217e:	88 1f       	adc	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	1a 94       	dec	r1
    2184:	69 f7       	brne	.-38     	; 0x2160 <__udivmodsi4_loop>
    2186:	60 95       	com	r22
    2188:	70 95       	com	r23
    218a:	80 95       	com	r24
    218c:	90 95       	com	r25
    218e:	9b 01       	movw	r18, r22
    2190:	ac 01       	movw	r20, r24
    2192:	bd 01       	movw	r22, r26
    2194:	cf 01       	movw	r24, r30
    2196:	08 95       	ret

00002198 <__divmodsi4>:
    2198:	05 2e       	mov	r0, r21
    219a:	97 fb       	bst	r25, 7
    219c:	16 f4       	brtc	.+4      	; 0x21a2 <__divmodsi4+0xa>
    219e:	00 94       	com	r0
    21a0:	0f d0       	rcall	.+30     	; 0x21c0 <__negsi2>
    21a2:	57 fd       	sbrc	r21, 7
    21a4:	05 d0       	rcall	.+10     	; 0x21b0 <__divmodsi4_neg2>
    21a6:	d6 df       	rcall	.-84     	; 0x2154 <__udivmodsi4>
    21a8:	07 fc       	sbrc	r0, 7
    21aa:	02 d0       	rcall	.+4      	; 0x21b0 <__divmodsi4_neg2>
    21ac:	46 f4       	brtc	.+16     	; 0x21be <__divmodsi4_exit>
    21ae:	08 c0       	rjmp	.+16     	; 0x21c0 <__negsi2>

000021b0 <__divmodsi4_neg2>:
    21b0:	50 95       	com	r21
    21b2:	40 95       	com	r20
    21b4:	30 95       	com	r19
    21b6:	21 95       	neg	r18
    21b8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ba:	4f 4f       	sbci	r20, 0xFF	; 255
    21bc:	5f 4f       	sbci	r21, 0xFF	; 255

000021be <__divmodsi4_exit>:
    21be:	08 95       	ret

000021c0 <__negsi2>:
    21c0:	90 95       	com	r25
    21c2:	80 95       	com	r24
    21c4:	70 95       	com	r23
    21c6:	61 95       	neg	r22
    21c8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ca:	8f 4f       	sbci	r24, 0xFF	; 255
    21cc:	9f 4f       	sbci	r25, 0xFF	; 255
    21ce:	08 95       	ret

000021d0 <__mulsidi3>:
    21d0:	68 94       	set
    21d2:	00 13       	cpse	r16, r16

000021d4 <__umulsidi3>:
    21d4:	e8 94       	clt
    21d6:	a0 e0       	ldi	r26, 0x00	; 0
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e0 ef       	ldi	r30, 0xF0	; 240
    21dc:	f0 e1       	ldi	r31, 0x10	; 16
    21de:	1d c0       	rjmp	.+58     	; 0x221a <__prologue_saves__+0x10>
    21e0:	ef ef       	ldi	r30, 0xFF	; 255
    21e2:	e7 f9       	bld	r30, 7
    21e4:	59 01       	movw	r10, r18
    21e6:	6a 01       	movw	r12, r20
    21e8:	5e 23       	and	r21, r30
    21ea:	55 0f       	add	r21, r21
    21ec:	ee 08       	sbc	r14, r14
    21ee:	fe 2c       	mov	r15, r14
    21f0:	87 01       	movw	r16, r14
    21f2:	9b 01       	movw	r18, r22
    21f4:	ac 01       	movw	r20, r24
    21f6:	9e 23       	and	r25, r30
    21f8:	99 0f       	add	r25, r25
    21fa:	66 0b       	sbc	r22, r22
    21fc:	76 2f       	mov	r23, r22
    21fe:	cb 01       	movw	r24, r22
    2200:	41 d0       	rcall	.+130    	; 0x2284 <__muldi3>
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	ea e0       	ldi	r30, 0x0A	; 10
    2208:	24 c0       	rjmp	.+72     	; 0x2252 <__epilogue_restores__+0x10>

0000220a <__prologue_saves__>:
    220a:	2f 92       	push	r2
    220c:	3f 92       	push	r3
    220e:	4f 92       	push	r4
    2210:	5f 92       	push	r5
    2212:	6f 92       	push	r6
    2214:	7f 92       	push	r7
    2216:	8f 92       	push	r8
    2218:	9f 92       	push	r9
    221a:	af 92       	push	r10
    221c:	bf 92       	push	r11
    221e:	cf 92       	push	r12
    2220:	df 92       	push	r13
    2222:	ef 92       	push	r14
    2224:	ff 92       	push	r15
    2226:	0f 93       	push	r16
    2228:	1f 93       	push	r17
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	ca 1b       	sub	r28, r26
    2234:	db 0b       	sbc	r29, r27
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	09 94       	ijmp

00002242 <__epilogue_restores__>:
    2242:	2a 88       	ldd	r2, Y+18	; 0x12
    2244:	39 88       	ldd	r3, Y+17	; 0x11
    2246:	48 88       	ldd	r4, Y+16	; 0x10
    2248:	5f 84       	ldd	r5, Y+15	; 0x0f
    224a:	6e 84       	ldd	r6, Y+14	; 0x0e
    224c:	7d 84       	ldd	r7, Y+13	; 0x0d
    224e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2250:	9b 84       	ldd	r9, Y+11	; 0x0b
    2252:	aa 84       	ldd	r10, Y+10	; 0x0a
    2254:	b9 84       	ldd	r11, Y+9	; 0x09
    2256:	c8 84       	ldd	r12, Y+8	; 0x08
    2258:	df 80       	ldd	r13, Y+7	; 0x07
    225a:	ee 80       	ldd	r14, Y+6	; 0x06
    225c:	fd 80       	ldd	r15, Y+5	; 0x05
    225e:	0c 81       	ldd	r16, Y+4	; 0x04
    2260:	1b 81       	ldd	r17, Y+3	; 0x03
    2262:	aa 81       	ldd	r26, Y+2	; 0x02
    2264:	b9 81       	ldd	r27, Y+1	; 0x01
    2266:	ce 0f       	add	r28, r30
    2268:	d1 1d       	adc	r29, r1
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	de bf       	out	0x3e, r29	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	cd bf       	out	0x3d, r28	; 61
    2274:	ed 01       	movw	r28, r26
    2276:	08 95       	ret

00002278 <__tablejump2__>:
    2278:	ee 0f       	add	r30, r30
    227a:	ff 1f       	adc	r31, r31
    227c:	05 90       	lpm	r0, Z+
    227e:	f4 91       	lpm	r31, Z
    2280:	e0 2d       	mov	r30, r0
    2282:	09 94       	ijmp

00002284 <__muldi3>:
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	9f 92       	push	r9
    228a:	a0 e4       	ldi	r26, 0x40	; 64
    228c:	9a 2e       	mov	r9, r26
    228e:	00 24       	eor	r0, r0
    2290:	d0 01       	movw	r26, r0
    2292:	e0 01       	movw	r28, r0
    2294:	f0 01       	movw	r30, r0
    2296:	16 95       	lsr	r17
    2298:	07 95       	ror	r16
    229a:	f7 94       	ror	r15
    229c:	e7 94       	ror	r14
    229e:	d7 94       	ror	r13
    22a0:	c7 94       	ror	r12
    22a2:	b7 94       	ror	r11
    22a4:	a7 94       	ror	r10
    22a6:	48 f4       	brcc	.+18     	; 0x22ba <__muldi3+0x36>
    22a8:	10 68       	ori	r17, 0x80	; 128
    22aa:	a2 0f       	add	r26, r18
    22ac:	b3 1f       	adc	r27, r19
    22ae:	c4 1f       	adc	r28, r20
    22b0:	d5 1f       	adc	r29, r21
    22b2:	e6 1f       	adc	r30, r22
    22b4:	f7 1f       	adc	r31, r23
    22b6:	08 1e       	adc	r0, r24
    22b8:	19 1e       	adc	r1, r25
    22ba:	22 0f       	add	r18, r18
    22bc:	33 1f       	adc	r19, r19
    22be:	44 1f       	adc	r20, r20
    22c0:	55 1f       	adc	r21, r21
    22c2:	66 1f       	adc	r22, r22
    22c4:	77 1f       	adc	r23, r23
    22c6:	88 1f       	adc	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	9a 94       	dec	r9
    22cc:	21 f7       	brne	.-56     	; 0x2296 <__muldi3+0x12>
    22ce:	9d 01       	movw	r18, r26
    22d0:	ae 01       	movw	r20, r28
    22d2:	bf 01       	movw	r22, r30
    22d4:	c0 01       	movw	r24, r0
    22d6:	11 24       	eor	r1, r1
    22d8:	9f 90       	pop	r9
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <do_random>:
    22e0:	a0 e0       	ldi	r26, 0x00	; 0
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	e5 e7       	ldi	r30, 0x75	; 117
    22e6:	f1 e1       	ldi	r31, 0x11	; 17
    22e8:	96 cf       	rjmp	.-212    	; 0x2216 <__prologue_saves__+0xc>
    22ea:	ec 01       	movw	r28, r24
    22ec:	68 81       	ld	r22, Y
    22ee:	79 81       	ldd	r23, Y+1	; 0x01
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	9b 81       	ldd	r25, Y+3	; 0x03
    22f4:	61 15       	cp	r22, r1
    22f6:	71 05       	cpc	r23, r1
    22f8:	81 05       	cpc	r24, r1
    22fa:	91 05       	cpc	r25, r1
    22fc:	21 f4       	brne	.+8      	; 0x2306 <do_random+0x26>
    22fe:	64 e2       	ldi	r22, 0x24	; 36
    2300:	79 ed       	ldi	r23, 0xD9	; 217
    2302:	8b e5       	ldi	r24, 0x5B	; 91
    2304:	97 e0       	ldi	r25, 0x07	; 7
    2306:	2d e1       	ldi	r18, 0x1D	; 29
    2308:	33 ef       	ldi	r19, 0xF3	; 243
    230a:	41 e0       	ldi	r20, 0x01	; 1
    230c:	50 e0       	ldi	r21, 0x00	; 0
    230e:	44 df       	rcall	.-376    	; 0x2198 <__divmodsi4>
    2310:	49 01       	movw	r8, r18
    2312:	5a 01       	movw	r10, r20
    2314:	27 ea       	ldi	r18, 0xA7	; 167
    2316:	31 e4       	ldi	r19, 0x41	; 65
    2318:	40 e0       	ldi	r20, 0x00	; 0
    231a:	50 e0       	ldi	r21, 0x00	; 0
    231c:	59 df       	rcall	.-334    	; 0x21d0 <__mulsidi3>
    231e:	69 01       	movw	r12, r18
    2320:	7a 01       	movw	r14, r20
    2322:	c5 01       	movw	r24, r10
    2324:	b4 01       	movw	r22, r8
    2326:	2c ee       	ldi	r18, 0xEC	; 236
    2328:	34 ef       	ldi	r19, 0xF4	; 244
    232a:	4f ef       	ldi	r20, 0xFF	; 255
    232c:	5f ef       	ldi	r21, 0xFF	; 255
    232e:	50 df       	rcall	.-352    	; 0x21d0 <__mulsidi3>
    2330:	02 2f       	mov	r16, r18
    2332:	13 2f       	mov	r17, r19
    2334:	9a 01       	movw	r18, r20
    2336:	d7 01       	movw	r26, r14
    2338:	c6 01       	movw	r24, r12
    233a:	80 0f       	add	r24, r16
    233c:	91 1f       	adc	r25, r17
    233e:	a2 1f       	adc	r26, r18
    2340:	b3 1f       	adc	r27, r19
    2342:	b7 ff       	sbrs	r27, 7
    2344:	03 c0       	rjmp	.+6      	; 0x234c <do_random+0x6c>
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	a1 09       	sbc	r26, r1
    234a:	b0 48       	sbci	r27, 0x80	; 128
    234c:	88 83       	st	Y, r24
    234e:	99 83       	std	Y+1, r25	; 0x01
    2350:	aa 83       	std	Y+2, r26	; 0x02
    2352:	bb 83       	std	Y+3, r27	; 0x03
    2354:	bc 01       	movw	r22, r24
    2356:	cd 01       	movw	r24, r26
    2358:	9f 77       	andi	r25, 0x7F	; 127
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	ec e0       	ldi	r30, 0x0C	; 12
    2360:	76 cf       	rjmp	.-276    	; 0x224e <__epilogue_restores__+0xc>

00002362 <random_r>:
    2362:	be cf       	rjmp	.-132    	; 0x22e0 <do_random>

00002364 <random>:
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	91 e0       	ldi	r25, 0x01	; 1
    2368:	bb cf       	rjmp	.-138    	; 0x22e0 <do_random>

0000236a <srandom>:
    236a:	60 93 00 01 	sts	0x0100, r22
    236e:	70 93 01 01 	sts	0x0101, r23
    2372:	80 93 02 01 	sts	0x0102, r24
    2376:	90 93 03 01 	sts	0x0103, r25
    237a:	08 95       	ret

0000237c <atoi>:
    237c:	fc 01       	movw	r30, r24
    237e:	88 27       	eor	r24, r24
    2380:	99 27       	eor	r25, r25
    2382:	e8 94       	clt
    2384:	21 91       	ld	r18, Z+
    2386:	20 32       	cpi	r18, 0x20	; 32
    2388:	e9 f3       	breq	.-6      	; 0x2384 <atoi+0x8>
    238a:	29 30       	cpi	r18, 0x09	; 9
    238c:	10 f0       	brcs	.+4      	; 0x2392 <atoi+0x16>
    238e:	2e 30       	cpi	r18, 0x0E	; 14
    2390:	c8 f3       	brcs	.-14     	; 0x2384 <atoi+0x8>
    2392:	2b 32       	cpi	r18, 0x2B	; 43
    2394:	39 f0       	breq	.+14     	; 0x23a4 <atoi+0x28>
    2396:	2d 32       	cpi	r18, 0x2D	; 45
    2398:	31 f4       	brne	.+12     	; 0x23a6 <atoi+0x2a>
    239a:	68 94       	set
    239c:	03 c0       	rjmp	.+6      	; 0x23a4 <atoi+0x28>
    239e:	59 d0       	rcall	.+178    	; 0x2452 <__mulhi_const_10>
    23a0:	82 0f       	add	r24, r18
    23a2:	91 1d       	adc	r25, r1
    23a4:	21 91       	ld	r18, Z+
    23a6:	20 53       	subi	r18, 0x30	; 48
    23a8:	2a 30       	cpi	r18, 0x0A	; 10
    23aa:	c8 f3       	brcs	.-14     	; 0x239e <atoi+0x22>
    23ac:	1e f4       	brtc	.+6      	; 0x23b4 <atoi+0x38>
    23ae:	90 95       	com	r25
    23b0:	81 95       	neg	r24
    23b2:	9f 4f       	sbci	r25, 0xFF	; 255
    23b4:	08 95       	ret

000023b6 <isgraph>:
    23b6:	80 32       	cpi	r24, 0x20	; 32
    23b8:	09 f0       	breq	.+2      	; 0x23bc <isprint+0x2>

000023ba <isprint>:
    23ba:	91 11       	cpse	r25, r1
    23bc:	54 c0       	rjmp	.+168    	; 0x2466 <__ctype_isfalse>
    23be:	80 52       	subi	r24, 0x20	; 32
    23c0:	8f 55       	subi	r24, 0x5F	; 95
    23c2:	e0 f7       	brcc	.-8      	; 0x23bc <isprint+0x2>
    23c4:	08 95       	ret

000023c6 <isspace>:
    23c6:	91 11       	cpse	r25, r1
    23c8:	4e c0       	rjmp	.+156    	; 0x2466 <__ctype_isfalse>
    23ca:	80 32       	cpi	r24, 0x20	; 32
    23cc:	19 f0       	breq	.+6      	; 0x23d4 <isspace+0xe>
    23ce:	89 50       	subi	r24, 0x09	; 9
    23d0:	85 50       	subi	r24, 0x05	; 5
    23d2:	d0 f7       	brcc	.-12     	; 0x23c8 <isspace+0x2>
    23d4:	08 95       	ret

000023d6 <strcmp_P>:
    23d6:	fb 01       	movw	r30, r22
    23d8:	dc 01       	movw	r26, r24
    23da:	8d 91       	ld	r24, X+
    23dc:	05 90       	lpm	r0, Z+
    23de:	80 19       	sub	r24, r0
    23e0:	01 10       	cpse	r0, r1
    23e2:	d9 f3       	breq	.-10     	; 0x23da <strcmp_P+0x4>
    23e4:	99 0b       	sbc	r25, r25
    23e6:	08 95       	ret

000023e8 <strstr_P>:
    23e8:	fb 01       	movw	r30, r22
    23ea:	55 91       	lpm	r21, Z+
    23ec:	55 23       	and	r21, r21
    23ee:	a9 f0       	breq	.+42     	; 0x241a <strstr_P+0x32>
    23f0:	bf 01       	movw	r22, r30
    23f2:	dc 01       	movw	r26, r24
    23f4:	4d 91       	ld	r20, X+
    23f6:	45 17       	cp	r20, r21
    23f8:	41 11       	cpse	r20, r1
    23fa:	e1 f7       	brne	.-8      	; 0x23f4 <strstr_P+0xc>
    23fc:	59 f4       	brne	.+22     	; 0x2414 <strstr_P+0x2c>
    23fe:	cd 01       	movw	r24, r26
    2400:	05 90       	lpm	r0, Z+
    2402:	00 20       	and	r0, r0
    2404:	49 f0       	breq	.+18     	; 0x2418 <strstr_P+0x30>
    2406:	4d 91       	ld	r20, X+
    2408:	40 15       	cp	r20, r0
    240a:	41 11       	cpse	r20, r1
    240c:	c9 f3       	breq	.-14     	; 0x2400 <strstr_P+0x18>
    240e:	fb 01       	movw	r30, r22
    2410:	41 11       	cpse	r20, r1
    2412:	ef cf       	rjmp	.-34     	; 0x23f2 <strstr_P+0xa>
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	08 95       	ret

0000241c <memcpy>:
    241c:	fb 01       	movw	r30, r22
    241e:	dc 01       	movw	r26, r24
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <memcpy+0xa>
    2422:	01 90       	ld	r0, Z+
    2424:	0d 92       	st	X+, r0
    2426:	41 50       	subi	r20, 0x01	; 1
    2428:	50 40       	sbci	r21, 0x00	; 0
    242a:	d8 f7       	brcc	.-10     	; 0x2422 <memcpy+0x6>
    242c:	08 95       	ret

0000242e <memset>:
    242e:	dc 01       	movw	r26, r24
    2430:	01 c0       	rjmp	.+2      	; 0x2434 <memset+0x6>
    2432:	6d 93       	st	X+, r22
    2434:	41 50       	subi	r20, 0x01	; 1
    2436:	50 40       	sbci	r21, 0x00	; 0
    2438:	e0 f7       	brcc	.-8      	; 0x2432 <memset+0x4>
    243a:	08 95       	ret

0000243c <strchr>:
    243c:	fc 01       	movw	r30, r24
    243e:	81 91       	ld	r24, Z+
    2440:	86 17       	cp	r24, r22
    2442:	21 f0       	breq	.+8      	; 0x244c <strchr+0x10>
    2444:	88 23       	and	r24, r24
    2446:	d9 f7       	brne	.-10     	; 0x243e <strchr+0x2>
    2448:	99 27       	eor	r25, r25
    244a:	08 95       	ret
    244c:	31 97       	sbiw	r30, 0x01	; 1
    244e:	cf 01       	movw	r24, r30
    2450:	08 95       	ret

00002452 <__mulhi_const_10>:
    2452:	bc 01       	movw	r22, r24
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	86 0f       	add	r24, r22
    245e:	97 1f       	adc	r25, r23
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	08 95       	ret

00002466 <__ctype_isfalse>:
    2466:	99 27       	eor	r25, r25
    2468:	88 27       	eor	r24, r24

0000246a <__ctype_istrue>:
    246a:	08 95       	ret

0000246c <_exit>:
    246c:	f8 94       	cli

0000246e <__stop_program>:
    246e:	ff cf       	rjmp	.-2      	; 0x246e <__stop_program>
